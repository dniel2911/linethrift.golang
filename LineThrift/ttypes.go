// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package LineThrift

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type ApplicationType int64

const (
	ApplicationType_IOS                ApplicationType = 16
	ApplicationType_IOS_RC             ApplicationType = 17
	ApplicationType_IOS_BETA           ApplicationType = 18
	ApplicationType_IOS_ALPHA          ApplicationType = 19
	ApplicationType_ANDROID            ApplicationType = 32
	ApplicationType_ANDROID_RC         ApplicationType = 33
	ApplicationType_ANDROID_BETA       ApplicationType = 34
	ApplicationType_ANDROID_ALPHA      ApplicationType = 35
	ApplicationType_WAP                ApplicationType = 48
	ApplicationType_WAP_RC             ApplicationType = 49
	ApplicationType_WAP_BETA           ApplicationType = 50
	ApplicationType_WAP_ALPHA          ApplicationType = 51
	ApplicationType_BOT                ApplicationType = 64
	ApplicationType_BOT_RC             ApplicationType = 65
	ApplicationType_BOT_BETA           ApplicationType = 66
	ApplicationType_BOT_ALPHA          ApplicationType = 67
	ApplicationType_WEB                ApplicationType = 80
	ApplicationType_WEB_RC             ApplicationType = 81
	ApplicationType_WEB_BETA           ApplicationType = 82
	ApplicationType_WEB_ALPHA          ApplicationType = 83
	ApplicationType_DESKTOPWIN         ApplicationType = 96
	ApplicationType_DESKTOPWIN_RC      ApplicationType = 97
	ApplicationType_DESKTOPWIN_BETA    ApplicationType = 98
	ApplicationType_DESKTOPWIN_ALPHA   ApplicationType = 99
	ApplicationType_DESKTOPMAC         ApplicationType = 112
	ApplicationType_DESKTOPMAC_RC      ApplicationType = 113
	ApplicationType_DESKTOPMAC_BETA    ApplicationType = 114
	ApplicationType_DESKTOPMAC_ALPHA   ApplicationType = 115
	ApplicationType_CHANNELGW          ApplicationType = 128
	ApplicationType_CHANNELGW_RC       ApplicationType = 129
	ApplicationType_CHANNELGW_BETA     ApplicationType = 130
	ApplicationType_CHANNELGW_ALPHA    ApplicationType = 131
	ApplicationType_CHANNELCP          ApplicationType = 144
	ApplicationType_CHANNELCP_RC       ApplicationType = 145
	ApplicationType_CHANNELCP_BETA     ApplicationType = 146
	ApplicationType_CHANNELCP_ALPHA    ApplicationType = 147
	ApplicationType_WINPHONE           ApplicationType = 160
	ApplicationType_WINPHONE_RC        ApplicationType = 161
	ApplicationType_WINPHONE_BETA      ApplicationType = 162
	ApplicationType_WINPHONE_ALPHA     ApplicationType = 163
	ApplicationType_BLACKBERRY         ApplicationType = 176
	ApplicationType_BLACKBERRY_RC      ApplicationType = 177
	ApplicationType_BLACKBERRY_BETA    ApplicationType = 178
	ApplicationType_BLACKBERRY_ALPHA   ApplicationType = 179
	ApplicationType_WINMETRO           ApplicationType = 192
	ApplicationType_WINMETRO_RC        ApplicationType = 193
	ApplicationType_WINMETRO_BETA      ApplicationType = 194
	ApplicationType_WINMETRO_ALPHA     ApplicationType = 195
	ApplicationType_S40                ApplicationType = 208
	ApplicationType_S40_RC             ApplicationType = 209
	ApplicationType_S40_BETA           ApplicationType = 210
	ApplicationType_S40_ALPHA          ApplicationType = 211
	ApplicationType_CHRONO             ApplicationType = 224
	ApplicationType_CHRONO_RC          ApplicationType = 225
	ApplicationType_CHRONO_BETA        ApplicationType = 226
	ApplicationType_CHRONO_ALPHA       ApplicationType = 227
	ApplicationType_TIZEN              ApplicationType = 256
	ApplicationType_TIZEN_RC           ApplicationType = 257
	ApplicationType_TIZEN_BETA         ApplicationType = 258
	ApplicationType_TIZEN_ALPHA        ApplicationType = 259
	ApplicationType_VIRTUAL            ApplicationType = 272
	ApplicationType_FIREROXOSF         ApplicationType = 288
	ApplicationType_FIREFOXOS_RC       ApplicationType = 289
	ApplicationType_FIREFOXOS_BETA     ApplicationType = 290
	ApplicationType_FIREFOXOS_ALPHA    ApplicationType = 291
	ApplicationType_IOSIPAD            ApplicationType = 304
	ApplicationType_IOSIPAD_RC         ApplicationType = 305
	ApplicationType_IOSIPAD_BETA       ApplicationType = 306
	ApplicationType_IOSIPAD_ALPHA      ApplicationType = 307
	ApplicationType_BIZIOS             ApplicationType = 320
	ApplicationType_BIZIOS_RC          ApplicationType = 321
	ApplicationType_BIZIOS_BETA        ApplicationType = 322
	ApplicationType_BIZIOS_ALPHA       ApplicationType = 323
	ApplicationType_BIZANDROID         ApplicationType = 336
	ApplicationType_BIZANDROID_RC      ApplicationType = 337
	ApplicationType_BIZANDROID_BETA    ApplicationType = 338
	ApplicationType_BIZANDROID_ALPHA   ApplicationType = 339
	ApplicationType_BIZBOT             ApplicationType = 352
	ApplicationType_BIZBOT_RC          ApplicationType = 353
	ApplicationType_BIZBOT_BETA        ApplicationType = 354
	ApplicationType_BIZBOT_ALPHA       ApplicationType = 355
	ApplicationType_CHROMEOS           ApplicationType = 368
	ApplicationType_CHROMEOS_RC        ApplicationType = 369
	ApplicationType_CHROMEOS_BETA      ApplicationType = 370
	ApplicationType_CHROMEOS_ALPHA     ApplicationType = 371
	ApplicationType_ANDROIDLITE        ApplicationType = 384
	ApplicationType_ANDROIDLITE_RC     ApplicationType = 385
	ApplicationType_ANDROIDLITE_BETA   ApplicationType = 386
	ApplicationType_ANDROIDLITE_ALPHA  ApplicationType = 387
	ApplicationType_WIN10              ApplicationType = 400
	ApplicationType_WIN10_RC           ApplicationType = 401
	ApplicationType_WIN10_BETA         ApplicationType = 402
	ApplicationType_WIN10_ALPHA        ApplicationType = 403
	ApplicationType_BIZWEB             ApplicationType = 416
	ApplicationType_BIZWEB_RC          ApplicationType = 417
	ApplicationType_BIZWEB_BETA        ApplicationType = 418
	ApplicationType_BIZWEB_ALPHA       ApplicationType = 419
	ApplicationType_DUMMYPRIMARY       ApplicationType = 432
	ApplicationType_DUMMYPRIMARY_RC    ApplicationType = 433
	ApplicationType_DUMMYPRIMARY_BETA  ApplicationType = 434
	ApplicationType_DUMMYPRIMARY_ALPHA ApplicationType = 435
	ApplicationType_SQUARE             ApplicationType = 448
	ApplicationType_SQUARE_RC          ApplicationType = 449
	ApplicationType_SQUARE_BETA        ApplicationType = 450
	ApplicationType_SQUARE_ALPHA       ApplicationType = 451
	ApplicationType_INTERNAL           ApplicationType = 464
	ApplicationType_INTERNAL_RC        ApplicationType = 465
	ApplicationType_INTERNAL_BETA      ApplicationType = 466
	ApplicationType_INTERNAL_ALPHA     ApplicationType = 467
)

func (p ApplicationType) String() string {
	switch p {
	case ApplicationType_IOS:
		return "IOS"
	case ApplicationType_IOS_RC:
		return "IOS_RC"
	case ApplicationType_IOS_BETA:
		return "IOS_BETA"
	case ApplicationType_IOS_ALPHA:
		return "IOS_ALPHA"
	case ApplicationType_ANDROID:
		return "ANDROID"
	case ApplicationType_ANDROID_RC:
		return "ANDROID_RC"
	case ApplicationType_ANDROID_BETA:
		return "ANDROID_BETA"
	case ApplicationType_ANDROID_ALPHA:
		return "ANDROID_ALPHA"
	case ApplicationType_WAP:
		return "WAP"
	case ApplicationType_WAP_RC:
		return "WAP_RC"
	case ApplicationType_WAP_BETA:
		return "WAP_BETA"
	case ApplicationType_WAP_ALPHA:
		return "WAP_ALPHA"
	case ApplicationType_BOT:
		return "BOT"
	case ApplicationType_BOT_RC:
		return "BOT_RC"
	case ApplicationType_BOT_BETA:
		return "BOT_BETA"
	case ApplicationType_BOT_ALPHA:
		return "BOT_ALPHA"
	case ApplicationType_WEB:
		return "WEB"
	case ApplicationType_WEB_RC:
		return "WEB_RC"
	case ApplicationType_WEB_BETA:
		return "WEB_BETA"
	case ApplicationType_WEB_ALPHA:
		return "WEB_ALPHA"
	case ApplicationType_DESKTOPWIN:
		return "DESKTOPWIN"
	case ApplicationType_DESKTOPWIN_RC:
		return "DESKTOPWIN_RC"
	case ApplicationType_DESKTOPWIN_BETA:
		return "DESKTOPWIN_BETA"
	case ApplicationType_DESKTOPWIN_ALPHA:
		return "DESKTOPWIN_ALPHA"
	case ApplicationType_DESKTOPMAC:
		return "DESKTOPMAC"
	case ApplicationType_DESKTOPMAC_RC:
		return "DESKTOPMAC_RC"
	case ApplicationType_DESKTOPMAC_BETA:
		return "DESKTOPMAC_BETA"
	case ApplicationType_DESKTOPMAC_ALPHA:
		return "DESKTOPMAC_ALPHA"
	case ApplicationType_CHANNELGW:
		return "CHANNELGW"
	case ApplicationType_CHANNELGW_RC:
		return "CHANNELGW_RC"
	case ApplicationType_CHANNELGW_BETA:
		return "CHANNELGW_BETA"
	case ApplicationType_CHANNELGW_ALPHA:
		return "CHANNELGW_ALPHA"
	case ApplicationType_CHANNELCP:
		return "CHANNELCP"
	case ApplicationType_CHANNELCP_RC:
		return "CHANNELCP_RC"
	case ApplicationType_CHANNELCP_BETA:
		return "CHANNELCP_BETA"
	case ApplicationType_CHANNELCP_ALPHA:
		return "CHANNELCP_ALPHA"
	case ApplicationType_WINPHONE:
		return "WINPHONE"
	case ApplicationType_WINPHONE_RC:
		return "WINPHONE_RC"
	case ApplicationType_WINPHONE_BETA:
		return "WINPHONE_BETA"
	case ApplicationType_WINPHONE_ALPHA:
		return "WINPHONE_ALPHA"
	case ApplicationType_BLACKBERRY:
		return "BLACKBERRY"
	case ApplicationType_BLACKBERRY_RC:
		return "BLACKBERRY_RC"
	case ApplicationType_BLACKBERRY_BETA:
		return "BLACKBERRY_BETA"
	case ApplicationType_BLACKBERRY_ALPHA:
		return "BLACKBERRY_ALPHA"
	case ApplicationType_WINMETRO:
		return "WINMETRO"
	case ApplicationType_WINMETRO_RC:
		return "WINMETRO_RC"
	case ApplicationType_WINMETRO_BETA:
		return "WINMETRO_BETA"
	case ApplicationType_WINMETRO_ALPHA:
		return "WINMETRO_ALPHA"
	case ApplicationType_S40:
		return "S40"
	case ApplicationType_S40_RC:
		return "S40_RC"
	case ApplicationType_S40_BETA:
		return "S40_BETA"
	case ApplicationType_S40_ALPHA:
		return "S40_ALPHA"
	case ApplicationType_CHRONO:
		return "CHRONO"
	case ApplicationType_CHRONO_RC:
		return "CHRONO_RC"
	case ApplicationType_CHRONO_BETA:
		return "CHRONO_BETA"
	case ApplicationType_CHRONO_ALPHA:
		return "CHRONO_ALPHA"
	case ApplicationType_TIZEN:
		return "TIZEN"
	case ApplicationType_TIZEN_RC:
		return "TIZEN_RC"
	case ApplicationType_TIZEN_BETA:
		return "TIZEN_BETA"
	case ApplicationType_TIZEN_ALPHA:
		return "TIZEN_ALPHA"
	case ApplicationType_VIRTUAL:
		return "VIRTUAL"
	case ApplicationType_FIREROXOSF:
		return "FIREROXOSF"
	case ApplicationType_FIREFOXOS_RC:
		return "FIREFOXOS_RC"
	case ApplicationType_FIREFOXOS_BETA:
		return "FIREFOXOS_BETA"
	case ApplicationType_FIREFOXOS_ALPHA:
		return "FIREFOXOS_ALPHA"
	case ApplicationType_IOSIPAD:
		return "IOSIPAD"
	case ApplicationType_IOSIPAD_RC:
		return "IOSIPAD_RC"
	case ApplicationType_IOSIPAD_BETA:
		return "IOSIPAD_BETA"
	case ApplicationType_IOSIPAD_ALPHA:
		return "IOSIPAD_ALPHA"
	case ApplicationType_BIZIOS:
		return "BIZIOS"
	case ApplicationType_BIZIOS_RC:
		return "BIZIOS_RC"
	case ApplicationType_BIZIOS_BETA:
		return "BIZIOS_BETA"
	case ApplicationType_BIZIOS_ALPHA:
		return "BIZIOS_ALPHA"
	case ApplicationType_BIZANDROID:
		return "BIZANDROID"
	case ApplicationType_BIZANDROID_RC:
		return "BIZANDROID_RC"
	case ApplicationType_BIZANDROID_BETA:
		return "BIZANDROID_BETA"
	case ApplicationType_BIZANDROID_ALPHA:
		return "BIZANDROID_ALPHA"
	case ApplicationType_BIZBOT:
		return "BIZBOT"
	case ApplicationType_BIZBOT_RC:
		return "BIZBOT_RC"
	case ApplicationType_BIZBOT_BETA:
		return "BIZBOT_BETA"
	case ApplicationType_BIZBOT_ALPHA:
		return "BIZBOT_ALPHA"
	case ApplicationType_CHROMEOS:
		return "CHROMEOS"
	case ApplicationType_CHROMEOS_RC:
		return "CHROMEOS_RC"
	case ApplicationType_CHROMEOS_BETA:
		return "CHROMEOS_BETA"
	case ApplicationType_CHROMEOS_ALPHA:
		return "CHROMEOS_ALPHA"
	case ApplicationType_ANDROIDLITE:
		return "ANDROIDLITE"
	case ApplicationType_ANDROIDLITE_RC:
		return "ANDROIDLITE_RC"
	case ApplicationType_ANDROIDLITE_BETA:
		return "ANDROIDLITE_BETA"
	case ApplicationType_ANDROIDLITE_ALPHA:
		return "ANDROIDLITE_ALPHA"
	case ApplicationType_WIN10:
		return "WIN10"
	case ApplicationType_WIN10_RC:
		return "WIN10_RC"
	case ApplicationType_WIN10_BETA:
		return "WIN10_BETA"
	case ApplicationType_WIN10_ALPHA:
		return "WIN10_ALPHA"
	case ApplicationType_BIZWEB:
		return "BIZWEB"
	case ApplicationType_BIZWEB_RC:
		return "BIZWEB_RC"
	case ApplicationType_BIZWEB_BETA:
		return "BIZWEB_BETA"
	case ApplicationType_BIZWEB_ALPHA:
		return "BIZWEB_ALPHA"
	case ApplicationType_DUMMYPRIMARY:
		return "DUMMYPRIMARY"
	case ApplicationType_DUMMYPRIMARY_RC:
		return "DUMMYPRIMARY_RC"
	case ApplicationType_DUMMYPRIMARY_BETA:
		return "DUMMYPRIMARY_BETA"
	case ApplicationType_DUMMYPRIMARY_ALPHA:
		return "DUMMYPRIMARY_ALPHA"
	case ApplicationType_SQUARE:
		return "SQUARE"
	case ApplicationType_SQUARE_RC:
		return "SQUARE_RC"
	case ApplicationType_SQUARE_BETA:
		return "SQUARE_BETA"
	case ApplicationType_SQUARE_ALPHA:
		return "SQUARE_ALPHA"
	case ApplicationType_INTERNAL:
		return "INTERNAL"
	case ApplicationType_INTERNAL_RC:
		return "INTERNAL_RC"
	case ApplicationType_INTERNAL_BETA:
		return "INTERNAL_BETA"
	case ApplicationType_INTERNAL_ALPHA:
		return "INTERNAL_ALPHA"
	}
	return "<UNSET>"
}

func ApplicationTypeFromString(s string) (ApplicationType, error) {
	switch s {
	case "IOS":
		return ApplicationType_IOS, nil
	case "IOS_RC":
		return ApplicationType_IOS_RC, nil
	case "IOS_BETA":
		return ApplicationType_IOS_BETA, nil
	case "IOS_ALPHA":
		return ApplicationType_IOS_ALPHA, nil
	case "ANDROID":
		return ApplicationType_ANDROID, nil
	case "ANDROID_RC":
		return ApplicationType_ANDROID_RC, nil
	case "ANDROID_BETA":
		return ApplicationType_ANDROID_BETA, nil
	case "ANDROID_ALPHA":
		return ApplicationType_ANDROID_ALPHA, nil
	case "WAP":
		return ApplicationType_WAP, nil
	case "WAP_RC":
		return ApplicationType_WAP_RC, nil
	case "WAP_BETA":
		return ApplicationType_WAP_BETA, nil
	case "WAP_ALPHA":
		return ApplicationType_WAP_ALPHA, nil
	case "BOT":
		return ApplicationType_BOT, nil
	case "BOT_RC":
		return ApplicationType_BOT_RC, nil
	case "BOT_BETA":
		return ApplicationType_BOT_BETA, nil
	case "BOT_ALPHA":
		return ApplicationType_BOT_ALPHA, nil
	case "WEB":
		return ApplicationType_WEB, nil
	case "WEB_RC":
		return ApplicationType_WEB_RC, nil
	case "WEB_BETA":
		return ApplicationType_WEB_BETA, nil
	case "WEB_ALPHA":
		return ApplicationType_WEB_ALPHA, nil
	case "DESKTOPWIN":
		return ApplicationType_DESKTOPWIN, nil
	case "DESKTOPWIN_RC":
		return ApplicationType_DESKTOPWIN_RC, nil
	case "DESKTOPWIN_BETA":
		return ApplicationType_DESKTOPWIN_BETA, nil
	case "DESKTOPWIN_ALPHA":
		return ApplicationType_DESKTOPWIN_ALPHA, nil
	case "DESKTOPMAC":
		return ApplicationType_DESKTOPMAC, nil
	case "DESKTOPMAC_RC":
		return ApplicationType_DESKTOPMAC_RC, nil
	case "DESKTOPMAC_BETA":
		return ApplicationType_DESKTOPMAC_BETA, nil
	case "DESKTOPMAC_ALPHA":
		return ApplicationType_DESKTOPMAC_ALPHA, nil
	case "CHANNELGW":
		return ApplicationType_CHANNELGW, nil
	case "CHANNELGW_RC":
		return ApplicationType_CHANNELGW_RC, nil
	case "CHANNELGW_BETA":
		return ApplicationType_CHANNELGW_BETA, nil
	case "CHANNELGW_ALPHA":
		return ApplicationType_CHANNELGW_ALPHA, nil
	case "CHANNELCP":
		return ApplicationType_CHANNELCP, nil
	case "CHANNELCP_RC":
		return ApplicationType_CHANNELCP_RC, nil
	case "CHANNELCP_BETA":
		return ApplicationType_CHANNELCP_BETA, nil
	case "CHANNELCP_ALPHA":
		return ApplicationType_CHANNELCP_ALPHA, nil
	case "WINPHONE":
		return ApplicationType_WINPHONE, nil
	case "WINPHONE_RC":
		return ApplicationType_WINPHONE_RC, nil
	case "WINPHONE_BETA":
		return ApplicationType_WINPHONE_BETA, nil
	case "WINPHONE_ALPHA":
		return ApplicationType_WINPHONE_ALPHA, nil
	case "BLACKBERRY":
		return ApplicationType_BLACKBERRY, nil
	case "BLACKBERRY_RC":
		return ApplicationType_BLACKBERRY_RC, nil
	case "BLACKBERRY_BETA":
		return ApplicationType_BLACKBERRY_BETA, nil
	case "BLACKBERRY_ALPHA":
		return ApplicationType_BLACKBERRY_ALPHA, nil
	case "WINMETRO":
		return ApplicationType_WINMETRO, nil
	case "WINMETRO_RC":
		return ApplicationType_WINMETRO_RC, nil
	case "WINMETRO_BETA":
		return ApplicationType_WINMETRO_BETA, nil
	case "WINMETRO_ALPHA":
		return ApplicationType_WINMETRO_ALPHA, nil
	case "S40":
		return ApplicationType_S40, nil
	case "S40_RC":
		return ApplicationType_S40_RC, nil
	case "S40_BETA":
		return ApplicationType_S40_BETA, nil
	case "S40_ALPHA":
		return ApplicationType_S40_ALPHA, nil
	case "CHRONO":
		return ApplicationType_CHRONO, nil
	case "CHRONO_RC":
		return ApplicationType_CHRONO_RC, nil
	case "CHRONO_BETA":
		return ApplicationType_CHRONO_BETA, nil
	case "CHRONO_ALPHA":
		return ApplicationType_CHRONO_ALPHA, nil
	case "TIZEN":
		return ApplicationType_TIZEN, nil
	case "TIZEN_RC":
		return ApplicationType_TIZEN_RC, nil
	case "TIZEN_BETA":
		return ApplicationType_TIZEN_BETA, nil
	case "TIZEN_ALPHA":
		return ApplicationType_TIZEN_ALPHA, nil
	case "VIRTUAL":
		return ApplicationType_VIRTUAL, nil
	case "FIREROXOSF":
		return ApplicationType_FIREROXOSF, nil
	case "FIREFOXOS_RC":
		return ApplicationType_FIREFOXOS_RC, nil
	case "FIREFOXOS_BETA":
		return ApplicationType_FIREFOXOS_BETA, nil
	case "FIREFOXOS_ALPHA":
		return ApplicationType_FIREFOXOS_ALPHA, nil
	case "IOSIPAD":
		return ApplicationType_IOSIPAD, nil
	case "IOSIPAD_RC":
		return ApplicationType_IOSIPAD_RC, nil
	case "IOSIPAD_BETA":
		return ApplicationType_IOSIPAD_BETA, nil
	case "IOSIPAD_ALPHA":
		return ApplicationType_IOSIPAD_ALPHA, nil
	case "BIZIOS":
		return ApplicationType_BIZIOS, nil
	case "BIZIOS_RC":
		return ApplicationType_BIZIOS_RC, nil
	case "BIZIOS_BETA":
		return ApplicationType_BIZIOS_BETA, nil
	case "BIZIOS_ALPHA":
		return ApplicationType_BIZIOS_ALPHA, nil
	case "BIZANDROID":
		return ApplicationType_BIZANDROID, nil
	case "BIZANDROID_RC":
		return ApplicationType_BIZANDROID_RC, nil
	case "BIZANDROID_BETA":
		return ApplicationType_BIZANDROID_BETA, nil
	case "BIZANDROID_ALPHA":
		return ApplicationType_BIZANDROID_ALPHA, nil
	case "BIZBOT":
		return ApplicationType_BIZBOT, nil
	case "BIZBOT_RC":
		return ApplicationType_BIZBOT_RC, nil
	case "BIZBOT_BETA":
		return ApplicationType_BIZBOT_BETA, nil
	case "BIZBOT_ALPHA":
		return ApplicationType_BIZBOT_ALPHA, nil
	case "CHROMEOS":
		return ApplicationType_CHROMEOS, nil
	case "CHROMEOS_RC":
		return ApplicationType_CHROMEOS_RC, nil
	case "CHROMEOS_BETA":
		return ApplicationType_CHROMEOS_BETA, nil
	case "CHROMEOS_ALPHA":
		return ApplicationType_CHROMEOS_ALPHA, nil
	case "ANDROIDLITE":
		return ApplicationType_ANDROIDLITE, nil
	case "ANDROIDLITE_RC":
		return ApplicationType_ANDROIDLITE_RC, nil
	case "ANDROIDLITE_BETA":
		return ApplicationType_ANDROIDLITE_BETA, nil
	case "ANDROIDLITE_ALPHA":
		return ApplicationType_ANDROIDLITE_ALPHA, nil
	case "WIN10":
		return ApplicationType_WIN10, nil
	case "WIN10_RC":
		return ApplicationType_WIN10_RC, nil
	case "WIN10_BETA":
		return ApplicationType_WIN10_BETA, nil
	case "WIN10_ALPHA":
		return ApplicationType_WIN10_ALPHA, nil
	case "BIZWEB":
		return ApplicationType_BIZWEB, nil
	case "BIZWEB_RC":
		return ApplicationType_BIZWEB_RC, nil
	case "BIZWEB_BETA":
		return ApplicationType_BIZWEB_BETA, nil
	case "BIZWEB_ALPHA":
		return ApplicationType_BIZWEB_ALPHA, nil
	case "DUMMYPRIMARY":
		return ApplicationType_DUMMYPRIMARY, nil
	case "DUMMYPRIMARY_RC":
		return ApplicationType_DUMMYPRIMARY_RC, nil
	case "DUMMYPRIMARY_BETA":
		return ApplicationType_DUMMYPRIMARY_BETA, nil
	case "DUMMYPRIMARY_ALPHA":
		return ApplicationType_DUMMYPRIMARY_ALPHA, nil
	case "SQUARE":
		return ApplicationType_SQUARE, nil
	case "SQUARE_RC":
		return ApplicationType_SQUARE_RC, nil
	case "SQUARE_BETA":
		return ApplicationType_SQUARE_BETA, nil
	case "SQUARE_ALPHA":
		return ApplicationType_SQUARE_ALPHA, nil
	case "INTERNAL":
		return ApplicationType_INTERNAL, nil
	case "INTERNAL_RC":
		return ApplicationType_INTERNAL_RC, nil
	case "INTERNAL_BETA":
		return ApplicationType_INTERNAL_BETA, nil
	case "INTERNAL_ALPHA":
		return ApplicationType_INTERNAL_ALPHA, nil
	}
	return ApplicationType(0), fmt.Errorf("not a valid ApplicationType string")
}

func ApplicationTypePtr(v ApplicationType) *ApplicationType { return &v }

func (p ApplicationType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ApplicationType) UnmarshalText(text []byte) error {
	q, err := ApplicationTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ChannelConfiguration int64

const (
	ChannelConfiguration_MESSAGE              ChannelConfiguration = 0
	ChannelConfiguration_MESSAGE_NOTIFICATION ChannelConfiguration = 1
	ChannelConfiguration_NOTIFICATION_CENTER  ChannelConfiguration = 2
)

func (p ChannelConfiguration) String() string {
	switch p {
	case ChannelConfiguration_MESSAGE:
		return "MESSAGE"
	case ChannelConfiguration_MESSAGE_NOTIFICATION:
		return "MESSAGE_NOTIFICATION"
	case ChannelConfiguration_NOTIFICATION_CENTER:
		return "NOTIFICATION_CENTER"
	}
	return "<UNSET>"
}

func ChannelConfigurationFromString(s string) (ChannelConfiguration, error) {
	switch s {
	case "MESSAGE":
		return ChannelConfiguration_MESSAGE, nil
	case "MESSAGE_NOTIFICATION":
		return ChannelConfiguration_MESSAGE_NOTIFICATION, nil
	case "NOTIFICATION_CENTER":
		return ChannelConfiguration_NOTIFICATION_CENTER, nil
	}
	return ChannelConfiguration(0), fmt.Errorf("not a valid ChannelConfiguration string")
}

func ChannelConfigurationPtr(v ChannelConfiguration) *ChannelConfiguration { return &v }

func (p ChannelConfiguration) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ChannelConfiguration) UnmarshalText(text []byte) error {
	q, err := ChannelConfigurationFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ChannelErrorCode int64

const (
	ChannelErrorCode_ILLEGAL_ARGUMENT         ChannelErrorCode = 0
	ChannelErrorCode_INTERNAL_ERROR           ChannelErrorCode = 1
	ChannelErrorCode_CONNECTION_ERROR         ChannelErrorCode = 2
	ChannelErrorCode_AUTHENTICATIONI_FAILED   ChannelErrorCode = 3
	ChannelErrorCode_NEED_PERMISSION_APPROVAL ChannelErrorCode = 4
	ChannelErrorCode_COIN_NOT_USABLE          ChannelErrorCode = 5
	ChannelErrorCode_WEBVIEW_NOT_ALLOWED      ChannelErrorCode = 6
)

func (p ChannelErrorCode) String() string {
	switch p {
	case ChannelErrorCode_ILLEGAL_ARGUMENT:
		return "ILLEGAL_ARGUMENT"
	case ChannelErrorCode_INTERNAL_ERROR:
		return "INTERNAL_ERROR"
	case ChannelErrorCode_CONNECTION_ERROR:
		return "CONNECTION_ERROR"
	case ChannelErrorCode_AUTHENTICATIONI_FAILED:
		return "AUTHENTICATIONI_FAILED"
	case ChannelErrorCode_NEED_PERMISSION_APPROVAL:
		return "NEED_PERMISSION_APPROVAL"
	case ChannelErrorCode_COIN_NOT_USABLE:
		return "COIN_NOT_USABLE"
	case ChannelErrorCode_WEBVIEW_NOT_ALLOWED:
		return "WEBVIEW_NOT_ALLOWED"
	}
	return "<UNSET>"
}

func ChannelErrorCodeFromString(s string) (ChannelErrorCode, error) {
	switch s {
	case "ILLEGAL_ARGUMENT":
		return ChannelErrorCode_ILLEGAL_ARGUMENT, nil
	case "INTERNAL_ERROR":
		return ChannelErrorCode_INTERNAL_ERROR, nil
	case "CONNECTION_ERROR":
		return ChannelErrorCode_CONNECTION_ERROR, nil
	case "AUTHENTICATIONI_FAILED":
		return ChannelErrorCode_AUTHENTICATIONI_FAILED, nil
	case "NEED_PERMISSION_APPROVAL":
		return ChannelErrorCode_NEED_PERMISSION_APPROVAL, nil
	case "COIN_NOT_USABLE":
		return ChannelErrorCode_COIN_NOT_USABLE, nil
	case "WEBVIEW_NOT_ALLOWED":
		return ChannelErrorCode_WEBVIEW_NOT_ALLOWED, nil
	}
	return ChannelErrorCode(0), fmt.Errorf("not a valid ChannelErrorCode string")
}

func ChannelErrorCodePtr(v ChannelErrorCode) *ChannelErrorCode { return &v }

func (p ChannelErrorCode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ChannelErrorCode) UnmarshalText(text []byte) error {
	q, err := ChannelErrorCodeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ChannelSyncType int64

const (
	ChannelSyncType_SYNC   ChannelSyncType = 0
	ChannelSyncType_REMOVE ChannelSyncType = 1
)

func (p ChannelSyncType) String() string {
	switch p {
	case ChannelSyncType_SYNC:
		return "SYNC"
	case ChannelSyncType_REMOVE:
		return "REMOVE"
	}
	return "<UNSET>"
}

func ChannelSyncTypeFromString(s string) (ChannelSyncType, error) {
	switch s {
	case "SYNC":
		return ChannelSyncType_SYNC, nil
	case "REMOVE":
		return ChannelSyncType_REMOVE, nil
	}
	return ChannelSyncType(0), fmt.Errorf("not a valid ChannelSyncType string")
}

func ChannelSyncTypePtr(v ChannelSyncType) *ChannelSyncType { return &v }

func (p ChannelSyncType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ChannelSyncType) UnmarshalText(text []byte) error {
	q, err := ChannelSyncTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ExtendAttr int64

const (
	ExtendAttr_BIRTHDAY ExtendAttr = 0
)

func (p ExtendAttr) String() string {
	switch p {
	case ExtendAttr_BIRTHDAY:
		return "BIRTHDAY"
	}
	return "<UNSET>"
}

func ExtendAttrFromString(s string) (ExtendAttr, error) {
	switch s {
	case "BIRTHDAY":
		return ExtendAttr_BIRTHDAY, nil
	}
	return ExtendAttr(0), fmt.Errorf("not a valid ExtendAttr string")
}

func ExtendAttrPtr(v ExtendAttr) *ExtendAttr { return &v }

func (p ExtendAttr) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ExtendAttr) UnmarshalText(text []byte) error {
	q, err := ExtendAttrFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type AllowedPermission int64

const (
	AllowedPermission_PROFILE AllowedPermission = 0
	AllowedPermission_FRIENDS AllowedPermission = 1
	AllowedPermission_GROUP   AllowedPermission = 2
)

func (p AllowedPermission) String() string {
	switch p {
	case AllowedPermission_PROFILE:
		return "PROFILE"
	case AllowedPermission_FRIENDS:
		return "FRIENDS"
	case AllowedPermission_GROUP:
		return "GROUP"
	}
	return "<UNSET>"
}

func AllowedPermissionFromString(s string) (AllowedPermission, error) {
	switch s {
	case "PROFILE":
		return AllowedPermission_PROFILE, nil
	case "FRIENDS":
		return AllowedPermission_FRIENDS, nil
	case "GROUP":
		return AllowedPermission_GROUP, nil
	}
	return AllowedPermission(0), fmt.Errorf("not a valid AllowedPermission string")
}

func AllowedPermissionPtr(v AllowedPermission) *AllowedPermission { return &v }

func (p AllowedPermission) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *AllowedPermission) UnmarshalText(text []byte) error {
	q, err := AllowedPermissionFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ContactAttribute int64

const (
	ContactAttribute_CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL ContactAttribute = 0
	ContactAttribute_CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL ContactAttribute = 1
	ContactAttribute_CONTACT_ATTRIBUTE_CAPABLE_MY_HOME    ContactAttribute = 2
	ContactAttribute_CONTACT_ATTRIBUTE_CAPABLE_BUDDY      ContactAttribute = 3
)

func (p ContactAttribute) String() string {
	switch p {
	case ContactAttribute_CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL:
		return "CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL"
	case ContactAttribute_CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL:
		return "CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL"
	case ContactAttribute_CONTACT_ATTRIBUTE_CAPABLE_MY_HOME:
		return "CONTACT_ATTRIBUTE_CAPABLE_MY_HOME"
	case ContactAttribute_CONTACT_ATTRIBUTE_CAPABLE_BUDDY:
		return "CONTACT_ATTRIBUTE_CAPABLE_BUDDY"
	}
	return "<UNSET>"
}

func ContactAttributeFromString(s string) (ContactAttribute, error) {
	switch s {
	case "CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL":
		return ContactAttribute_CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL, nil
	case "CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL":
		return ContactAttribute_CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL, nil
	case "CONTACT_ATTRIBUTE_CAPABLE_MY_HOME":
		return ContactAttribute_CONTACT_ATTRIBUTE_CAPABLE_MY_HOME, nil
	case "CONTACT_ATTRIBUTE_CAPABLE_BUDDY":
		return ContactAttribute_CONTACT_ATTRIBUTE_CAPABLE_BUDDY, nil
	}
	return ContactAttribute(0), fmt.Errorf("not a valid ContactAttribute string")
}

func ContactAttributePtr(v ContactAttribute) *ContactAttribute { return &v }

func (p ContactAttribute) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ContactAttribute) UnmarshalText(text []byte) error {
	q, err := ContactAttributeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ContactCategory int64

const (
	ContactCategory_NORMAL    ContactCategory = 0
	ContactCategory_RECOMMEND ContactCategory = 1
)

func (p ContactCategory) String() string {
	switch p {
	case ContactCategory_NORMAL:
		return "NORMAL"
	case ContactCategory_RECOMMEND:
		return "RECOMMEND"
	}
	return "<UNSET>"
}

func ContactCategoryFromString(s string) (ContactCategory, error) {
	switch s {
	case "NORMAL":
		return ContactCategory_NORMAL, nil
	case "RECOMMEND":
		return ContactCategory_RECOMMEND, nil
	}
	return ContactCategory(0), fmt.Errorf("not a valid ContactCategory string")
}

func ContactCategoryPtr(v ContactCategory) *ContactCategory { return &v }

func (p ContactCategory) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ContactCategory) UnmarshalText(text []byte) error {
	q, err := ContactCategoryFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ContactRelation int64

const (
	ContactRelation_ONEWAY         ContactRelation = 0
	ContactRelation_BOTH           ContactRelation = 1
	ContactRelation_NOT_REGISTERED ContactRelation = 2
)

func (p ContactRelation) String() string {
	switch p {
	case ContactRelation_ONEWAY:
		return "ONEWAY"
	case ContactRelation_BOTH:
		return "BOTH"
	case ContactRelation_NOT_REGISTERED:
		return "NOT_REGISTERED"
	}
	return "<UNSET>"
}

func ContactRelationFromString(s string) (ContactRelation, error) {
	switch s {
	case "ONEWAY":
		return ContactRelation_ONEWAY, nil
	case "BOTH":
		return ContactRelation_BOTH, nil
	case "NOT_REGISTERED":
		return ContactRelation_NOT_REGISTERED, nil
	}
	return ContactRelation(0), fmt.Errorf("not a valid ContactRelation string")
}

func ContactRelationPtr(v ContactRelation) *ContactRelation { return &v }

func (p ContactRelation) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ContactRelation) UnmarshalText(text []byte) error {
	q, err := ContactRelationFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ContactSetting int64

const (
	ContactSetting_CONTACT_SETTING_NOTIFICATION_DISABLE  ContactSetting = 1
	ContactSetting_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE ContactSetting = 2
	ContactSetting_CONTACT_SETTING_CONTACT_HIDE          ContactSetting = 4
	ContactSetting_CONTACT_SETTING_FAVORITE              ContactSetting = 8
	ContactSetting_CONTACT_SETTING_DELETE                ContactSetting = 16
)

func (p ContactSetting) String() string {
	switch p {
	case ContactSetting_CONTACT_SETTING_NOTIFICATION_DISABLE:
		return "CONTACT_SETTING_NOTIFICATION_DISABLE"
	case ContactSetting_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE:
		return "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE"
	case ContactSetting_CONTACT_SETTING_CONTACT_HIDE:
		return "CONTACT_SETTING_CONTACT_HIDE"
	case ContactSetting_CONTACT_SETTING_FAVORITE:
		return "CONTACT_SETTING_FAVORITE"
	case ContactSetting_CONTACT_SETTING_DELETE:
		return "CONTACT_SETTING_DELETE"
	}
	return "<UNSET>"
}

func ContactSettingFromString(s string) (ContactSetting, error) {
	switch s {
	case "CONTACT_SETTING_NOTIFICATION_DISABLE":
		return ContactSetting_CONTACT_SETTING_NOTIFICATION_DISABLE, nil
	case "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE":
		return ContactSetting_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE, nil
	case "CONTACT_SETTING_CONTACT_HIDE":
		return ContactSetting_CONTACT_SETTING_CONTACT_HIDE, nil
	case "CONTACT_SETTING_FAVORITE":
		return ContactSetting_CONTACT_SETTING_FAVORITE, nil
	case "CONTACT_SETTING_DELETE":
		return ContactSetting_CONTACT_SETTING_DELETE, nil
	}
	return ContactSetting(0), fmt.Errorf("not a valid ContactSetting string")
}

func ContactSettingPtr(v ContactSetting) *ContactSetting { return &v }

func (p ContactSetting) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ContactSetting) UnmarshalText(text []byte) error {
	q, err := ContactSettingFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ContactStatus int64

const (
	ContactStatus_UNSPECIFIED       ContactStatus = 0
	ContactStatus_FRIEND            ContactStatus = 1
	ContactStatus_FRIEND_BLOCKED    ContactStatus = 2
	ContactStatus_RECOMMEND         ContactStatus = 3
	ContactStatus_RECOMMEND_BLOCKED ContactStatus = 4
	ContactStatus_DELETED           ContactStatus = 5
	ContactStatus_DELETED_BLOCKED   ContactStatus = 6
)

func (p ContactStatus) String() string {
	switch p {
	case ContactStatus_UNSPECIFIED:
		return "UNSPECIFIED"
	case ContactStatus_FRIEND:
		return "FRIEND"
	case ContactStatus_FRIEND_BLOCKED:
		return "FRIEND_BLOCKED"
	case ContactStatus_RECOMMEND:
		return "RECOMMEND"
	case ContactStatus_RECOMMEND_BLOCKED:
		return "RECOMMEND_BLOCKED"
	case ContactStatus_DELETED:
		return "DELETED"
	case ContactStatus_DELETED_BLOCKED:
		return "DELETED_BLOCKED"
	}
	return "<UNSET>"
}

func ContactStatusFromString(s string) (ContactStatus, error) {
	switch s {
	case "UNSPECIFIED":
		return ContactStatus_UNSPECIFIED, nil
	case "FRIEND":
		return ContactStatus_FRIEND, nil
	case "FRIEND_BLOCKED":
		return ContactStatus_FRIEND_BLOCKED, nil
	case "RECOMMEND":
		return ContactStatus_RECOMMEND, nil
	case "RECOMMEND_BLOCKED":
		return ContactStatus_RECOMMEND_BLOCKED, nil
	case "DELETED":
		return ContactStatus_DELETED, nil
	case "DELETED_BLOCKED":
		return ContactStatus_DELETED_BLOCKED, nil
	}
	return ContactStatus(0), fmt.Errorf("not a valid ContactStatus string")
}

func ContactStatusPtr(v ContactStatus) *ContactStatus { return &v }

func (p ContactStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ContactStatus) UnmarshalText(text []byte) error {
	q, err := ContactStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ContactType int64

const (
	ContactType_MID             ContactType = 0
	ContactType_PHONE           ContactType = 1
	ContactType_EMAIL           ContactType = 2
	ContactType_USERID          ContactType = 3
	ContactType_PROXIMITY       ContactType = 4
	ContactType_GROUP           ContactType = 5
	ContactType_USER            ContactType = 6
	ContactType_QRCODE          ContactType = 7
	ContactType_PROMOTION_BOT   ContactType = 8
	ContactType_CONTACT_MESSAGE ContactType = 9
	ContactType_FRIEND_REQUEST  ContactType = 10
	ContactType_REPAIR          ContactType = 128
	ContactType_FACEBOOK        ContactType = 2305
	ContactType_SINA            ContactType = 2306
	ContactType_RENREN          ContactType = 2307
	ContactType_FEIXIN          ContactType = 2308
	ContactType_BBM             ContactType = 2309
	ContactType_BEACON          ContactType = 11
)

func (p ContactType) String() string {
	switch p {
	case ContactType_MID:
		return "MID"
	case ContactType_PHONE:
		return "PHONE"
	case ContactType_EMAIL:
		return "EMAIL"
	case ContactType_USERID:
		return "USERID"
	case ContactType_PROXIMITY:
		return "PROXIMITY"
	case ContactType_GROUP:
		return "GROUP"
	case ContactType_USER:
		return "USER"
	case ContactType_QRCODE:
		return "QRCODE"
	case ContactType_PROMOTION_BOT:
		return "PROMOTION_BOT"
	case ContactType_CONTACT_MESSAGE:
		return "CONTACT_MESSAGE"
	case ContactType_FRIEND_REQUEST:
		return "FRIEND_REQUEST"
	case ContactType_REPAIR:
		return "REPAIR"
	case ContactType_FACEBOOK:
		return "FACEBOOK"
	case ContactType_SINA:
		return "SINA"
	case ContactType_RENREN:
		return "RENREN"
	case ContactType_FEIXIN:
		return "FEIXIN"
	case ContactType_BBM:
		return "BBM"
	case ContactType_BEACON:
		return "BEACON"
	}
	return "<UNSET>"
}

func ContactTypeFromString(s string) (ContactType, error) {
	switch s {
	case "MID":
		return ContactType_MID, nil
	case "PHONE":
		return ContactType_PHONE, nil
	case "EMAIL":
		return ContactType_EMAIL, nil
	case "USERID":
		return ContactType_USERID, nil
	case "PROXIMITY":
		return ContactType_PROXIMITY, nil
	case "GROUP":
		return ContactType_GROUP, nil
	case "USER":
		return ContactType_USER, nil
	case "QRCODE":
		return ContactType_QRCODE, nil
	case "PROMOTION_BOT":
		return ContactType_PROMOTION_BOT, nil
	case "CONTACT_MESSAGE":
		return ContactType_CONTACT_MESSAGE, nil
	case "FRIEND_REQUEST":
		return ContactType_FRIEND_REQUEST, nil
	case "REPAIR":
		return ContactType_REPAIR, nil
	case "FACEBOOK":
		return ContactType_FACEBOOK, nil
	case "SINA":
		return ContactType_SINA, nil
	case "RENREN":
		return ContactType_RENREN, nil
	case "FEIXIN":
		return ContactType_FEIXIN, nil
	case "BBM":
		return ContactType_BBM, nil
	case "BEACON":
		return ContactType_BEACON, nil
	}
	return ContactType(0), fmt.Errorf("not a valid ContactType string")
}

func ContactTypePtr(v ContactType) *ContactType { return &v }

func (p ContactType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ContactType) UnmarshalText(text []byte) error {
	q, err := ContactTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ContentType int64

const (
	ContentType_NONE             ContentType = 0
	ContentType_IMAGE            ContentType = 1
	ContentType_VIDEO            ContentType = 2
	ContentType_AUDIO            ContentType = 3
	ContentType_HTML             ContentType = 4
	ContentType_PDF              ContentType = 5
	ContentType_CALL             ContentType = 6
	ContentType_STICKER          ContentType = 7
	ContentType_PRESENCE         ContentType = 8
	ContentType_GIFT             ContentType = 9
	ContentType_GROUPBOARD       ContentType = 10
	ContentType_APPLINK          ContentType = 11
	ContentType_LINK             ContentType = 12
	ContentType_CONTACT          ContentType = 13
	ContentType_FILE             ContentType = 14
	ContentType_LOCATION         ContentType = 15
	ContentType_POSTNOTIFICATION ContentType = 16
	ContentType_RICH             ContentType = 17
	ContentType_CHATEVENT        ContentType = 18
	ContentType_MUSIC            ContentType = 19
	ContentType_PAYMENT          ContentType = 20
	ContentType_EXTIMAGE         ContentType = 21
)

func (p ContentType) String() string {
	switch p {
	case ContentType_NONE:
		return "NONE"
	case ContentType_IMAGE:
		return "IMAGE"
	case ContentType_VIDEO:
		return "VIDEO"
	case ContentType_AUDIO:
		return "AUDIO"
	case ContentType_HTML:
		return "HTML"
	case ContentType_PDF:
		return "PDF"
	case ContentType_CALL:
		return "CALL"
	case ContentType_STICKER:
		return "STICKER"
	case ContentType_PRESENCE:
		return "PRESENCE"
	case ContentType_GIFT:
		return "GIFT"
	case ContentType_GROUPBOARD:
		return "GROUPBOARD"
	case ContentType_APPLINK:
		return "APPLINK"
	case ContentType_LINK:
		return "LINK"
	case ContentType_CONTACT:
		return "CONTACT"
	case ContentType_FILE:
		return "FILE"
	case ContentType_LOCATION:
		return "LOCATION"
	case ContentType_POSTNOTIFICATION:
		return "POSTNOTIFICATION"
	case ContentType_RICH:
		return "RICH"
	case ContentType_CHATEVENT:
		return "CHATEVENT"
	case ContentType_MUSIC:
		return "MUSIC"
	case ContentType_PAYMENT:
		return "PAYMENT"
	case ContentType_EXTIMAGE:
		return "EXTIMAGE"
	}
	return "<UNSET>"
}

func ContentTypeFromString(s string) (ContentType, error) {
	switch s {
	case "NONE":
		return ContentType_NONE, nil
	case "IMAGE":
		return ContentType_IMAGE, nil
	case "VIDEO":
		return ContentType_VIDEO, nil
	case "AUDIO":
		return ContentType_AUDIO, nil
	case "HTML":
		return ContentType_HTML, nil
	case "PDF":
		return ContentType_PDF, nil
	case "CALL":
		return ContentType_CALL, nil
	case "STICKER":
		return ContentType_STICKER, nil
	case "PRESENCE":
		return ContentType_PRESENCE, nil
	case "GIFT":
		return ContentType_GIFT, nil
	case "GROUPBOARD":
		return ContentType_GROUPBOARD, nil
	case "APPLINK":
		return ContentType_APPLINK, nil
	case "LINK":
		return ContentType_LINK, nil
	case "CONTACT":
		return ContentType_CONTACT, nil
	case "FILE":
		return ContentType_FILE, nil
	case "LOCATION":
		return ContentType_LOCATION, nil
	case "POSTNOTIFICATION":
		return ContentType_POSTNOTIFICATION, nil
	case "RICH":
		return ContentType_RICH, nil
	case "CHATEVENT":
		return ContentType_CHATEVENT, nil
	case "MUSIC":
		return ContentType_MUSIC, nil
	case "PAYMENT":
		return ContentType_PAYMENT, nil
	case "EXTIMAGE":
		return ContentType_EXTIMAGE, nil
	}
	return ContentType(0), fmt.Errorf("not a valid ContentType string")
}

func ContentTypePtr(v ContentType) *ContentType { return &v }

func (p ContentType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ContentType) UnmarshalText(text []byte) error {
	q, err := ContentTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type CustomMode int64

const (
	CustomMode_PROMOTION_FRIENDS_INVITE            CustomMode = 1
	CustomMode_CAPABILITY_SERVER_SIDE_SMS          CustomMode = 2
	CustomMode_LINE_CLIENT_ANALYTICS_CONFIGURATION CustomMode = 3
)

func (p CustomMode) String() string {
	switch p {
	case CustomMode_PROMOTION_FRIENDS_INVITE:
		return "PROMOTION_FRIENDS_INVITE"
	case CustomMode_CAPABILITY_SERVER_SIDE_SMS:
		return "CAPABILITY_SERVER_SIDE_SMS"
	case CustomMode_LINE_CLIENT_ANALYTICS_CONFIGURATION:
		return "LINE_CLIENT_ANALYTICS_CONFIGURATION"
	}
	return "<UNSET>"
}

func CustomModeFromString(s string) (CustomMode, error) {
	switch s {
	case "PROMOTION_FRIENDS_INVITE":
		return CustomMode_PROMOTION_FRIENDS_INVITE, nil
	case "CAPABILITY_SERVER_SIDE_SMS":
		return CustomMode_CAPABILITY_SERVER_SIDE_SMS, nil
	case "LINE_CLIENT_ANALYTICS_CONFIGURATION":
		return CustomMode_LINE_CLIENT_ANALYTICS_CONFIGURATION, nil
	}
	return CustomMode(0), fmt.Errorf("not a valid CustomMode string")
}

func CustomModePtr(v CustomMode) *CustomMode { return &v }

func (p CustomMode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *CustomMode) UnmarshalText(text []byte) error {
	q, err := CustomModeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type EmailConfirmationStatus int64

const (
	EmailConfirmationStatus_NOT_SPECIFIED EmailConfirmationStatus = 0
	EmailConfirmationStatus_NOT_YET       EmailConfirmationStatus = 1
	EmailConfirmationStatus_DONE          EmailConfirmationStatus = 3
)

func (p EmailConfirmationStatus) String() string {
	switch p {
	case EmailConfirmationStatus_NOT_SPECIFIED:
		return "NOT_SPECIFIED"
	case EmailConfirmationStatus_NOT_YET:
		return "NOT_YET"
	case EmailConfirmationStatus_DONE:
		return "DONE"
	}
	return "<UNSET>"
}

func EmailConfirmationStatusFromString(s string) (EmailConfirmationStatus, error) {
	switch s {
	case "NOT_SPECIFIED":
		return EmailConfirmationStatus_NOT_SPECIFIED, nil
	case "NOT_YET":
		return EmailConfirmationStatus_NOT_YET, nil
	case "DONE":
		return EmailConfirmationStatus_DONE, nil
	}
	return EmailConfirmationStatus(0), fmt.Errorf("not a valid EmailConfirmationStatus string")
}

func EmailConfirmationStatusPtr(v EmailConfirmationStatus) *EmailConfirmationStatus { return &v }

func (p EmailConfirmationStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *EmailConfirmationStatus) UnmarshalText(text []byte) error {
	q, err := EmailConfirmationStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type EmailConfirmationType int64

const (
	EmailConfirmationType_SERVER_SIDE_EMAIL EmailConfirmationType = 0
	EmailConfirmationType_CLIENT_SIDE_EMAIL EmailConfirmationType = 1
)

func (p EmailConfirmationType) String() string {
	switch p {
	case EmailConfirmationType_SERVER_SIDE_EMAIL:
		return "SERVER_SIDE_EMAIL"
	case EmailConfirmationType_CLIENT_SIDE_EMAIL:
		return "CLIENT_SIDE_EMAIL"
	}
	return "<UNSET>"
}

func EmailConfirmationTypeFromString(s string) (EmailConfirmationType, error) {
	switch s {
	case "SERVER_SIDE_EMAIL":
		return EmailConfirmationType_SERVER_SIDE_EMAIL, nil
	case "CLIENT_SIDE_EMAIL":
		return EmailConfirmationType_CLIENT_SIDE_EMAIL, nil
	}
	return EmailConfirmationType(0), fmt.Errorf("not a valid EmailConfirmationType string")
}

func EmailConfirmationTypePtr(v EmailConfirmationType) *EmailConfirmationType { return &v }

func (p EmailConfirmationType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *EmailConfirmationType) UnmarshalText(text []byte) error {
	q, err := EmailConfirmationTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type FeatureType int64

const (
	FeatureType_OBJECT_STORAGE FeatureType = 1
)

func (p FeatureType) String() string {
	switch p {
	case FeatureType_OBJECT_STORAGE:
		return "OBJECT_STORAGE"
	}
	return "<UNSET>"
}

func FeatureTypeFromString(s string) (FeatureType, error) {
	switch s {
	case "OBJECT_STORAGE":
		return FeatureType_OBJECT_STORAGE, nil
	}
	return FeatureType(0), fmt.Errorf("not a valid FeatureType string")
}

func FeatureTypePtr(v FeatureType) *FeatureType { return &v }

func (p FeatureType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *FeatureType) UnmarshalText(text []byte) error {
	q, err := FeatureTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ErrorCode int64

const (
	ErrorCode_ILLEGAL_ARGUMENT                                      ErrorCode = 0
	ErrorCode_AUTHENTICATION_FAILED                                 ErrorCode = 1
	ErrorCode_DB_FAILED                                             ErrorCode = 2
	ErrorCode_INVALID_STATE                                         ErrorCode = 3
	ErrorCode_EXCESSIVE_ACCESS                                      ErrorCode = 4
	ErrorCode_NOT_FOUND                                             ErrorCode = 5
	ErrorCode_INVALID_MID                                           ErrorCode = 6
	ErrorCode_NOT_A_MEMBER                                          ErrorCode = 7
	ErrorCode_INVALID_LENGTH                                        ErrorCode = 8
	ErrorCode_NOT_AVAILABLE_USER                                    ErrorCode = 9
	ErrorCode_NOT_AUTHORIZED_DEVICE                                 ErrorCode = 10
	ErrorCode_NOT_AUTHORIZED_SESSION                                ErrorCode = 11
	ErrorCode_INCOMPATIBLE_APP_VERSION                              ErrorCode = 12
	ErrorCode_NOT_READY                                             ErrorCode = 13
	ErrorCode_NOT_AVAILABLE_SESSION                                 ErrorCode = 14
	ErrorCode_SYSTEM_ERROR                                          ErrorCode = 15
	ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD                      ErrorCode = 16
	ErrorCode_NOT_AUTHENTICATED                                     ErrorCode = 17
	ErrorCode_INVALID_IDENTITY_CREDENTIAL                           ErrorCode = 18
	ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER                     ErrorCode = 19
	ErrorCode_INTERNAL_ERROR                                        ErrorCode = 20
	ErrorCode_NO_SUCH_IDENTITY_IDENFIER                             ErrorCode = 21
	ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY            ErrorCode = 22
	ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL                           ErrorCode = 23
	ErrorCode_UNKNOWN_CHANNEL                                       ErrorCode = 24
	ErrorCode_NO_SUCH_MESSAGE_BOX                                   ErrorCode = 25
	ErrorCode_NOT_AVAILABLE_MESSAGE_BOX                             ErrorCode = 26
	ErrorCode_CHANNEL_DOES_NOT_MATCH                                ErrorCode = 27
	ErrorCode_NOT_YOUR_MESSAGE                                      ErrorCode = 28
	ErrorCode_MESSAGE_DEFINED_ERROR                                 ErrorCode = 29
	ErrorCode_USER_CANNOT_ACCEPT_PRESENTS                           ErrorCode = 30
	ErrorCode_USER_NOT_STICKER_OWNER                                ErrorCode = 32
	ErrorCode_MAINTENANCE_ERROR                                     ErrorCode = 33
	ErrorCode_ACCOUNT_NOT_MATCHED                                   ErrorCode = 34
	ErrorCode_ABUSE_BLOCK                                           ErrorCode = 35
	ErrorCode_NOT_FRIEND                                            ErrorCode = 36
	ErrorCode_NOT_ALLOWED_CALL                                      ErrorCode = 37
	ErrorCode_BLOCK_FRIEND                                          ErrorCode = 38
	ErrorCode_INCOMPATIBLE_VOIP_VERSION                             ErrorCode = 39
	ErrorCode_INVALID_SNS_ACCESS_TOKEN                              ErrorCode = 40
	ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE                        ErrorCode = 41
	ErrorCode_NOT_ALLOWED_ADD_CONTACT                               ErrorCode = 42
	ErrorCode_NOT_CERTIFICATED                                      ErrorCode = 43
	ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE                          ErrorCode = 44
	ErrorCode_INVALID_PIN_CODE                                      ErrorCode = 45
	ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL                         ErrorCode = 46
	ErrorCode_EXCEED_FILE_MAX_SIZE                                  ErrorCode = 47
	ErrorCode_EXCEED_DAILY_QUOTA                                    ErrorCode = 48
	ErrorCode_NOT_SUPPORT_SEND_FILE                                 ErrorCode = 49
	ErrorCode_MUST_UPGRADE                                          ErrorCode = 50
	ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION                        ErrorCode = 51
	ErrorCode_EXPIRED_REVISION                                      ErrorCode = 52
	ErrorCode_NOT_YET_PHONE_NUMBER                                  ErrorCode = 54
	ErrorCode_BAD_CALL_NUMBER                                       ErrorCode = 55
	ErrorCode_UNAVAILABLE_CALL_NUMBER                               ErrorCode = 56
	ErrorCode_NOT_SUPPORT_CALL_SERVICE                              ErrorCode = 57
	ErrorCode_CONGESTION_CONTROL                                    ErrorCode = 58
	ErrorCode_NO_BALANCE                                            ErrorCode = 59
	ErrorCode_NOT_PERMITTED_CALLER_ID                               ErrorCode = 60
	ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED                           ErrorCode = 61
	ErrorCode_CALLER_ID_VERIFICATION_REQUIRED                       ErrorCode = 62
	ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED ErrorCode = 63
	ErrorCode_MESSAGE_NOT_FOUND                                     ErrorCode = 64
	ErrorCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT              ErrorCode = 65
	ErrorCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED                 ErrorCode = 66
	ErrorCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED                     ErrorCode = 67
	ErrorCode_INVALID_PASSWORD_FORMAT                               ErrorCode = 69
	ErrorCode_FEATURE_RESTRICTED                                    ErrorCode = 70
	ErrorCode_MESSAGE_NOT_DESTRUCTIBLE                              ErrorCode = 71
	ErrorCode_PAID_CALL_REDEEM_FAILED                               ErrorCode = 72
	ErrorCode_PREVENTED_JOIN_BY_TICKET                              ErrorCode = 73
	ErrorCode_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT               ErrorCode = 75
	ErrorCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY           ErrorCode = 76
	ErrorCode_SECURITY_CENTER_NOT_VERIFIED                          ErrorCode = 77
	ErrorCode_SECURITY_CENTER_BLOCKED_BY_SETTING                    ErrorCode = 78
	ErrorCode_SECURITY_CENTER_BLOCKED                               ErrorCode = 79
	ErrorCode_TALK_PROXY_EXCEPTION                                  ErrorCode = 80
	ErrorCode_E2EE_INVALID_PROTOCOL                                 ErrorCode = 81
	ErrorCode_E2EE_RETRY_ENCRYPT                                    ErrorCode = 82
	ErrorCode_E2EE_UPDATE_SENDER_KEY                                ErrorCode = 83
	ErrorCode_E2EE_UPDATE_RECEIVER_KEY                              ErrorCode = 84
	ErrorCode_E2EE_INVALID_ARGUMENT                                 ErrorCode = 85
	ErrorCode_E2EE_INVALID_VERSION                                  ErrorCode = 86
	ErrorCode_E2EE_SENDER_DISABLED                                  ErrorCode = 87
	ErrorCode_E2EE_RECEIVER_DISABLED                                ErrorCode = 88
	ErrorCode_E2EE_SENDER_NOT_ALLOWED                               ErrorCode = 89
	ErrorCode_E2EE_RECEIVER_NOT_ALLOWED                             ErrorCode = 90
	ErrorCode_E2EE_RESEND_FAIL                                      ErrorCode = 91
	ErrorCode_E2EE_RESEND_OK                                        ErrorCode = 92
	ErrorCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA                     ErrorCode = 93
	ErrorCode_E2EE_UPDATE_PRIMARY_DEVICE                            ErrorCode = 94
	ErrorCode_SUCCESS                                               ErrorCode = 95
	ErrorCode_CANCEL                                                ErrorCode = 96
	ErrorCode_E2EE_PRIMARY_NOT_SUPPORT                              ErrorCode = 97
	ErrorCode_E2EE_RETRY_PLAIN                                      ErrorCode = 98
	ErrorCode_E2EE_RECREATE_GROUP_KEY                               ErrorCode = 99
	ErrorCode_E2EE_GROUP_TOO_MANY_MEMBERS                           ErrorCode = 100
	ErrorCode_SERVER_BUSY                                           ErrorCode = 101
	ErrorCode_NOT_ALLOWED_ADD_FOLLOW                                ErrorCode = 102
	ErrorCode_INCOMING_FRIEND_REQUEST_LIMIT                         ErrorCode = 103
	ErrorCode_OUTGOING_FRIEND_REQUEST_LIMIT                         ErrorCode = 104
	ErrorCode_OUTGOING_FRIEND_REQUEST_QUOTA                         ErrorCode = 105
	ErrorCode_DUPLICATED                                            ErrorCode = 106
)

func (p ErrorCode) String() string {
	switch p {
	case ErrorCode_ILLEGAL_ARGUMENT:
		return "ILLEGAL_ARGUMENT"
	case ErrorCode_AUTHENTICATION_FAILED:
		return "AUTHENTICATION_FAILED"
	case ErrorCode_DB_FAILED:
		return "DB_FAILED"
	case ErrorCode_INVALID_STATE:
		return "INVALID_STATE"
	case ErrorCode_EXCESSIVE_ACCESS:
		return "EXCESSIVE_ACCESS"
	case ErrorCode_NOT_FOUND:
		return "NOT_FOUND"
	case ErrorCode_INVALID_MID:
		return "INVALID_MID"
	case ErrorCode_NOT_A_MEMBER:
		return "NOT_A_MEMBER"
	case ErrorCode_INVALID_LENGTH:
		return "INVALID_LENGTH"
	case ErrorCode_NOT_AVAILABLE_USER:
		return "NOT_AVAILABLE_USER"
	case ErrorCode_NOT_AUTHORIZED_DEVICE:
		return "NOT_AUTHORIZED_DEVICE"
	case ErrorCode_NOT_AUTHORIZED_SESSION:
		return "NOT_AUTHORIZED_SESSION"
	case ErrorCode_INCOMPATIBLE_APP_VERSION:
		return "INCOMPATIBLE_APP_VERSION"
	case ErrorCode_NOT_READY:
		return "NOT_READY"
	case ErrorCode_NOT_AVAILABLE_SESSION:
		return "NOT_AVAILABLE_SESSION"
	case ErrorCode_SYSTEM_ERROR:
		return "SYSTEM_ERROR"
	case ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD:
		return "NO_AVAILABLE_VERIFICATION_METHOD"
	case ErrorCode_NOT_AUTHENTICATED:
		return "NOT_AUTHENTICATED"
	case ErrorCode_INVALID_IDENTITY_CREDENTIAL:
		return "INVALID_IDENTITY_CREDENTIAL"
	case ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER:
		return "NOT_AVAILABLE_IDENTITY_IDENTIFIER"
	case ErrorCode_INTERNAL_ERROR:
		return "INTERNAL_ERROR"
	case ErrorCode_NO_SUCH_IDENTITY_IDENFIER:
		return "NO_SUCH_IDENTITY_IDENFIER"
	case ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY:
		return "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY"
	case ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL:
		return "ILLEGAL_IDENTITY_CREDENTIAL"
	case ErrorCode_UNKNOWN_CHANNEL:
		return "UNKNOWN_CHANNEL"
	case ErrorCode_NO_SUCH_MESSAGE_BOX:
		return "NO_SUCH_MESSAGE_BOX"
	case ErrorCode_NOT_AVAILABLE_MESSAGE_BOX:
		return "NOT_AVAILABLE_MESSAGE_BOX"
	case ErrorCode_CHANNEL_DOES_NOT_MATCH:
		return "CHANNEL_DOES_NOT_MATCH"
	case ErrorCode_NOT_YOUR_MESSAGE:
		return "NOT_YOUR_MESSAGE"
	case ErrorCode_MESSAGE_DEFINED_ERROR:
		return "MESSAGE_DEFINED_ERROR"
	case ErrorCode_USER_CANNOT_ACCEPT_PRESENTS:
		return "USER_CANNOT_ACCEPT_PRESENTS"
	case ErrorCode_USER_NOT_STICKER_OWNER:
		return "USER_NOT_STICKER_OWNER"
	case ErrorCode_MAINTENANCE_ERROR:
		return "MAINTENANCE_ERROR"
	case ErrorCode_ACCOUNT_NOT_MATCHED:
		return "ACCOUNT_NOT_MATCHED"
	case ErrorCode_ABUSE_BLOCK:
		return "ABUSE_BLOCK"
	case ErrorCode_NOT_FRIEND:
		return "NOT_FRIEND"
	case ErrorCode_NOT_ALLOWED_CALL:
		return "NOT_ALLOWED_CALL"
	case ErrorCode_BLOCK_FRIEND:
		return "BLOCK_FRIEND"
	case ErrorCode_INCOMPATIBLE_VOIP_VERSION:
		return "INCOMPATIBLE_VOIP_VERSION"
	case ErrorCode_INVALID_SNS_ACCESS_TOKEN:
		return "INVALID_SNS_ACCESS_TOKEN"
	case ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE:
		return "EXTERNAL_SERVICE_NOT_AVAILABLE"
	case ErrorCode_NOT_ALLOWED_ADD_CONTACT:
		return "NOT_ALLOWED_ADD_CONTACT"
	case ErrorCode_NOT_CERTIFICATED:
		return "NOT_CERTIFICATED"
	case ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE:
		return "NOT_ALLOWED_SECONDARY_DEVICE"
	case ErrorCode_INVALID_PIN_CODE:
		return "INVALID_PIN_CODE"
	case ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL:
		return "NOT_FOUND_IDENTITY_CREDENTIAL"
	case ErrorCode_EXCEED_FILE_MAX_SIZE:
		return "EXCEED_FILE_MAX_SIZE"
	case ErrorCode_EXCEED_DAILY_QUOTA:
		return "EXCEED_DAILY_QUOTA"
	case ErrorCode_NOT_SUPPORT_SEND_FILE:
		return "NOT_SUPPORT_SEND_FILE"
	case ErrorCode_MUST_UPGRADE:
		return "MUST_UPGRADE"
	case ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION:
		return "NOT_AVAILABLE_PIN_CODE_SESSION"
	case ErrorCode_EXPIRED_REVISION:
		return "EXPIRED_REVISION"
	case ErrorCode_NOT_YET_PHONE_NUMBER:
		return "NOT_YET_PHONE_NUMBER"
	case ErrorCode_BAD_CALL_NUMBER:
		return "BAD_CALL_NUMBER"
	case ErrorCode_UNAVAILABLE_CALL_NUMBER:
		return "UNAVAILABLE_CALL_NUMBER"
	case ErrorCode_NOT_SUPPORT_CALL_SERVICE:
		return "NOT_SUPPORT_CALL_SERVICE"
	case ErrorCode_CONGESTION_CONTROL:
		return "CONGESTION_CONTROL"
	case ErrorCode_NO_BALANCE:
		return "NO_BALANCE"
	case ErrorCode_NOT_PERMITTED_CALLER_ID:
		return "NOT_PERMITTED_CALLER_ID"
	case ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED:
		return "NO_CALLER_ID_LIMIT_EXCEEDED"
	case ErrorCode_CALLER_ID_VERIFICATION_REQUIRED:
		return "CALLER_ID_VERIFICATION_REQUIRED"
	case ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED:
		return "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED"
	case ErrorCode_MESSAGE_NOT_FOUND:
		return "MESSAGE_NOT_FOUND"
	case ErrorCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT:
		return "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT"
	case ErrorCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED:
		return "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED"
	case ErrorCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED:
		return "ACCOUNT_MIGRATION_PINCODE_BLOCKED"
	case ErrorCode_INVALID_PASSWORD_FORMAT:
		return "INVALID_PASSWORD_FORMAT"
	case ErrorCode_FEATURE_RESTRICTED:
		return "FEATURE_RESTRICTED"
	case ErrorCode_MESSAGE_NOT_DESTRUCTIBLE:
		return "MESSAGE_NOT_DESTRUCTIBLE"
	case ErrorCode_PAID_CALL_REDEEM_FAILED:
		return "PAID_CALL_REDEEM_FAILED"
	case ErrorCode_PREVENTED_JOIN_BY_TICKET:
		return "PREVENTED_JOIN_BY_TICKET"
	case ErrorCode_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT:
		return "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT"
	case ErrorCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY:
		return "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY"
	case ErrorCode_SECURITY_CENTER_NOT_VERIFIED:
		return "SECURITY_CENTER_NOT_VERIFIED"
	case ErrorCode_SECURITY_CENTER_BLOCKED_BY_SETTING:
		return "SECURITY_CENTER_BLOCKED_BY_SETTING"
	case ErrorCode_SECURITY_CENTER_BLOCKED:
		return "SECURITY_CENTER_BLOCKED"
	case ErrorCode_TALK_PROXY_EXCEPTION:
		return "TALK_PROXY_EXCEPTION"
	case ErrorCode_E2EE_INVALID_PROTOCOL:
		return "E2EE_INVALID_PROTOCOL"
	case ErrorCode_E2EE_RETRY_ENCRYPT:
		return "E2EE_RETRY_ENCRYPT"
	case ErrorCode_E2EE_UPDATE_SENDER_KEY:
		return "E2EE_UPDATE_SENDER_KEY"
	case ErrorCode_E2EE_UPDATE_RECEIVER_KEY:
		return "E2EE_UPDATE_RECEIVER_KEY"
	case ErrorCode_E2EE_INVALID_ARGUMENT:
		return "E2EE_INVALID_ARGUMENT"
	case ErrorCode_E2EE_INVALID_VERSION:
		return "E2EE_INVALID_VERSION"
	case ErrorCode_E2EE_SENDER_DISABLED:
		return "E2EE_SENDER_DISABLED"
	case ErrorCode_E2EE_RECEIVER_DISABLED:
		return "E2EE_RECEIVER_DISABLED"
	case ErrorCode_E2EE_SENDER_NOT_ALLOWED:
		return "E2EE_SENDER_NOT_ALLOWED"
	case ErrorCode_E2EE_RECEIVER_NOT_ALLOWED:
		return "E2EE_RECEIVER_NOT_ALLOWED"
	case ErrorCode_E2EE_RESEND_FAIL:
		return "E2EE_RESEND_FAIL"
	case ErrorCode_E2EE_RESEND_OK:
		return "E2EE_RESEND_OK"
	case ErrorCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA:
		return "HITOKOTO_BACKUP_NO_AVAILABLE_DATA"
	case ErrorCode_E2EE_UPDATE_PRIMARY_DEVICE:
		return "E2EE_UPDATE_PRIMARY_DEVICE"
	case ErrorCode_SUCCESS:
		return "SUCCESS"
	case ErrorCode_CANCEL:
		return "CANCEL"
	case ErrorCode_E2EE_PRIMARY_NOT_SUPPORT:
		return "E2EE_PRIMARY_NOT_SUPPORT"
	case ErrorCode_E2EE_RETRY_PLAIN:
		return "E2EE_RETRY_PLAIN"
	case ErrorCode_E2EE_RECREATE_GROUP_KEY:
		return "E2EE_RECREATE_GROUP_KEY"
	case ErrorCode_E2EE_GROUP_TOO_MANY_MEMBERS:
		return "E2EE_GROUP_TOO_MANY_MEMBERS"
	case ErrorCode_SERVER_BUSY:
		return "SERVER_BUSY"
	case ErrorCode_NOT_ALLOWED_ADD_FOLLOW:
		return "NOT_ALLOWED_ADD_FOLLOW"
	case ErrorCode_INCOMING_FRIEND_REQUEST_LIMIT:
		return "INCOMING_FRIEND_REQUEST_LIMIT"
	case ErrorCode_OUTGOING_FRIEND_REQUEST_LIMIT:
		return "OUTGOING_FRIEND_REQUEST_LIMIT"
	case ErrorCode_OUTGOING_FRIEND_REQUEST_QUOTA:
		return "OUTGOING_FRIEND_REQUEST_QUOTA"
	case ErrorCode_DUPLICATED:
		return "DUPLICATED"
	}
	return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
	switch s {
	case "ILLEGAL_ARGUMENT":
		return ErrorCode_ILLEGAL_ARGUMENT, nil
	case "AUTHENTICATION_FAILED":
		return ErrorCode_AUTHENTICATION_FAILED, nil
	case "DB_FAILED":
		return ErrorCode_DB_FAILED, nil
	case "INVALID_STATE":
		return ErrorCode_INVALID_STATE, nil
	case "EXCESSIVE_ACCESS":
		return ErrorCode_EXCESSIVE_ACCESS, nil
	case "NOT_FOUND":
		return ErrorCode_NOT_FOUND, nil
	case "INVALID_MID":
		return ErrorCode_INVALID_MID, nil
	case "NOT_A_MEMBER":
		return ErrorCode_NOT_A_MEMBER, nil
	case "INVALID_LENGTH":
		return ErrorCode_INVALID_LENGTH, nil
	case "NOT_AVAILABLE_USER":
		return ErrorCode_NOT_AVAILABLE_USER, nil
	case "NOT_AUTHORIZED_DEVICE":
		return ErrorCode_NOT_AUTHORIZED_DEVICE, nil
	case "NOT_AUTHORIZED_SESSION":
		return ErrorCode_NOT_AUTHORIZED_SESSION, nil
	case "INCOMPATIBLE_APP_VERSION":
		return ErrorCode_INCOMPATIBLE_APP_VERSION, nil
	case "NOT_READY":
		return ErrorCode_NOT_READY, nil
	case "NOT_AVAILABLE_SESSION":
		return ErrorCode_NOT_AVAILABLE_SESSION, nil
	case "SYSTEM_ERROR":
		return ErrorCode_SYSTEM_ERROR, nil
	case "NO_AVAILABLE_VERIFICATION_METHOD":
		return ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD, nil
	case "NOT_AUTHENTICATED":
		return ErrorCode_NOT_AUTHENTICATED, nil
	case "INVALID_IDENTITY_CREDENTIAL":
		return ErrorCode_INVALID_IDENTITY_CREDENTIAL, nil
	case "NOT_AVAILABLE_IDENTITY_IDENTIFIER":
		return ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER, nil
	case "INTERNAL_ERROR":
		return ErrorCode_INTERNAL_ERROR, nil
	case "NO_SUCH_IDENTITY_IDENFIER":
		return ErrorCode_NO_SUCH_IDENTITY_IDENFIER, nil
	case "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY":
		return ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY, nil
	case "ILLEGAL_IDENTITY_CREDENTIAL":
		return ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL, nil
	case "UNKNOWN_CHANNEL":
		return ErrorCode_UNKNOWN_CHANNEL, nil
	case "NO_SUCH_MESSAGE_BOX":
		return ErrorCode_NO_SUCH_MESSAGE_BOX, nil
	case "NOT_AVAILABLE_MESSAGE_BOX":
		return ErrorCode_NOT_AVAILABLE_MESSAGE_BOX, nil
	case "CHANNEL_DOES_NOT_MATCH":
		return ErrorCode_CHANNEL_DOES_NOT_MATCH, nil
	case "NOT_YOUR_MESSAGE":
		return ErrorCode_NOT_YOUR_MESSAGE, nil
	case "MESSAGE_DEFINED_ERROR":
		return ErrorCode_MESSAGE_DEFINED_ERROR, nil
	case "USER_CANNOT_ACCEPT_PRESENTS":
		return ErrorCode_USER_CANNOT_ACCEPT_PRESENTS, nil
	case "USER_NOT_STICKER_OWNER":
		return ErrorCode_USER_NOT_STICKER_OWNER, nil
	case "MAINTENANCE_ERROR":
		return ErrorCode_MAINTENANCE_ERROR, nil
	case "ACCOUNT_NOT_MATCHED":
		return ErrorCode_ACCOUNT_NOT_MATCHED, nil
	case "ABUSE_BLOCK":
		return ErrorCode_ABUSE_BLOCK, nil
	case "NOT_FRIEND":
		return ErrorCode_NOT_FRIEND, nil
	case "NOT_ALLOWED_CALL":
		return ErrorCode_NOT_ALLOWED_CALL, nil
	case "BLOCK_FRIEND":
		return ErrorCode_BLOCK_FRIEND, nil
	case "INCOMPATIBLE_VOIP_VERSION":
		return ErrorCode_INCOMPATIBLE_VOIP_VERSION, nil
	case "INVALID_SNS_ACCESS_TOKEN":
		return ErrorCode_INVALID_SNS_ACCESS_TOKEN, nil
	case "EXTERNAL_SERVICE_NOT_AVAILABLE":
		return ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE, nil
	case "NOT_ALLOWED_ADD_CONTACT":
		return ErrorCode_NOT_ALLOWED_ADD_CONTACT, nil
	case "NOT_CERTIFICATED":
		return ErrorCode_NOT_CERTIFICATED, nil
	case "NOT_ALLOWED_SECONDARY_DEVICE":
		return ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE, nil
	case "INVALID_PIN_CODE":
		return ErrorCode_INVALID_PIN_CODE, nil
	case "NOT_FOUND_IDENTITY_CREDENTIAL":
		return ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL, nil
	case "EXCEED_FILE_MAX_SIZE":
		return ErrorCode_EXCEED_FILE_MAX_SIZE, nil
	case "EXCEED_DAILY_QUOTA":
		return ErrorCode_EXCEED_DAILY_QUOTA, nil
	case "NOT_SUPPORT_SEND_FILE":
		return ErrorCode_NOT_SUPPORT_SEND_FILE, nil
	case "MUST_UPGRADE":
		return ErrorCode_MUST_UPGRADE, nil
	case "NOT_AVAILABLE_PIN_CODE_SESSION":
		return ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION, nil
	case "EXPIRED_REVISION":
		return ErrorCode_EXPIRED_REVISION, nil
	case "NOT_YET_PHONE_NUMBER":
		return ErrorCode_NOT_YET_PHONE_NUMBER, nil
	case "BAD_CALL_NUMBER":
		return ErrorCode_BAD_CALL_NUMBER, nil
	case "UNAVAILABLE_CALL_NUMBER":
		return ErrorCode_UNAVAILABLE_CALL_NUMBER, nil
	case "NOT_SUPPORT_CALL_SERVICE":
		return ErrorCode_NOT_SUPPORT_CALL_SERVICE, nil
	case "CONGESTION_CONTROL":
		return ErrorCode_CONGESTION_CONTROL, nil
	case "NO_BALANCE":
		return ErrorCode_NO_BALANCE, nil
	case "NOT_PERMITTED_CALLER_ID":
		return ErrorCode_NOT_PERMITTED_CALLER_ID, nil
	case "NO_CALLER_ID_LIMIT_EXCEEDED":
		return ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED, nil
	case "CALLER_ID_VERIFICATION_REQUIRED":
		return ErrorCode_CALLER_ID_VERIFICATION_REQUIRED, nil
	case "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED":
		return ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED, nil
	case "MESSAGE_NOT_FOUND":
		return ErrorCode_MESSAGE_NOT_FOUND, nil
	case "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT":
		return ErrorCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT, nil
	case "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED":
		return ErrorCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED, nil
	case "ACCOUNT_MIGRATION_PINCODE_BLOCKED":
		return ErrorCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED, nil
	case "INVALID_PASSWORD_FORMAT":
		return ErrorCode_INVALID_PASSWORD_FORMAT, nil
	case "FEATURE_RESTRICTED":
		return ErrorCode_FEATURE_RESTRICTED, nil
	case "MESSAGE_NOT_DESTRUCTIBLE":
		return ErrorCode_MESSAGE_NOT_DESTRUCTIBLE, nil
	case "PAID_CALL_REDEEM_FAILED":
		return ErrorCode_PAID_CALL_REDEEM_FAILED, nil
	case "PREVENTED_JOIN_BY_TICKET":
		return ErrorCode_PREVENTED_JOIN_BY_TICKET, nil
	case "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT":
		return ErrorCode_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT, nil
	case "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY":
		return ErrorCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY, nil
	case "SECURITY_CENTER_NOT_VERIFIED":
		return ErrorCode_SECURITY_CENTER_NOT_VERIFIED, nil
	case "SECURITY_CENTER_BLOCKED_BY_SETTING":
		return ErrorCode_SECURITY_CENTER_BLOCKED_BY_SETTING, nil
	case "SECURITY_CENTER_BLOCKED":
		return ErrorCode_SECURITY_CENTER_BLOCKED, nil
	case "TALK_PROXY_EXCEPTION":
		return ErrorCode_TALK_PROXY_EXCEPTION, nil
	case "E2EE_INVALID_PROTOCOL":
		return ErrorCode_E2EE_INVALID_PROTOCOL, nil
	case "E2EE_RETRY_ENCRYPT":
		return ErrorCode_E2EE_RETRY_ENCRYPT, nil
	case "E2EE_UPDATE_SENDER_KEY":
		return ErrorCode_E2EE_UPDATE_SENDER_KEY, nil
	case "E2EE_UPDATE_RECEIVER_KEY":
		return ErrorCode_E2EE_UPDATE_RECEIVER_KEY, nil
	case "E2EE_INVALID_ARGUMENT":
		return ErrorCode_E2EE_INVALID_ARGUMENT, nil
	case "E2EE_INVALID_VERSION":
		return ErrorCode_E2EE_INVALID_VERSION, nil
	case "E2EE_SENDER_DISABLED":
		return ErrorCode_E2EE_SENDER_DISABLED, nil
	case "E2EE_RECEIVER_DISABLED":
		return ErrorCode_E2EE_RECEIVER_DISABLED, nil
	case "E2EE_SENDER_NOT_ALLOWED":
		return ErrorCode_E2EE_SENDER_NOT_ALLOWED, nil
	case "E2EE_RECEIVER_NOT_ALLOWED":
		return ErrorCode_E2EE_RECEIVER_NOT_ALLOWED, nil
	case "E2EE_RESEND_FAIL":
		return ErrorCode_E2EE_RESEND_FAIL, nil
	case "E2EE_RESEND_OK":
		return ErrorCode_E2EE_RESEND_OK, nil
	case "HITOKOTO_BACKUP_NO_AVAILABLE_DATA":
		return ErrorCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA, nil
	case "E2EE_UPDATE_PRIMARY_DEVICE":
		return ErrorCode_E2EE_UPDATE_PRIMARY_DEVICE, nil
	case "SUCCESS":
		return ErrorCode_SUCCESS, nil
	case "CANCEL":
		return ErrorCode_CANCEL, nil
	case "E2EE_PRIMARY_NOT_SUPPORT":
		return ErrorCode_E2EE_PRIMARY_NOT_SUPPORT, nil
	case "E2EE_RETRY_PLAIN":
		return ErrorCode_E2EE_RETRY_PLAIN, nil
	case "E2EE_RECREATE_GROUP_KEY":
		return ErrorCode_E2EE_RECREATE_GROUP_KEY, nil
	case "E2EE_GROUP_TOO_MANY_MEMBERS":
		return ErrorCode_E2EE_GROUP_TOO_MANY_MEMBERS, nil
	case "SERVER_BUSY":
		return ErrorCode_SERVER_BUSY, nil
	case "NOT_ALLOWED_ADD_FOLLOW":
		return ErrorCode_NOT_ALLOWED_ADD_FOLLOW, nil
	case "INCOMING_FRIEND_REQUEST_LIMIT":
		return ErrorCode_INCOMING_FRIEND_REQUEST_LIMIT, nil
	case "OUTGOING_FRIEND_REQUEST_LIMIT":
		return ErrorCode_OUTGOING_FRIEND_REQUEST_LIMIT, nil
	case "OUTGOING_FRIEND_REQUEST_QUOTA":
		return ErrorCode_OUTGOING_FRIEND_REQUEST_QUOTA, nil
	case "DUPLICATED":
		return ErrorCode_DUPLICATED, nil
	}
	return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}

func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

func (p ErrorCode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ErrorCode) UnmarshalText(text []byte) error {
	q, err := ErrorCodeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type DirectionType int64

const (
	DirectionType_INCOMING DirectionType = 1
	DirectionType_OUTGOING DirectionType = 2
)

func (p DirectionType) String() string {
	switch p {
	case DirectionType_INCOMING:
		return "INCOMING"
	case DirectionType_OUTGOING:
		return "OUTGOING"
	}
	return "<UNSET>"
}

func DirectionTypeFromString(s string) (DirectionType, error) {
	switch s {
	case "INCOMING":
		return DirectionType_INCOMING, nil
	case "OUTGOING":
		return DirectionType_OUTGOING, nil
	}
	return DirectionType(0), fmt.Errorf("not a valid DirectionType string")
}

func DirectionTypePtr(v DirectionType) *DirectionType { return &v }

func (p DirectionType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *DirectionType) UnmarshalText(text []byte) error {
	q, err := DirectionTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type GroupAttribute int64

const (
	GroupAttribute_NAME                     GroupAttribute = 1
	GroupAttribute_PICTURE_STATUS           GroupAttribute = 2
	GroupAttribute_PREVENTED_JOIN_BY_TICKET GroupAttribute = 4
	GroupAttribute_NOTIFICATION_SETTING     GroupAttribute = 8
	GroupAttribute_ALL                      GroupAttribute = 255
)

func (p GroupAttribute) String() string {
	switch p {
	case GroupAttribute_NAME:
		return "NAME"
	case GroupAttribute_PICTURE_STATUS:
		return "PICTURE_STATUS"
	case GroupAttribute_PREVENTED_JOIN_BY_TICKET:
		return "PREVENTED_JOIN_BY_TICKET"
	case GroupAttribute_NOTIFICATION_SETTING:
		return "NOTIFICATION_SETTING"
	case GroupAttribute_ALL:
		return "ALL"
	}
	return "<UNSET>"
}

func GroupAttributeFromString(s string) (GroupAttribute, error) {
	switch s {
	case "NAME":
		return GroupAttribute_NAME, nil
	case "PICTURE_STATUS":
		return GroupAttribute_PICTURE_STATUS, nil
	case "PREVENTED_JOIN_BY_TICKET":
		return GroupAttribute_PREVENTED_JOIN_BY_TICKET, nil
	case "NOTIFICATION_SETTING":
		return GroupAttribute_NOTIFICATION_SETTING, nil
	case "ALL":
		return GroupAttribute_ALL, nil
	}
	return GroupAttribute(0), fmt.Errorf("not a valid GroupAttribute string")
}

func GroupAttributePtr(v GroupAttribute) *GroupAttribute { return &v }

func (p GroupAttribute) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *GroupAttribute) UnmarshalText(text []byte) error {
	q, err := GroupAttributeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type IdentityProvider int64

const (
	IdentityProvider_UNKNOWN    IdentityProvider = 0
	IdentityProvider_LINE       IdentityProvider = 1
	IdentityProvider_NAVER_KR   IdentityProvider = 2
	IdentityProvider_LINE_PHONE IdentityProvider = 3
)

func (p IdentityProvider) String() string {
	switch p {
	case IdentityProvider_UNKNOWN:
		return "UNKNOWN"
	case IdentityProvider_LINE:
		return "LINE"
	case IdentityProvider_NAVER_KR:
		return "NAVER_KR"
	case IdentityProvider_LINE_PHONE:
		return "LINE_PHONE"
	}
	return "<UNSET>"
}

func IdentityProviderFromString(s string) (IdentityProvider, error) {
	switch s {
	case "UNKNOWN":
		return IdentityProvider_UNKNOWN, nil
	case "LINE":
		return IdentityProvider_LINE, nil
	case "NAVER_KR":
		return IdentityProvider_NAVER_KR, nil
	case "LINE_PHONE":
		return IdentityProvider_LINE_PHONE, nil
	}
	return IdentityProvider(0), fmt.Errorf("not a valid IdentityProvider string")
}

func IdentityProviderPtr(v IdentityProvider) *IdentityProvider { return &v }

func (p IdentityProvider) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *IdentityProvider) UnmarshalText(text []byte) error {
	q, err := IdentityProviderFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type LoginResultType int64

const (
	LoginResultType_SUCCESS                LoginResultType = 1
	LoginResultType_REQUIRE_QRCODE         LoginResultType = 2
	LoginResultType_REQUIRE_DEVICE_CONFIRM LoginResultType = 3
)

func (p LoginResultType) String() string {
	switch p {
	case LoginResultType_SUCCESS:
		return "SUCCESS"
	case LoginResultType_REQUIRE_QRCODE:
		return "REQUIRE_QRCODE"
	case LoginResultType_REQUIRE_DEVICE_CONFIRM:
		return "REQUIRE_DEVICE_CONFIRM"
	}
	return "<UNSET>"
}

func LoginResultTypeFromString(s string) (LoginResultType, error) {
	switch s {
	case "SUCCESS":
		return LoginResultType_SUCCESS, nil
	case "REQUIRE_QRCODE":
		return LoginResultType_REQUIRE_QRCODE, nil
	case "REQUIRE_DEVICE_CONFIRM":
		return LoginResultType_REQUIRE_DEVICE_CONFIRM, nil
	}
	return LoginResultType(0), fmt.Errorf("not a valid LoginResultType string")
}

func LoginResultTypePtr(v LoginResultType) *LoginResultType { return &v }

func (p LoginResultType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *LoginResultType) UnmarshalText(text []byte) error {
	q, err := LoginResultTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type MessageOperationType int64

const (
	MessageOperationType_SEND_MESSAGE          MessageOperationType = 1
	MessageOperationType_RECEIVE_MESSAGE       MessageOperationType = 2
	MessageOperationType_READ_MESSAGE          MessageOperationType = 3
	MessageOperationType_NOTIFIED_READ_MESSAGE MessageOperationType = 4
	MessageOperationType_NOTIFIED_JOIN_CHAT    MessageOperationType = 5
	MessageOperationType_FAILED_SEND_MESSAGE   MessageOperationType = 6
	MessageOperationType_SEND_CONTENT          MessageOperationType = 7
	MessageOperationType_SEND_CONTENT_RECEIPT  MessageOperationType = 8
	MessageOperationType_SEND_CHAT_REMOVED     MessageOperationType = 9
	MessageOperationType_REMOVE_ALL_MESSAGES   MessageOperationType = 10
)

func (p MessageOperationType) String() string {
	switch p {
	case MessageOperationType_SEND_MESSAGE:
		return "SEND_MESSAGE"
	case MessageOperationType_RECEIVE_MESSAGE:
		return "RECEIVE_MESSAGE"
	case MessageOperationType_READ_MESSAGE:
		return "READ_MESSAGE"
	case MessageOperationType_NOTIFIED_READ_MESSAGE:
		return "NOTIFIED_READ_MESSAGE"
	case MessageOperationType_NOTIFIED_JOIN_CHAT:
		return "NOTIFIED_JOIN_CHAT"
	case MessageOperationType_FAILED_SEND_MESSAGE:
		return "FAILED_SEND_MESSAGE"
	case MessageOperationType_SEND_CONTENT:
		return "SEND_CONTENT"
	case MessageOperationType_SEND_CONTENT_RECEIPT:
		return "SEND_CONTENT_RECEIPT"
	case MessageOperationType_SEND_CHAT_REMOVED:
		return "SEND_CHAT_REMOVED"
	case MessageOperationType_REMOVE_ALL_MESSAGES:
		return "REMOVE_ALL_MESSAGES"
	}
	return "<UNSET>"
}

func MessageOperationTypeFromString(s string) (MessageOperationType, error) {
	switch s {
	case "SEND_MESSAGE":
		return MessageOperationType_SEND_MESSAGE, nil
	case "RECEIVE_MESSAGE":
		return MessageOperationType_RECEIVE_MESSAGE, nil
	case "READ_MESSAGE":
		return MessageOperationType_READ_MESSAGE, nil
	case "NOTIFIED_READ_MESSAGE":
		return MessageOperationType_NOTIFIED_READ_MESSAGE, nil
	case "NOTIFIED_JOIN_CHAT":
		return MessageOperationType_NOTIFIED_JOIN_CHAT, nil
	case "FAILED_SEND_MESSAGE":
		return MessageOperationType_FAILED_SEND_MESSAGE, nil
	case "SEND_CONTENT":
		return MessageOperationType_SEND_CONTENT, nil
	case "SEND_CONTENT_RECEIPT":
		return MessageOperationType_SEND_CONTENT_RECEIPT, nil
	case "SEND_CHAT_REMOVED":
		return MessageOperationType_SEND_CHAT_REMOVED, nil
	case "REMOVE_ALL_MESSAGES":
		return MessageOperationType_REMOVE_ALL_MESSAGES, nil
	}
	return MessageOperationType(0), fmt.Errorf("not a valid MessageOperationType string")
}

func MessageOperationTypePtr(v MessageOperationType) *MessageOperationType { return &v }

func (p MessageOperationType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *MessageOperationType) UnmarshalText(text []byte) error {
	q, err := MessageOperationTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type RelationType int64

const (
	RelationType_FORWARD     RelationType = 0
	RelationType_AUTO_REPLY  RelationType = 1
	RelationType_SUBORDINATE RelationType = 2
)

func (p RelationType) String() string {
	switch p {
	case RelationType_FORWARD:
		return "FORWARD"
	case RelationType_AUTO_REPLY:
		return "AUTO_REPLY"
	case RelationType_SUBORDINATE:
		return "SUBORDINATE"
	}
	return "<UNSET>"
}

func RelationTypeFromString(s string) (RelationType, error) {
	switch s {
	case "FORWARD":
		return RelationType_FORWARD, nil
	case "AUTO_REPLY":
		return RelationType_AUTO_REPLY, nil
	case "SUBORDINATE":
		return RelationType_SUBORDINATE, nil
	}
	return RelationType(0), fmt.Errorf("not a valid RelationType string")
}

func RelationTypePtr(v RelationType) *RelationType { return &v }

func (p RelationType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *RelationType) UnmarshalText(text []byte) error {
	q, err := RelationTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type MIDType int64

const (
	MIDType_USER  MIDType = 0
	MIDType_ROOM  MIDType = 1
	MIDType_GROUP MIDType = 2
)

func (p MIDType) String() string {
	switch p {
	case MIDType_USER:
		return "USER"
	case MIDType_ROOM:
		return "ROOM"
	case MIDType_GROUP:
		return "GROUP"
	}
	return "<UNSET>"
}

func MIDTypeFromString(s string) (MIDType, error) {
	switch s {
	case "USER":
		return MIDType_USER, nil
	case "ROOM":
		return MIDType_ROOM, nil
	case "GROUP":
		return MIDType_GROUP, nil
	}
	return MIDType(0), fmt.Errorf("not a valid MIDType string")
}

func MIDTypePtr(v MIDType) *MIDType { return &v }

func (p MIDType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *MIDType) UnmarshalText(text []byte) error {
	q, err := MIDTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type MediaType int64

const (
	MediaType_AUDIO MediaType = 1
	MediaType_VIDEO MediaType = 2
)

func (p MediaType) String() string {
	switch p {
	case MediaType_AUDIO:
		return "AUDIO"
	case MediaType_VIDEO:
		return "VIDEO"
	}
	return "<UNSET>"
}

func MediaTypeFromString(s string) (MediaType, error) {
	switch s {
	case "AUDIO":
		return MediaType_AUDIO, nil
	case "VIDEO":
		return MediaType_VIDEO, nil
	}
	return MediaType(0), fmt.Errorf("not a valid MediaType string")
}

func MediaTypePtr(v MediaType) *MediaType { return &v }

func (p MediaType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *MediaType) UnmarshalText(text []byte) error {
	q, err := MediaTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ToType int64

const (
	ToType_USER  ToType = 0
	ToType_ROOM  ToType = 1
	ToType_GROUP ToType = 2
)

func (p ToType) String() string {
	switch p {
	case ToType_USER:
		return "USER"
	case ToType_ROOM:
		return "ROOM"
	case ToType_GROUP:
		return "GROUP"
	}
	return "<UNSET>"
}

func ToTypeFromString(s string) (ToType, error) {
	switch s {
	case "USER":
		return ToType_USER, nil
	case "ROOM":
		return ToType_ROOM, nil
	case "GROUP":
		return ToType_GROUP, nil
	}
	return ToType(0), fmt.Errorf("not a valid ToType string")
}

func ToTypePtr(v ToType) *ToType { return &v }

func (p ToType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ToType) UnmarshalText(text []byte) error {
	q, err := ToTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ModificationType int64

const (
	ModificationType_ADD    ModificationType = 0
	ModificationType_REMOVE ModificationType = 1
	ModificationType_MODIFY ModificationType = 2
)

func (p ModificationType) String() string {
	switch p {
	case ModificationType_ADD:
		return "ADD"
	case ModificationType_REMOVE:
		return "REMOVE"
	case ModificationType_MODIFY:
		return "MODIFY"
	}
	return "<UNSET>"
}

func ModificationTypeFromString(s string) (ModificationType, error) {
	switch s {
	case "ADD":
		return ModificationType_ADD, nil
	case "REMOVE":
		return ModificationType_REMOVE, nil
	case "MODIFY":
		return ModificationType_MODIFY, nil
	}
	return ModificationType(0), fmt.Errorf("not a valid ModificationType string")
}

func ModificationTypePtr(v ModificationType) *ModificationType { return &v }

func (p ModificationType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ModificationType) UnmarshalText(text []byte) error {
	q, err := ModificationTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type NotificationItemFetchMode int64

const (
	NotificationItemFetchMode_ALL    NotificationItemFetchMode = 0
	NotificationItemFetchMode_APPEND NotificationItemFetchMode = 1
)

func (p NotificationItemFetchMode) String() string {
	switch p {
	case NotificationItemFetchMode_ALL:
		return "ALL"
	case NotificationItemFetchMode_APPEND:
		return "APPEND"
	}
	return "<UNSET>"
}

func NotificationItemFetchModeFromString(s string) (NotificationItemFetchMode, error) {
	switch s {
	case "ALL":
		return NotificationItemFetchMode_ALL, nil
	case "APPEND":
		return NotificationItemFetchMode_APPEND, nil
	}
	return NotificationItemFetchMode(0), fmt.Errorf("not a valid NotificationItemFetchMode string")
}

func NotificationItemFetchModePtr(v NotificationItemFetchMode) *NotificationItemFetchMode { return &v }

func (p NotificationItemFetchMode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *NotificationItemFetchMode) UnmarshalText(text []byte) error {
	q, err := NotificationItemFetchModeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type NotificationQueueType int64

const (
	NotificationQueueType_GLOBAL  NotificationQueueType = 1
	NotificationQueueType_MESSAGE NotificationQueueType = 2
	NotificationQueueType_PRIMARY NotificationQueueType = 3
)

func (p NotificationQueueType) String() string {
	switch p {
	case NotificationQueueType_GLOBAL:
		return "GLOBAL"
	case NotificationQueueType_MESSAGE:
		return "MESSAGE"
	case NotificationQueueType_PRIMARY:
		return "PRIMARY"
	}
	return "<UNSET>"
}

func NotificationQueueTypeFromString(s string) (NotificationQueueType, error) {
	switch s {
	case "GLOBAL":
		return NotificationQueueType_GLOBAL, nil
	case "MESSAGE":
		return NotificationQueueType_MESSAGE, nil
	case "PRIMARY":
		return NotificationQueueType_PRIMARY, nil
	}
	return NotificationQueueType(0), fmt.Errorf("not a valid NotificationQueueType string")
}

func NotificationQueueTypePtr(v NotificationQueueType) *NotificationQueueType { return &v }

func (p NotificationQueueType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *NotificationQueueType) UnmarshalText(text []byte) error {
	q, err := NotificationQueueTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type NotificationStatus int64

const (
	NotificationStatus_NOTIFICATION_ITEM_EXIST        NotificationStatus = 1
	NotificationStatus_TIMELINE_ITEM_EXIST            NotificationStatus = 2
	NotificationStatus_NOTE_GROUP_NEW_ITEM_EXIST      NotificationStatus = 4
	NotificationStatus_TIMELINE_BUDDYGROUP_CHANGED    NotificationStatus = 8
	NotificationStatus_NOTE_ONE_TO_ONE_NEW_ITEM_EXIST NotificationStatus = 16
	NotificationStatus_ALBUM_ITEM_EXIST               NotificationStatus = 32
	NotificationStatus_TIMELINE_ITEM_DELETED          NotificationStatus = 64
)

func (p NotificationStatus) String() string {
	switch p {
	case NotificationStatus_NOTIFICATION_ITEM_EXIST:
		return "NOTIFICATION_ITEM_EXIST"
	case NotificationStatus_TIMELINE_ITEM_EXIST:
		return "TIMELINE_ITEM_EXIST"
	case NotificationStatus_NOTE_GROUP_NEW_ITEM_EXIST:
		return "NOTE_GROUP_NEW_ITEM_EXIST"
	case NotificationStatus_TIMELINE_BUDDYGROUP_CHANGED:
		return "TIMELINE_BUDDYGROUP_CHANGED"
	case NotificationStatus_NOTE_ONE_TO_ONE_NEW_ITEM_EXIST:
		return "NOTE_ONE_TO_ONE_NEW_ITEM_EXIST"
	case NotificationStatus_ALBUM_ITEM_EXIST:
		return "ALBUM_ITEM_EXIST"
	case NotificationStatus_TIMELINE_ITEM_DELETED:
		return "TIMELINE_ITEM_DELETED"
	}
	return "<UNSET>"
}

func NotificationStatusFromString(s string) (NotificationStatus, error) {
	switch s {
	case "NOTIFICATION_ITEM_EXIST":
		return NotificationStatus_NOTIFICATION_ITEM_EXIST, nil
	case "TIMELINE_ITEM_EXIST":
		return NotificationStatus_TIMELINE_ITEM_EXIST, nil
	case "NOTE_GROUP_NEW_ITEM_EXIST":
		return NotificationStatus_NOTE_GROUP_NEW_ITEM_EXIST, nil
	case "TIMELINE_BUDDYGROUP_CHANGED":
		return NotificationStatus_TIMELINE_BUDDYGROUP_CHANGED, nil
	case "NOTE_ONE_TO_ONE_NEW_ITEM_EXIST":
		return NotificationStatus_NOTE_ONE_TO_ONE_NEW_ITEM_EXIST, nil
	case "ALBUM_ITEM_EXIST":
		return NotificationStatus_ALBUM_ITEM_EXIST, nil
	case "TIMELINE_ITEM_DELETED":
		return NotificationStatus_TIMELINE_ITEM_DELETED, nil
	}
	return NotificationStatus(0), fmt.Errorf("not a valid NotificationStatus string")
}

func NotificationStatusPtr(v NotificationStatus) *NotificationStatus { return &v }

func (p NotificationStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *NotificationStatus) UnmarshalText(text []byte) error {
	q, err := NotificationStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type MethodType int64

const (
	MethodType_TIMELINE MethodType = 1
	MethodType_NEARBY   MethodType = 2
	MethodType_SQUARE   MethodType = 3
)

func (p MethodType) String() string {
	switch p {
	case MethodType_TIMELINE:
		return "TIMELINE"
	case MethodType_NEARBY:
		return "NEARBY"
	case MethodType_SQUARE:
		return "SQUARE"
	}
	return "<UNSET>"
}

func MethodTypeFromString(s string) (MethodType, error) {
	switch s {
	case "TIMELINE":
		return MethodType_TIMELINE, nil
	case "NEARBY":
		return MethodType_NEARBY, nil
	case "SQUARE":
		return MethodType_SQUARE, nil
	}
	return MethodType(0), fmt.Errorf("not a valid MethodType string")
}

func MethodTypePtr(v MethodType) *MethodType { return &v }

func (p MethodType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *MethodType) UnmarshalText(text []byte) error {
	q, err := MethodTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type NotificationType int64

const (
	NotificationType_APPLE_APNS      NotificationType = 1
	NotificationType_GOOGLE_C2DM     NotificationType = 2
	NotificationType_NHN_NNI         NotificationType = 3
	NotificationType_SKT_AOM         NotificationType = 4
	NotificationType_MS_MPNS         NotificationType = 5
	NotificationType_RIM_BIS         NotificationType = 6
	NotificationType_GOOGLE_GCM      NotificationType = 7
	NotificationType_NOKIA_NNAPI     NotificationType = 8
	NotificationType_TIZEN           NotificationType = 9
	NotificationType_LINE_BOT        NotificationType = 17
	NotificationType_LINE_WAP        NotificationType = 18
	NotificationType_APPLE_APNS_VOIP NotificationType = 19
	NotificationType_MS_WNS          NotificationType = 20
)

func (p NotificationType) String() string {
	switch p {
	case NotificationType_APPLE_APNS:
		return "APPLE_APNS"
	case NotificationType_GOOGLE_C2DM:
		return "GOOGLE_C2DM"
	case NotificationType_NHN_NNI:
		return "NHN_NNI"
	case NotificationType_SKT_AOM:
		return "SKT_AOM"
	case NotificationType_MS_MPNS:
		return "MS_MPNS"
	case NotificationType_RIM_BIS:
		return "RIM_BIS"
	case NotificationType_GOOGLE_GCM:
		return "GOOGLE_GCM"
	case NotificationType_NOKIA_NNAPI:
		return "NOKIA_NNAPI"
	case NotificationType_TIZEN:
		return "TIZEN"
	case NotificationType_LINE_BOT:
		return "LINE_BOT"
	case NotificationType_LINE_WAP:
		return "LINE_WAP"
	case NotificationType_APPLE_APNS_VOIP:
		return "APPLE_APNS_VOIP"
	case NotificationType_MS_WNS:
		return "MS_WNS"
	}
	return "<UNSET>"
}

func NotificationTypeFromString(s string) (NotificationType, error) {
	switch s {
	case "APPLE_APNS":
		return NotificationType_APPLE_APNS, nil
	case "GOOGLE_C2DM":
		return NotificationType_GOOGLE_C2DM, nil
	case "NHN_NNI":
		return NotificationType_NHN_NNI, nil
	case "SKT_AOM":
		return NotificationType_SKT_AOM, nil
	case "MS_MPNS":
		return NotificationType_MS_MPNS, nil
	case "RIM_BIS":
		return NotificationType_RIM_BIS, nil
	case "GOOGLE_GCM":
		return NotificationType_GOOGLE_GCM, nil
	case "NOKIA_NNAPI":
		return NotificationType_NOKIA_NNAPI, nil
	case "TIZEN":
		return NotificationType_TIZEN, nil
	case "LINE_BOT":
		return NotificationType_LINE_BOT, nil
	case "LINE_WAP":
		return NotificationType_LINE_WAP, nil
	case "APPLE_APNS_VOIP":
		return NotificationType_APPLE_APNS_VOIP, nil
	case "MS_WNS":
		return NotificationType_MS_WNS, nil
	}
	return NotificationType(0), fmt.Errorf("not a valid NotificationType string")
}

func NotificationTypePtr(v NotificationType) *NotificationType { return &v }

func (p NotificationType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *NotificationType) UnmarshalText(text []byte) error {
	q, err := NotificationTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type OpStatus int64

const (
	OpStatus_NORMAL         OpStatus = 0
	OpStatus_ALERT_DISABLED OpStatus = 1
)

func (p OpStatus) String() string {
	switch p {
	case OpStatus_NORMAL:
		return "NORMAL"
	case OpStatus_ALERT_DISABLED:
		return "ALERT_DISABLED"
	}
	return "<UNSET>"
}

func OpStatusFromString(s string) (OpStatus, error) {
	switch s {
	case "NORMAL":
		return OpStatus_NORMAL, nil
	case "ALERT_DISABLED":
		return OpStatus_ALERT_DISABLED, nil
	}
	return OpStatus(0), fmt.Errorf("not a valid OpStatus string")
}

func OpStatusPtr(v OpStatus) *OpStatus { return &v }

func (p OpStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *OpStatus) UnmarshalText(text []byte) error {
	q, err := OpStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type OpType int64

const (
	OpType_END_OF_OPERATION                  OpType = 0
	OpType_UPDATE_PROFILE                    OpType = 1
	OpType_NOTIFIED_UPDATE_PROFILE           OpType = 2
	OpType_REGISTER_USERID                   OpType = 3
	OpType_ADD_CONTACT                       OpType = 4
	OpType_NOTIFIED_ADD_CONTACT              OpType = 5
	OpType_BLOCK_CONTACT                     OpType = 6
	OpType_UNBLOCK_CONTACT                   OpType = 7
	OpType_NOTIFIED_RECOMMEND_CONTACT        OpType = 8
	OpType_CREATE_GROUP                      OpType = 9
	OpType_UPDATE_GROUP                      OpType = 10
	OpType_NOTIFIED_UPDATE_GROUP             OpType = 11
	OpType_INVITE_INTO_GROUP                 OpType = 12
	OpType_NOTIFIED_INVITE_INTO_GROUP        OpType = 13
	OpType_LEAVE_GROUP                       OpType = 14
	OpType_NOTIFIED_LEAVE_GROUP              OpType = 15
	OpType_ACCEPT_GROUP_INVITATION           OpType = 16
	OpType_NOTIFIED_ACCEPT_GROUP_INVITATION  OpType = 17
	OpType_KICKOUT_FROM_GROUP                OpType = 18
	OpType_NOTIFIED_KICKOUT_FROM_GROUP       OpType = 19
	OpType_CREATE_ROOM                       OpType = 20
	OpType_INVITE_INTO_ROOM                  OpType = 21
	OpType_NOTIFIED_INVITE_INTO_ROOM         OpType = 22
	OpType_LEAVE_ROOM                        OpType = 23
	OpType_NOTIFIED_LEAVE_ROOM               OpType = 24
	OpType_SEND_MESSAGE                      OpType = 25
	OpType_RECEIVE_MESSAGE                   OpType = 26
	OpType_SEND_MESSAGE_RECEIPT              OpType = 27
	OpType_RECEIVE_MESSAGE_RECEIPT           OpType = 28
	OpType_SEND_CONTENT_RECEIPT              OpType = 29
	OpType_RECEIVE_ANNOUNCEMENT              OpType = 30
	OpType_CANCEL_INVITATION_GROUP           OpType = 31
	OpType_NOTIFIED_CANCEL_INVITATION_GROUP  OpType = 32
	OpType_NOTIFIED_UNREGISTER_USER          OpType = 33
	OpType_REJECT_GROUP_INVITATION           OpType = 34
	OpType_NOTIFIED_REJECT_GROUP_INVITATION  OpType = 35
	OpType_UPDATE_SETTINGS                   OpType = 36
	OpType_NOTIFIED_REGISTER_USER            OpType = 37
	OpType_INVITE_VIA_EMAIL                  OpType = 38
	OpType_NOTIFIED_REQUEST_RECOVERY         OpType = 39
	OpType_SEND_CHAT_CHECKED                 OpType = 40
	OpType_SEND_CHAT_REMOVED                 OpType = 41
	OpType_NOTIFIED_FORCE_SYNC               OpType = 42
	OpType_SEND_CONTENT                      OpType = 43
	OpType_SEND_MESSAGE_MYHOME               OpType = 44
	OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW   OpType = 45
	OpType_REMOVE_ALL_MESSAGES               OpType = 46
	OpType_NOTIFIED_UPDATE_PURCHASES         OpType = 47
	OpType_DUMMY                             OpType = 48
	OpType_UPDATE_CONTACT                    OpType = 49
	OpType_NOTIFIED_RECEIVED_CALL            OpType = 50
	OpType_CANCEL_CALL                       OpType = 51
	OpType_NOTIFIED_REDIRECT                 OpType = 52
	OpType_NOTIFIED_CHANNEL_SYNC             OpType = 53
	OpType_FAILED_SEND_MESSAGE               OpType = 54
	OpType_NOTIFIED_READ_MESSAGE             OpType = 55
	OpType_FAILED_EMAIL_CONFIRMATION         OpType = 56
	OpType_NOTIFIED_CHAT_CONTENT             OpType = 58
	OpType_NOTIFIED_PUSH_NOTICENTER_ITEM     OpType = 59
	OpType_NOTIFIED_JOIN_CHAT                OpType = 60
	OpType_NOTIFIED_LEAVE_CHAT               OpType = 61
	OpType_NOTIFIED_TYPING                   OpType = 62
	OpType_FRIEND_REQUEST_ACCEPTED           OpType = 63
	OpType_DESTROY_MESSAGE                   OpType = 64
	OpType_NOTIFIED_DESTROY_MESSAGE          OpType = 65
	OpType_UPDATE_PUBLICKEYCHAIN             OpType = 66
	OpType_NOTIFIED_UPDATE_PUBLICKEYCHAIN    OpType = 67
	OpType_NOTIFIED_BLOCK_CONTACT            OpType = 68
	OpType_NOTIFIED_UNBLOCK_CONTACT          OpType = 69
	OpType_UPDATE_GROUPPREFERENCE            OpType = 70
	OpType_NOTIFIED_PAYMENT_EVENT            OpType = 71
	OpType_REGISTER_E2EE_PUBLICKEY           OpType = 72
	OpType_NOTIFIED_E2EE_KEY_EXCHANGE_REQ    OpType = 73
	OpType_NOTIFIED_E2EE_KEY_EXCHANGE_RESP   OpType = 74
	OpType_NOTIFIED_E2EE_MESSAGE_RESEND_REQ  OpType = 75
	OpType_NOTIFIED_E2EE_MESSAGE_RESEND_RESP OpType = 76
	OpType_NOTIFIED_E2EE_KEY_UPDATE          OpType = 77
	OpType_NOTIFIED_BUDDY_UPDATE_PROFILE     OpType = 78
	OpType_NOTIFIED_UPDATE_LINEAT_TABS       OpType = 79
	OpType_UPDATE_ROOM                       OpType = 80
	OpType_NOTIFIED_BEACON_DETECTED          OpType = 81
	OpType_UPDATE_EXTENDED_PROFILE           OpType = 82
	OpType_ADD_FOLLOW                        OpType = 83
	OpType_NOTIFIED_ADD_FOLLOW               OpType = 84
	OpType_DELETE_FOLLOW                     OpType = 85
	OpType_NOTIFIED_DELETE_FOLLOW            OpType = 86
	OpType_UPDATE_TIMELINE_SETTINGS          OpType = 87
	OpType_NOTIFIED_FRIEND_REQUEST           OpType = 88
	OpType_UPDATE_RINGBACK_TONE              OpType = 89
	OpType_NOTIFIED_POSTBACK                 OpType = 90
	OpType_RECEIVE_READ_WATERMARK            OpType = 91
)

func (p OpType) String() string {
	switch p {
	case OpType_END_OF_OPERATION:
		return "END_OF_OPERATION"
	case OpType_UPDATE_PROFILE:
		return "UPDATE_PROFILE"
	case OpType_NOTIFIED_UPDATE_PROFILE:
		return "NOTIFIED_UPDATE_PROFILE"
	case OpType_REGISTER_USERID:
		return "REGISTER_USERID"
	case OpType_ADD_CONTACT:
		return "ADD_CONTACT"
	case OpType_NOTIFIED_ADD_CONTACT:
		return "NOTIFIED_ADD_CONTACT"
	case OpType_BLOCK_CONTACT:
		return "BLOCK_CONTACT"
	case OpType_UNBLOCK_CONTACT:
		return "UNBLOCK_CONTACT"
	case OpType_NOTIFIED_RECOMMEND_CONTACT:
		return "NOTIFIED_RECOMMEND_CONTACT"
	case OpType_CREATE_GROUP:
		return "CREATE_GROUP"
	case OpType_UPDATE_GROUP:
		return "UPDATE_GROUP"
	case OpType_NOTIFIED_UPDATE_GROUP:
		return "NOTIFIED_UPDATE_GROUP"
	case OpType_INVITE_INTO_GROUP:
		return "INVITE_INTO_GROUP"
	case OpType_NOTIFIED_INVITE_INTO_GROUP:
		return "NOTIFIED_INVITE_INTO_GROUP"
	case OpType_LEAVE_GROUP:
		return "LEAVE_GROUP"
	case OpType_NOTIFIED_LEAVE_GROUP:
		return "NOTIFIED_LEAVE_GROUP"
	case OpType_ACCEPT_GROUP_INVITATION:
		return "ACCEPT_GROUP_INVITATION"
	case OpType_NOTIFIED_ACCEPT_GROUP_INVITATION:
		return "NOTIFIED_ACCEPT_GROUP_INVITATION"
	case OpType_KICKOUT_FROM_GROUP:
		return "KICKOUT_FROM_GROUP"
	case OpType_NOTIFIED_KICKOUT_FROM_GROUP:
		return "NOTIFIED_KICKOUT_FROM_GROUP"
	case OpType_CREATE_ROOM:
		return "CREATE_ROOM"
	case OpType_INVITE_INTO_ROOM:
		return "INVITE_INTO_ROOM"
	case OpType_NOTIFIED_INVITE_INTO_ROOM:
		return "NOTIFIED_INVITE_INTO_ROOM"
	case OpType_LEAVE_ROOM:
		return "LEAVE_ROOM"
	case OpType_NOTIFIED_LEAVE_ROOM:
		return "NOTIFIED_LEAVE_ROOM"
	case OpType_SEND_MESSAGE:
		return "SEND_MESSAGE"
	case OpType_RECEIVE_MESSAGE:
		return "RECEIVE_MESSAGE"
	case OpType_SEND_MESSAGE_RECEIPT:
		return "SEND_MESSAGE_RECEIPT"
	case OpType_RECEIVE_MESSAGE_RECEIPT:
		return "RECEIVE_MESSAGE_RECEIPT"
	case OpType_SEND_CONTENT_RECEIPT:
		return "SEND_CONTENT_RECEIPT"
	case OpType_RECEIVE_ANNOUNCEMENT:
		return "RECEIVE_ANNOUNCEMENT"
	case OpType_CANCEL_INVITATION_GROUP:
		return "CANCEL_INVITATION_GROUP"
	case OpType_NOTIFIED_CANCEL_INVITATION_GROUP:
		return "NOTIFIED_CANCEL_INVITATION_GROUP"
	case OpType_NOTIFIED_UNREGISTER_USER:
		return "NOTIFIED_UNREGISTER_USER"
	case OpType_REJECT_GROUP_INVITATION:
		return "REJECT_GROUP_INVITATION"
	case OpType_NOTIFIED_REJECT_GROUP_INVITATION:
		return "NOTIFIED_REJECT_GROUP_INVITATION"
	case OpType_UPDATE_SETTINGS:
		return "UPDATE_SETTINGS"
	case OpType_NOTIFIED_REGISTER_USER:
		return "NOTIFIED_REGISTER_USER"
	case OpType_INVITE_VIA_EMAIL:
		return "INVITE_VIA_EMAIL"
	case OpType_NOTIFIED_REQUEST_RECOVERY:
		return "NOTIFIED_REQUEST_RECOVERY"
	case OpType_SEND_CHAT_CHECKED:
		return "SEND_CHAT_CHECKED"
	case OpType_SEND_CHAT_REMOVED:
		return "SEND_CHAT_REMOVED"
	case OpType_NOTIFIED_FORCE_SYNC:
		return "NOTIFIED_FORCE_SYNC"
	case OpType_SEND_CONTENT:
		return "SEND_CONTENT"
	case OpType_SEND_MESSAGE_MYHOME:
		return "SEND_MESSAGE_MYHOME"
	case OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW:
		return "NOTIFIED_UPDATE_CONTENT_PREVIEW"
	case OpType_REMOVE_ALL_MESSAGES:
		return "REMOVE_ALL_MESSAGES"
	case OpType_NOTIFIED_UPDATE_PURCHASES:
		return "NOTIFIED_UPDATE_PURCHASES"
	case OpType_DUMMY:
		return "DUMMY"
	case OpType_UPDATE_CONTACT:
		return "UPDATE_CONTACT"
	case OpType_NOTIFIED_RECEIVED_CALL:
		return "NOTIFIED_RECEIVED_CALL"
	case OpType_CANCEL_CALL:
		return "CANCEL_CALL"
	case OpType_NOTIFIED_REDIRECT:
		return "NOTIFIED_REDIRECT"
	case OpType_NOTIFIED_CHANNEL_SYNC:
		return "NOTIFIED_CHANNEL_SYNC"
	case OpType_FAILED_SEND_MESSAGE:
		return "FAILED_SEND_MESSAGE"
	case OpType_NOTIFIED_READ_MESSAGE:
		return "NOTIFIED_READ_MESSAGE"
	case OpType_FAILED_EMAIL_CONFIRMATION:
		return "FAILED_EMAIL_CONFIRMATION"
	case OpType_NOTIFIED_CHAT_CONTENT:
		return "NOTIFIED_CHAT_CONTENT"
	case OpType_NOTIFIED_PUSH_NOTICENTER_ITEM:
		return "NOTIFIED_PUSH_NOTICENTER_ITEM"
	case OpType_NOTIFIED_JOIN_CHAT:
		return "NOTIFIED_JOIN_CHAT"
	case OpType_NOTIFIED_LEAVE_CHAT:
		return "NOTIFIED_LEAVE_CHAT"
	case OpType_NOTIFIED_TYPING:
		return "NOTIFIED_TYPING"
	case OpType_FRIEND_REQUEST_ACCEPTED:
		return "FRIEND_REQUEST_ACCEPTED"
	case OpType_DESTROY_MESSAGE:
		return "DESTROY_MESSAGE"
	case OpType_NOTIFIED_DESTROY_MESSAGE:
		return "NOTIFIED_DESTROY_MESSAGE"
	case OpType_UPDATE_PUBLICKEYCHAIN:
		return "UPDATE_PUBLICKEYCHAIN"
	case OpType_NOTIFIED_UPDATE_PUBLICKEYCHAIN:
		return "NOTIFIED_UPDATE_PUBLICKEYCHAIN"
	case OpType_NOTIFIED_BLOCK_CONTACT:
		return "NOTIFIED_BLOCK_CONTACT"
	case OpType_NOTIFIED_UNBLOCK_CONTACT:
		return "NOTIFIED_UNBLOCK_CONTACT"
	case OpType_UPDATE_GROUPPREFERENCE:
		return "UPDATE_GROUPPREFERENCE"
	case OpType_NOTIFIED_PAYMENT_EVENT:
		return "NOTIFIED_PAYMENT_EVENT"
	case OpType_REGISTER_E2EE_PUBLICKEY:
		return "REGISTER_E2EE_PUBLICKEY"
	case OpType_NOTIFIED_E2EE_KEY_EXCHANGE_REQ:
		return "NOTIFIED_E2EE_KEY_EXCHANGE_REQ"
	case OpType_NOTIFIED_E2EE_KEY_EXCHANGE_RESP:
		return "NOTIFIED_E2EE_KEY_EXCHANGE_RESP"
	case OpType_NOTIFIED_E2EE_MESSAGE_RESEND_REQ:
		return "NOTIFIED_E2EE_MESSAGE_RESEND_REQ"
	case OpType_NOTIFIED_E2EE_MESSAGE_RESEND_RESP:
		return "NOTIFIED_E2EE_MESSAGE_RESEND_RESP"
	case OpType_NOTIFIED_E2EE_KEY_UPDATE:
		return "NOTIFIED_E2EE_KEY_UPDATE"
	case OpType_NOTIFIED_BUDDY_UPDATE_PROFILE:
		return "NOTIFIED_BUDDY_UPDATE_PROFILE"
	case OpType_NOTIFIED_UPDATE_LINEAT_TABS:
		return "NOTIFIED_UPDATE_LINEAT_TABS"
	case OpType_UPDATE_ROOM:
		return "UPDATE_ROOM"
	case OpType_NOTIFIED_BEACON_DETECTED:
		return "NOTIFIED_BEACON_DETECTED"
	case OpType_UPDATE_EXTENDED_PROFILE:
		return "UPDATE_EXTENDED_PROFILE"
	case OpType_ADD_FOLLOW:
		return "ADD_FOLLOW"
	case OpType_NOTIFIED_ADD_FOLLOW:
		return "NOTIFIED_ADD_FOLLOW"
	case OpType_DELETE_FOLLOW:
		return "DELETE_FOLLOW"
	case OpType_NOTIFIED_DELETE_FOLLOW:
		return "NOTIFIED_DELETE_FOLLOW"
	case OpType_UPDATE_TIMELINE_SETTINGS:
		return "UPDATE_TIMELINE_SETTINGS"
	case OpType_NOTIFIED_FRIEND_REQUEST:
		return "NOTIFIED_FRIEND_REQUEST"
	case OpType_UPDATE_RINGBACK_TONE:
		return "UPDATE_RINGBACK_TONE"
	case OpType_NOTIFIED_POSTBACK:
		return "NOTIFIED_POSTBACK"
	case OpType_RECEIVE_READ_WATERMARK:
		return "RECEIVE_READ_WATERMARK"
	}
	return "<UNSET>"
}

func OpTypeFromString(s string) (OpType, error) {
	switch s {
	case "END_OF_OPERATION":
		return OpType_END_OF_OPERATION, nil
	case "UPDATE_PROFILE":
		return OpType_UPDATE_PROFILE, nil
	case "NOTIFIED_UPDATE_PROFILE":
		return OpType_NOTIFIED_UPDATE_PROFILE, nil
	case "REGISTER_USERID":
		return OpType_REGISTER_USERID, nil
	case "ADD_CONTACT":
		return OpType_ADD_CONTACT, nil
	case "NOTIFIED_ADD_CONTACT":
		return OpType_NOTIFIED_ADD_CONTACT, nil
	case "BLOCK_CONTACT":
		return OpType_BLOCK_CONTACT, nil
	case "UNBLOCK_CONTACT":
		return OpType_UNBLOCK_CONTACT, nil
	case "NOTIFIED_RECOMMEND_CONTACT":
		return OpType_NOTIFIED_RECOMMEND_CONTACT, nil
	case "CREATE_GROUP":
		return OpType_CREATE_GROUP, nil
	case "UPDATE_GROUP":
		return OpType_UPDATE_GROUP, nil
	case "NOTIFIED_UPDATE_GROUP":
		return OpType_NOTIFIED_UPDATE_GROUP, nil
	case "INVITE_INTO_GROUP":
		return OpType_INVITE_INTO_GROUP, nil
	case "NOTIFIED_INVITE_INTO_GROUP":
		return OpType_NOTIFIED_INVITE_INTO_GROUP, nil
	case "LEAVE_GROUP":
		return OpType_LEAVE_GROUP, nil
	case "NOTIFIED_LEAVE_GROUP":
		return OpType_NOTIFIED_LEAVE_GROUP, nil
	case "ACCEPT_GROUP_INVITATION":
		return OpType_ACCEPT_GROUP_INVITATION, nil
	case "NOTIFIED_ACCEPT_GROUP_INVITATION":
		return OpType_NOTIFIED_ACCEPT_GROUP_INVITATION, nil
	case "KICKOUT_FROM_GROUP":
		return OpType_KICKOUT_FROM_GROUP, nil
	case "NOTIFIED_KICKOUT_FROM_GROUP":
		return OpType_NOTIFIED_KICKOUT_FROM_GROUP, nil
	case "CREATE_ROOM":
		return OpType_CREATE_ROOM, nil
	case "INVITE_INTO_ROOM":
		return OpType_INVITE_INTO_ROOM, nil
	case "NOTIFIED_INVITE_INTO_ROOM":
		return OpType_NOTIFIED_INVITE_INTO_ROOM, nil
	case "LEAVE_ROOM":
		return OpType_LEAVE_ROOM, nil
	case "NOTIFIED_LEAVE_ROOM":
		return OpType_NOTIFIED_LEAVE_ROOM, nil
	case "SEND_MESSAGE":
		return OpType_SEND_MESSAGE, nil
	case "RECEIVE_MESSAGE":
		return OpType_RECEIVE_MESSAGE, nil
	case "SEND_MESSAGE_RECEIPT":
		return OpType_SEND_MESSAGE_RECEIPT, nil
	case "RECEIVE_MESSAGE_RECEIPT":
		return OpType_RECEIVE_MESSAGE_RECEIPT, nil
	case "SEND_CONTENT_RECEIPT":
		return OpType_SEND_CONTENT_RECEIPT, nil
	case "RECEIVE_ANNOUNCEMENT":
		return OpType_RECEIVE_ANNOUNCEMENT, nil
	case "CANCEL_INVITATION_GROUP":
		return OpType_CANCEL_INVITATION_GROUP, nil
	case "NOTIFIED_CANCEL_INVITATION_GROUP":
		return OpType_NOTIFIED_CANCEL_INVITATION_GROUP, nil
	case "NOTIFIED_UNREGISTER_USER":
		return OpType_NOTIFIED_UNREGISTER_USER, nil
	case "REJECT_GROUP_INVITATION":
		return OpType_REJECT_GROUP_INVITATION, nil
	case "NOTIFIED_REJECT_GROUP_INVITATION":
		return OpType_NOTIFIED_REJECT_GROUP_INVITATION, nil
	case "UPDATE_SETTINGS":
		return OpType_UPDATE_SETTINGS, nil
	case "NOTIFIED_REGISTER_USER":
		return OpType_NOTIFIED_REGISTER_USER, nil
	case "INVITE_VIA_EMAIL":
		return OpType_INVITE_VIA_EMAIL, nil
	case "NOTIFIED_REQUEST_RECOVERY":
		return OpType_NOTIFIED_REQUEST_RECOVERY, nil
	case "SEND_CHAT_CHECKED":
		return OpType_SEND_CHAT_CHECKED, nil
	case "SEND_CHAT_REMOVED":
		return OpType_SEND_CHAT_REMOVED, nil
	case "NOTIFIED_FORCE_SYNC":
		return OpType_NOTIFIED_FORCE_SYNC, nil
	case "SEND_CONTENT":
		return OpType_SEND_CONTENT, nil
	case "SEND_MESSAGE_MYHOME":
		return OpType_SEND_MESSAGE_MYHOME, nil
	case "NOTIFIED_UPDATE_CONTENT_PREVIEW":
		return OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW, nil
	case "REMOVE_ALL_MESSAGES":
		return OpType_REMOVE_ALL_MESSAGES, nil
	case "NOTIFIED_UPDATE_PURCHASES":
		return OpType_NOTIFIED_UPDATE_PURCHASES, nil
	case "DUMMY":
		return OpType_DUMMY, nil
	case "UPDATE_CONTACT":
		return OpType_UPDATE_CONTACT, nil
	case "NOTIFIED_RECEIVED_CALL":
		return OpType_NOTIFIED_RECEIVED_CALL, nil
	case "CANCEL_CALL":
		return OpType_CANCEL_CALL, nil
	case "NOTIFIED_REDIRECT":
		return OpType_NOTIFIED_REDIRECT, nil
	case "NOTIFIED_CHANNEL_SYNC":
		return OpType_NOTIFIED_CHANNEL_SYNC, nil
	case "FAILED_SEND_MESSAGE":
		return OpType_FAILED_SEND_MESSAGE, nil
	case "NOTIFIED_READ_MESSAGE":
		return OpType_NOTIFIED_READ_MESSAGE, nil
	case "FAILED_EMAIL_CONFIRMATION":
		return OpType_FAILED_EMAIL_CONFIRMATION, nil
	case "NOTIFIED_CHAT_CONTENT":
		return OpType_NOTIFIED_CHAT_CONTENT, nil
	case "NOTIFIED_PUSH_NOTICENTER_ITEM":
		return OpType_NOTIFIED_PUSH_NOTICENTER_ITEM, nil
	case "NOTIFIED_JOIN_CHAT":
		return OpType_NOTIFIED_JOIN_CHAT, nil
	case "NOTIFIED_LEAVE_CHAT":
		return OpType_NOTIFIED_LEAVE_CHAT, nil
	case "NOTIFIED_TYPING":
		return OpType_NOTIFIED_TYPING, nil
	case "FRIEND_REQUEST_ACCEPTED":
		return OpType_FRIEND_REQUEST_ACCEPTED, nil
	case "DESTROY_MESSAGE":
		return OpType_DESTROY_MESSAGE, nil
	case "NOTIFIED_DESTROY_MESSAGE":
		return OpType_NOTIFIED_DESTROY_MESSAGE, nil
	case "UPDATE_PUBLICKEYCHAIN":
		return OpType_UPDATE_PUBLICKEYCHAIN, nil
	case "NOTIFIED_UPDATE_PUBLICKEYCHAIN":
		return OpType_NOTIFIED_UPDATE_PUBLICKEYCHAIN, nil
	case "NOTIFIED_BLOCK_CONTACT":
		return OpType_NOTIFIED_BLOCK_CONTACT, nil
	case "NOTIFIED_UNBLOCK_CONTACT":
		return OpType_NOTIFIED_UNBLOCK_CONTACT, nil
	case "UPDATE_GROUPPREFERENCE":
		return OpType_UPDATE_GROUPPREFERENCE, nil
	case "NOTIFIED_PAYMENT_EVENT":
		return OpType_NOTIFIED_PAYMENT_EVENT, nil
	case "REGISTER_E2EE_PUBLICKEY":
		return OpType_REGISTER_E2EE_PUBLICKEY, nil
	case "NOTIFIED_E2EE_KEY_EXCHANGE_REQ":
		return OpType_NOTIFIED_E2EE_KEY_EXCHANGE_REQ, nil
	case "NOTIFIED_E2EE_KEY_EXCHANGE_RESP":
		return OpType_NOTIFIED_E2EE_KEY_EXCHANGE_RESP, nil
	case "NOTIFIED_E2EE_MESSAGE_RESEND_REQ":
		return OpType_NOTIFIED_E2EE_MESSAGE_RESEND_REQ, nil
	case "NOTIFIED_E2EE_MESSAGE_RESEND_RESP":
		return OpType_NOTIFIED_E2EE_MESSAGE_RESEND_RESP, nil
	case "NOTIFIED_E2EE_KEY_UPDATE":
		return OpType_NOTIFIED_E2EE_KEY_UPDATE, nil
	case "NOTIFIED_BUDDY_UPDATE_PROFILE":
		return OpType_NOTIFIED_BUDDY_UPDATE_PROFILE, nil
	case "NOTIFIED_UPDATE_LINEAT_TABS":
		return OpType_NOTIFIED_UPDATE_LINEAT_TABS, nil
	case "UPDATE_ROOM":
		return OpType_UPDATE_ROOM, nil
	case "NOTIFIED_BEACON_DETECTED":
		return OpType_NOTIFIED_BEACON_DETECTED, nil
	case "UPDATE_EXTENDED_PROFILE":
		return OpType_UPDATE_EXTENDED_PROFILE, nil
	case "ADD_FOLLOW":
		return OpType_ADD_FOLLOW, nil
	case "NOTIFIED_ADD_FOLLOW":
		return OpType_NOTIFIED_ADD_FOLLOW, nil
	case "DELETE_FOLLOW":
		return OpType_DELETE_FOLLOW, nil
	case "NOTIFIED_DELETE_FOLLOW":
		return OpType_NOTIFIED_DELETE_FOLLOW, nil
	case "UPDATE_TIMELINE_SETTINGS":
		return OpType_UPDATE_TIMELINE_SETTINGS, nil
	case "NOTIFIED_FRIEND_REQUEST":
		return OpType_NOTIFIED_FRIEND_REQUEST, nil
	case "UPDATE_RINGBACK_TONE":
		return OpType_UPDATE_RINGBACK_TONE, nil
	case "NOTIFIED_POSTBACK":
		return OpType_NOTIFIED_POSTBACK, nil
	case "RECEIVE_READ_WATERMARK":
		return OpType_RECEIVE_READ_WATERMARK, nil
	}
	return OpType(0), fmt.Errorf("not a valid OpType string")
}

func OpTypePtr(v OpType) *OpType { return &v }

func (p OpType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *OpType) UnmarshalText(text []byte) error {
	q, err := OpTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ProfileAttribute int64

const (
	ProfileAttribute_EMAIL                  ProfileAttribute = 1
	ProfileAttribute_DISPLAY_NAME           ProfileAttribute = 2
	ProfileAttribute_PHONETIC_NAME          ProfileAttribute = 4
	ProfileAttribute_PICTURE                ProfileAttribute = 8
	ProfileAttribute_STATUS_MESSAGE         ProfileAttribute = 16
	ProfileAttribute_ALLOW_SEARCH_BY_USERID ProfileAttribute = 32
	ProfileAttribute_ALLOW_SEARCH_BY_EMAIL  ProfileAttribute = 64
	ProfileAttribute_BUDDY_STATUS           ProfileAttribute = 128
	ProfileAttribute_ALL                    ProfileAttribute = 255
)

func (p ProfileAttribute) String() string {
	switch p {
	case ProfileAttribute_EMAIL:
		return "EMAIL"
	case ProfileAttribute_DISPLAY_NAME:
		return "DISPLAY_NAME"
	case ProfileAttribute_PHONETIC_NAME:
		return "PHONETIC_NAME"
	case ProfileAttribute_PICTURE:
		return "PICTURE"
	case ProfileAttribute_STATUS_MESSAGE:
		return "STATUS_MESSAGE"
	case ProfileAttribute_ALLOW_SEARCH_BY_USERID:
		return "ALLOW_SEARCH_BY_USERID"
	case ProfileAttribute_ALLOW_SEARCH_BY_EMAIL:
		return "ALLOW_SEARCH_BY_EMAIL"
	case ProfileAttribute_BUDDY_STATUS:
		return "BUDDY_STATUS"
	case ProfileAttribute_ALL:
		return "ALL"
	}
	return "<UNSET>"
}

func ProfileAttributeFromString(s string) (ProfileAttribute, error) {
	switch s {
	case "EMAIL":
		return ProfileAttribute_EMAIL, nil
	case "DISPLAY_NAME":
		return ProfileAttribute_DISPLAY_NAME, nil
	case "PHONETIC_NAME":
		return ProfileAttribute_PHONETIC_NAME, nil
	case "PICTURE":
		return ProfileAttribute_PICTURE, nil
	case "STATUS_MESSAGE":
		return ProfileAttribute_STATUS_MESSAGE, nil
	case "ALLOW_SEARCH_BY_USERID":
		return ProfileAttribute_ALLOW_SEARCH_BY_USERID, nil
	case "ALLOW_SEARCH_BY_EMAIL":
		return ProfileAttribute_ALLOW_SEARCH_BY_EMAIL, nil
	case "BUDDY_STATUS":
		return ProfileAttribute_BUDDY_STATUS, nil
	case "ALL":
		return ProfileAttribute_ALL, nil
	}
	return ProfileAttribute(0), fmt.Errorf("not a valid ProfileAttribute string")
}

func ProfileAttributePtr(v ProfileAttribute) *ProfileAttribute { return &v }

func (p ProfileAttribute) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ProfileAttribute) UnmarshalText(text []byte) error {
	q, err := ProfileAttributeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type PublicType int64

const (
	PublicType_HIDDEN PublicType = 0
	PublicType_PUBLIC PublicType = 1000
)

func (p PublicType) String() string {
	switch p {
	case PublicType_HIDDEN:
		return "HIDDEN"
	case PublicType_PUBLIC:
		return "PUBLIC"
	}
	return "<UNSET>"
}

func PublicTypeFromString(s string) (PublicType, error) {
	switch s {
	case "HIDDEN":
		return PublicType_HIDDEN, nil
	case "PUBLIC":
		return PublicType_PUBLIC, nil
	}
	return PublicType(0), fmt.Errorf("not a valid PublicType string")
}

func PublicTypePtr(v PublicType) *PublicType { return &v }

func (p PublicType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *PublicType) UnmarshalText(text []byte) error {
	q, err := PublicTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type RegistrationType int64

const (
	RegistrationType_PHONE     RegistrationType = 0
	RegistrationType_EMAIL_WAP RegistrationType = 1
	RegistrationType_FACEBOOK  RegistrationType = 2305
	RegistrationType_SINA      RegistrationType = 2306
	RegistrationType_RENREN    RegistrationType = 2307
	RegistrationType_FEIXIN    RegistrationType = 2308
)

func (p RegistrationType) String() string {
	switch p {
	case RegistrationType_PHONE:
		return "PHONE"
	case RegistrationType_EMAIL_WAP:
		return "EMAIL_WAP"
	case RegistrationType_FACEBOOK:
		return "FACEBOOK"
	case RegistrationType_SINA:
		return "SINA"
	case RegistrationType_RENREN:
		return "RENREN"
	case RegistrationType_FEIXIN:
		return "FEIXIN"
	}
	return "<UNSET>"
}

func RegistrationTypeFromString(s string) (RegistrationType, error) {
	switch s {
	case "PHONE":
		return RegistrationType_PHONE, nil
	case "EMAIL_WAP":
		return RegistrationType_EMAIL_WAP, nil
	case "FACEBOOK":
		return RegistrationType_FACEBOOK, nil
	case "SINA":
		return RegistrationType_SINA, nil
	case "RENREN":
		return RegistrationType_RENREN, nil
	case "FEIXIN":
		return RegistrationType_FEIXIN, nil
	}
	return RegistrationType(0), fmt.Errorf("not a valid RegistrationType string")
}

func RegistrationTypePtr(v RegistrationType) *RegistrationType { return &v }

func (p RegistrationType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *RegistrationType) UnmarshalText(text []byte) error {
	q, err := RegistrationTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type SettingsAttribute int64

const (
	SettingsAttribute_NOTIFICATION_ENABLE                   SettingsAttribute = 1
	SettingsAttribute_NOTIFICATION_MUTE_EXPIRATION          SettingsAttribute = 2
	SettingsAttribute_NOTIFICATION_NEW_MESSAGE              SettingsAttribute = 4
	SettingsAttribute_NOTIFICATION_GROUP_INVITATION         SettingsAttribute = 8
	SettingsAttribute_NOTIFICATION_SHOW_MESSAGE             SettingsAttribute = 16
	SettingsAttribute_NOTIFICATION_INCOMING_CALL            SettingsAttribute = 32
	SettingsAttribute_PRIVACY_SYNC_CONTACTS                 SettingsAttribute = 64
	SettingsAttribute_PRIVACY_SEARCH_BY_PHONE_NUMBER        SettingsAttribute = 128
	SettingsAttribute_NOTIFICATION_SOUND_MESSAGE            SettingsAttribute = 256
	SettingsAttribute_NOTIFICATION_SOUND_GROUP              SettingsAttribute = 512
	SettingsAttribute_CONTACT_MY_TICKET                     SettingsAttribute = 1024
	SettingsAttribute_IDENTITY_PROVIDER                     SettingsAttribute = 2048
	SettingsAttribute_IDENTITY_IDENTIFIER                   SettingsAttribute = 4096
	SettingsAttribute_PRIVACY_SEARCH_BY_USERID              SettingsAttribute = 8192
	SettingsAttribute_PRIVACY_SEARCH_BY_EMAIL               SettingsAttribute = 16384
	SettingsAttribute_PREFERENCE_LOCALE                     SettingsAttribute = 32768
	SettingsAttribute_NOTIFICATION_DISABLED_WITH_SUB        SettingsAttribute = 65536
	SettingsAttribute_SNS_ACCOUNT                           SettingsAttribute = 524288
	SettingsAttribute_PHONE_REGISTRATION                    SettingsAttribute = 1048576
	SettingsAttribute_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN  SettingsAttribute = 2097152
	SettingsAttribute_CUSTOM_MODE                           SettingsAttribute = 4194304
	SettingsAttribute_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME  SettingsAttribute = 8388608
	SettingsAttribute_EMAIL_CONFIRMATION_STATUS             SettingsAttribute = 16777216
	SettingsAttribute_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND SettingsAttribute = 33554432
	SettingsAttribute_ALL                                   SettingsAttribute = 2147483647
)

func (p SettingsAttribute) String() string {
	switch p {
	case SettingsAttribute_NOTIFICATION_ENABLE:
		return "NOTIFICATION_ENABLE"
	case SettingsAttribute_NOTIFICATION_MUTE_EXPIRATION:
		return "NOTIFICATION_MUTE_EXPIRATION"
	case SettingsAttribute_NOTIFICATION_NEW_MESSAGE:
		return "NOTIFICATION_NEW_MESSAGE"
	case SettingsAttribute_NOTIFICATION_GROUP_INVITATION:
		return "NOTIFICATION_GROUP_INVITATION"
	case SettingsAttribute_NOTIFICATION_SHOW_MESSAGE:
		return "NOTIFICATION_SHOW_MESSAGE"
	case SettingsAttribute_NOTIFICATION_INCOMING_CALL:
		return "NOTIFICATION_INCOMING_CALL"
	case SettingsAttribute_PRIVACY_SYNC_CONTACTS:
		return "PRIVACY_SYNC_CONTACTS"
	case SettingsAttribute_PRIVACY_SEARCH_BY_PHONE_NUMBER:
		return "PRIVACY_SEARCH_BY_PHONE_NUMBER"
	case SettingsAttribute_NOTIFICATION_SOUND_MESSAGE:
		return "NOTIFICATION_SOUND_MESSAGE"
	case SettingsAttribute_NOTIFICATION_SOUND_GROUP:
		return "NOTIFICATION_SOUND_GROUP"
	case SettingsAttribute_CONTACT_MY_TICKET:
		return "CONTACT_MY_TICKET"
	case SettingsAttribute_IDENTITY_PROVIDER:
		return "IDENTITY_PROVIDER"
	case SettingsAttribute_IDENTITY_IDENTIFIER:
		return "IDENTITY_IDENTIFIER"
	case SettingsAttribute_PRIVACY_SEARCH_BY_USERID:
		return "PRIVACY_SEARCH_BY_USERID"
	case SettingsAttribute_PRIVACY_SEARCH_BY_EMAIL:
		return "PRIVACY_SEARCH_BY_EMAIL"
	case SettingsAttribute_PREFERENCE_LOCALE:
		return "PREFERENCE_LOCALE"
	case SettingsAttribute_NOTIFICATION_DISABLED_WITH_SUB:
		return "NOTIFICATION_DISABLED_WITH_SUB"
	case SettingsAttribute_SNS_ACCOUNT:
		return "SNS_ACCOUNT"
	case SettingsAttribute_PHONE_REGISTRATION:
		return "PHONE_REGISTRATION"
	case SettingsAttribute_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN:
		return "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN"
	case SettingsAttribute_CUSTOM_MODE:
		return "CUSTOM_MODE"
	case SettingsAttribute_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME:
		return "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME"
	case SettingsAttribute_EMAIL_CONFIRMATION_STATUS:
		return "EMAIL_CONFIRMATION_STATUS"
	case SettingsAttribute_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND:
		return "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND"
	case SettingsAttribute_ALL:
		return "ALL"
	}
	return "<UNSET>"
}

func SettingsAttributeFromString(s string) (SettingsAttribute, error) {
	switch s {
	case "NOTIFICATION_ENABLE":
		return SettingsAttribute_NOTIFICATION_ENABLE, nil
	case "NOTIFICATION_MUTE_EXPIRATION":
		return SettingsAttribute_NOTIFICATION_MUTE_EXPIRATION, nil
	case "NOTIFICATION_NEW_MESSAGE":
		return SettingsAttribute_NOTIFICATION_NEW_MESSAGE, nil
	case "NOTIFICATION_GROUP_INVITATION":
		return SettingsAttribute_NOTIFICATION_GROUP_INVITATION, nil
	case "NOTIFICATION_SHOW_MESSAGE":
		return SettingsAttribute_NOTIFICATION_SHOW_MESSAGE, nil
	case "NOTIFICATION_INCOMING_CALL":
		return SettingsAttribute_NOTIFICATION_INCOMING_CALL, nil
	case "PRIVACY_SYNC_CONTACTS":
		return SettingsAttribute_PRIVACY_SYNC_CONTACTS, nil
	case "PRIVACY_SEARCH_BY_PHONE_NUMBER":
		return SettingsAttribute_PRIVACY_SEARCH_BY_PHONE_NUMBER, nil
	case "NOTIFICATION_SOUND_MESSAGE":
		return SettingsAttribute_NOTIFICATION_SOUND_MESSAGE, nil
	case "NOTIFICATION_SOUND_GROUP":
		return SettingsAttribute_NOTIFICATION_SOUND_GROUP, nil
	case "CONTACT_MY_TICKET":
		return SettingsAttribute_CONTACT_MY_TICKET, nil
	case "IDENTITY_PROVIDER":
		return SettingsAttribute_IDENTITY_PROVIDER, nil
	case "IDENTITY_IDENTIFIER":
		return SettingsAttribute_IDENTITY_IDENTIFIER, nil
	case "PRIVACY_SEARCH_BY_USERID":
		return SettingsAttribute_PRIVACY_SEARCH_BY_USERID, nil
	case "PRIVACY_SEARCH_BY_EMAIL":
		return SettingsAttribute_PRIVACY_SEARCH_BY_EMAIL, nil
	case "PREFERENCE_LOCALE":
		return SettingsAttribute_PREFERENCE_LOCALE, nil
	case "NOTIFICATION_DISABLED_WITH_SUB":
		return SettingsAttribute_NOTIFICATION_DISABLED_WITH_SUB, nil
	case "SNS_ACCOUNT":
		return SettingsAttribute_SNS_ACCOUNT, nil
	case "PHONE_REGISTRATION":
		return SettingsAttribute_PHONE_REGISTRATION, nil
	case "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN":
		return SettingsAttribute_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN, nil
	case "CUSTOM_MODE":
		return SettingsAttribute_CUSTOM_MODE, nil
	case "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME":
		return SettingsAttribute_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME, nil
	case "EMAIL_CONFIRMATION_STATUS":
		return SettingsAttribute_EMAIL_CONFIRMATION_STATUS, nil
	case "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND":
		return SettingsAttribute_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND, nil
	case "ALL":
		return SettingsAttribute_ALL, nil
	}
	return SettingsAttribute(0), fmt.Errorf("not a valid SettingsAttribute string")
}

func SettingsAttributePtr(v SettingsAttribute) *SettingsAttribute { return &v }

func (p SettingsAttribute) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SettingsAttribute) UnmarshalText(text []byte) error {
	q, err := SettingsAttributeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type CarrierCode int64

const (
	CarrierCode_NOT_SPECIFIED CarrierCode = 0
	CarrierCode_JP_DOCOMO     CarrierCode = 1
	CarrierCode_JP_AU         CarrierCode = 2
	CarrierCode_JP_SOFTBANK   CarrierCode = 3
	CarrierCode_KR_SKT        CarrierCode = 17
	CarrierCode_KR_KT         CarrierCode = 18
	CarrierCode_KR_LGT        CarrierCode = 19
)

func (p CarrierCode) String() string {
	switch p {
	case CarrierCode_NOT_SPECIFIED:
		return "NOT_SPECIFIED"
	case CarrierCode_JP_DOCOMO:
		return "JP_DOCOMO"
	case CarrierCode_JP_AU:
		return "JP_AU"
	case CarrierCode_JP_SOFTBANK:
		return "JP_SOFTBANK"
	case CarrierCode_KR_SKT:
		return "KR_SKT"
	case CarrierCode_KR_KT:
		return "KR_KT"
	case CarrierCode_KR_LGT:
		return "KR_LGT"
	}
	return "<UNSET>"
}

func CarrierCodeFromString(s string) (CarrierCode, error) {
	switch s {
	case "NOT_SPECIFIED":
		return CarrierCode_NOT_SPECIFIED, nil
	case "JP_DOCOMO":
		return CarrierCode_JP_DOCOMO, nil
	case "JP_AU":
		return CarrierCode_JP_AU, nil
	case "JP_SOFTBANK":
		return CarrierCode_JP_SOFTBANK, nil
	case "KR_SKT":
		return CarrierCode_KR_SKT, nil
	case "KR_KT":
		return CarrierCode_KR_KT, nil
	case "KR_LGT":
		return CarrierCode_KR_LGT, nil
	}
	return CarrierCode(0), fmt.Errorf("not a valid CarrierCode string")
}

func CarrierCodePtr(v CarrierCode) *CarrierCode { return &v }

func (p CarrierCode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *CarrierCode) UnmarshalText(text []byte) error {
	q, err := CarrierCodeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type PaymentType int64

const (
	PaymentType_PAYMENT_APPLE  PaymentType = 1
	PaymentType_PAYMENT_GOOGLE PaymentType = 2
)

func (p PaymentType) String() string {
	switch p {
	case PaymentType_PAYMENT_APPLE:
		return "PAYMENT_APPLE"
	case PaymentType_PAYMENT_GOOGLE:
		return "PAYMENT_GOOGLE"
	}
	return "<UNSET>"
}

func PaymentTypeFromString(s string) (PaymentType, error) {
	switch s {
	case "PAYMENT_APPLE":
		return PaymentType_PAYMENT_APPLE, nil
	case "PAYMENT_GOOGLE":
		return PaymentType_PAYMENT_GOOGLE, nil
	}
	return PaymentType(0), fmt.Errorf("not a valid PaymentType string")
}

func PaymentTypePtr(v PaymentType) *PaymentType { return &v }

func (p PaymentType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *PaymentType) UnmarshalText(text []byte) error {
	q, err := PaymentTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type SnsIdType int64

const (
	SnsIdType_FACEBOOK SnsIdType = 1
	SnsIdType_SINA     SnsIdType = 2
	SnsIdType_RENREN   SnsIdType = 3
	SnsIdType_FEIXIN   SnsIdType = 4
)

func (p SnsIdType) String() string {
	switch p {
	case SnsIdType_FACEBOOK:
		return "FACEBOOK"
	case SnsIdType_SINA:
		return "SINA"
	case SnsIdType_RENREN:
		return "RENREN"
	case SnsIdType_FEIXIN:
		return "FEIXIN"
	}
	return "<UNSET>"
}

func SnsIdTypeFromString(s string) (SnsIdType, error) {
	switch s {
	case "FACEBOOK":
		return SnsIdType_FACEBOOK, nil
	case "SINA":
		return SnsIdType_SINA, nil
	case "RENREN":
		return SnsIdType_RENREN, nil
	case "FEIXIN":
		return SnsIdType_FEIXIN, nil
	}
	return SnsIdType(0), fmt.Errorf("not a valid SnsIdType string")
}

func SnsIdTypePtr(v SnsIdType) *SnsIdType { return &v }

func (p SnsIdType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SnsIdType) UnmarshalText(text []byte) error {
	q, err := SnsIdTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type SyncCategory int64

const (
	SyncCategory_PROFILE      SyncCategory = 0
	SyncCategory_SETTINGS     SyncCategory = 1
	SyncCategory_OPS          SyncCategory = 2
	SyncCategory_CONTACT      SyncCategory = 3
	SyncCategory_RECOMMEND    SyncCategory = 4
	SyncCategory_BLOCK        SyncCategory = 5
	SyncCategory_GROUP        SyncCategory = 6
	SyncCategory_ROOM         SyncCategory = 7
	SyncCategory_NOTIFICATION SyncCategory = 8
	SyncCategory_ADDRESS_BOOK SyncCategory = 9
)

func (p SyncCategory) String() string {
	switch p {
	case SyncCategory_PROFILE:
		return "PROFILE"
	case SyncCategory_SETTINGS:
		return "SETTINGS"
	case SyncCategory_OPS:
		return "OPS"
	case SyncCategory_CONTACT:
		return "CONTACT"
	case SyncCategory_RECOMMEND:
		return "RECOMMEND"
	case SyncCategory_BLOCK:
		return "BLOCK"
	case SyncCategory_GROUP:
		return "GROUP"
	case SyncCategory_ROOM:
		return "ROOM"
	case SyncCategory_NOTIFICATION:
		return "NOTIFICATION"
	case SyncCategory_ADDRESS_BOOK:
		return "ADDRESS_BOOK"
	}
	return "<UNSET>"
}

func SyncCategoryFromString(s string) (SyncCategory, error) {
	switch s {
	case "PROFILE":
		return SyncCategory_PROFILE, nil
	case "SETTINGS":
		return SyncCategory_SETTINGS, nil
	case "OPS":
		return SyncCategory_OPS, nil
	case "CONTACT":
		return SyncCategory_CONTACT, nil
	case "RECOMMEND":
		return SyncCategory_RECOMMEND, nil
	case "BLOCK":
		return SyncCategory_BLOCK, nil
	case "GROUP":
		return SyncCategory_GROUP, nil
	case "ROOM":
		return SyncCategory_ROOM, nil
	case "NOTIFICATION":
		return SyncCategory_NOTIFICATION, nil
	case "ADDRESS_BOOK":
		return SyncCategory_ADDRESS_BOOK, nil
	}
	return SyncCategory(0), fmt.Errorf("not a valid SyncCategory string")
}

func SyncCategoryPtr(v SyncCategory) *SyncCategory { return &v }

func (p SyncCategory) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SyncCategory) UnmarshalText(text []byte) error {
	q, err := SyncCategoryFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type YearPrivacyLevelType int64

const (
	YearPrivacyLevelType_PUBLIC  YearPrivacyLevelType = 0
	YearPrivacyLevelType_PRIVATE YearPrivacyLevelType = 1
)

func (p YearPrivacyLevelType) String() string {
	switch p {
	case YearPrivacyLevelType_PUBLIC:
		return "PUBLIC"
	case YearPrivacyLevelType_PRIVATE:
		return "PRIVATE"
	}
	return "<UNSET>"
}

func YearPrivacyLevelTypeFromString(s string) (YearPrivacyLevelType, error) {
	switch s {
	case "PUBLIC":
		return YearPrivacyLevelType_PUBLIC, nil
	case "PRIVATE":
		return YearPrivacyLevelType_PRIVATE, nil
	}
	return YearPrivacyLevelType(0), fmt.Errorf("not a valid YearPrivacyLevelType string")
}

func YearPrivacyLevelTypePtr(v YearPrivacyLevelType) *YearPrivacyLevelType { return &v }

func (p YearPrivacyLevelType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *YearPrivacyLevelType) UnmarshalText(text []byte) error {
	q, err := YearPrivacyLevelTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type Preference int64

const (
	Preference_FAVORITE_TIMESTAMP Preference = 1
	Preference_INVITATION_TICKET  Preference = 2
)

func (p Preference) String() string {
	switch p {
	case Preference_FAVORITE_TIMESTAMP:
		return "FAVORITE_TIMESTAMP"
	case Preference_INVITATION_TICKET:
		return "INVITATION_TICKET"
	}
	return "<UNSET>"
}

func PreferenceFromString(s string) (Preference, error) {
	switch s {
	case "FAVORITE_TIMESTAMP":
		return Preference_FAVORITE_TIMESTAMP, nil
	case "INVITATION_TICKET":
		return Preference_INVITATION_TICKET, nil
	}
	return Preference(0), fmt.Errorf("not a valid Preference string")
}

func PreferencePtr(v Preference) *Preference { return &v }

func (p Preference) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Preference) UnmarshalText(text []byte) error {
	q, err := PreferenceFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type DayPrivacyLevelType int64

const (
	DayPrivacyLevelType_PUBLIC  DayPrivacyLevelType = 0
	DayPrivacyLevelType_PRIVATE DayPrivacyLevelType = 1
)

func (p DayPrivacyLevelType) String() string {
	switch p {
	case DayPrivacyLevelType_PUBLIC:
		return "PUBLIC"
	case DayPrivacyLevelType_PRIVATE:
		return "PRIVATE"
	}
	return "<UNSET>"
}

func DayPrivacyLevelTypeFromString(s string) (DayPrivacyLevelType, error) {
	switch s {
	case "PUBLIC":
		return DayPrivacyLevelType_PUBLIC, nil
	case "PRIVATE":
		return DayPrivacyLevelType_PRIVATE, nil
	}
	return DayPrivacyLevelType(0), fmt.Errorf("not a valid DayPrivacyLevelType string")
}

func DayPrivacyLevelTypePtr(v DayPrivacyLevelType) *DayPrivacyLevelType { return &v }

func (p DayPrivacyLevelType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *DayPrivacyLevelType) UnmarshalText(text []byte) error {
	q, err := DayPrivacyLevelTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TMessageBoxStatus int64

const (
	TMessageBoxStatus_ACTIVATED TMessageBoxStatus = 1
	TMessageBoxStatus_UNREAD    TMessageBoxStatus = 2
)

func (p TMessageBoxStatus) String() string {
	switch p {
	case TMessageBoxStatus_ACTIVATED:
		return "ACTIVATED"
	case TMessageBoxStatus_UNREAD:
		return "UNREAD"
	}
	return "<UNSET>"
}

func TMessageBoxStatusFromString(s string) (TMessageBoxStatus, error) {
	switch s {
	case "ACTIVATED":
		return TMessageBoxStatus_ACTIVATED, nil
	case "UNREAD":
		return TMessageBoxStatus_UNREAD, nil
	}
	return TMessageBoxStatus(0), fmt.Errorf("not a valid TMessageBoxStatus string")
}

func TMessageBoxStatusPtr(v TMessageBoxStatus) *TMessageBoxStatus { return &v }

func (p TMessageBoxStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TMessageBoxStatus) UnmarshalText(text []byte) error {
	q, err := TMessageBoxStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type UniversalNotificationServiceErrorCode int64

const (
	UniversalNotificationServiceErrorCode_INTERNAL_ERROR        UniversalNotificationServiceErrorCode = 0
	UniversalNotificationServiceErrorCode_INVALID_KEY           UniversalNotificationServiceErrorCode = 1
	UniversalNotificationServiceErrorCode_ILLEGAL_ARGUMENT      UniversalNotificationServiceErrorCode = 2
	UniversalNotificationServiceErrorCode_TOO_MANY_REQUEST      UniversalNotificationServiceErrorCode = 3
	UniversalNotificationServiceErrorCode_AUTHENTICATION_FAILED UniversalNotificationServiceErrorCode = 4
	UniversalNotificationServiceErrorCode_NO_WRITE_PERMISSION   UniversalNotificationServiceErrorCode = 5
)

func (p UniversalNotificationServiceErrorCode) String() string {
	switch p {
	case UniversalNotificationServiceErrorCode_INTERNAL_ERROR:
		return "INTERNAL_ERROR"
	case UniversalNotificationServiceErrorCode_INVALID_KEY:
		return "INVALID_KEY"
	case UniversalNotificationServiceErrorCode_ILLEGAL_ARGUMENT:
		return "ILLEGAL_ARGUMENT"
	case UniversalNotificationServiceErrorCode_TOO_MANY_REQUEST:
		return "TOO_MANY_REQUEST"
	case UniversalNotificationServiceErrorCode_AUTHENTICATION_FAILED:
		return "AUTHENTICATION_FAILED"
	case UniversalNotificationServiceErrorCode_NO_WRITE_PERMISSION:
		return "NO_WRITE_PERMISSION"
	}
	return "<UNSET>"
}

func UniversalNotificationServiceErrorCodeFromString(s string) (UniversalNotificationServiceErrorCode, error) {
	switch s {
	case "INTERNAL_ERROR":
		return UniversalNotificationServiceErrorCode_INTERNAL_ERROR, nil
	case "INVALID_KEY":
		return UniversalNotificationServiceErrorCode_INVALID_KEY, nil
	case "ILLEGAL_ARGUMENT":
		return UniversalNotificationServiceErrorCode_ILLEGAL_ARGUMENT, nil
	case "TOO_MANY_REQUEST":
		return UniversalNotificationServiceErrorCode_TOO_MANY_REQUEST, nil
	case "AUTHENTICATION_FAILED":
		return UniversalNotificationServiceErrorCode_AUTHENTICATION_FAILED, nil
	case "NO_WRITE_PERMISSION":
		return UniversalNotificationServiceErrorCode_NO_WRITE_PERMISSION, nil
	}
	return UniversalNotificationServiceErrorCode(0), fmt.Errorf("not a valid UniversalNotificationServiceErrorCode string")
}

func UniversalNotificationServiceErrorCodePtr(v UniversalNotificationServiceErrorCode) *UniversalNotificationServiceErrorCode {
	return &v
}

func (p UniversalNotificationServiceErrorCode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *UniversalNotificationServiceErrorCode) UnmarshalText(text []byte) error {
	q, err := UniversalNotificationServiceErrorCodeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type UnregistrationReason int64

const (
	UnregistrationReason_UNREGISTRATION_REASON_UNREGISTER_USER UnregistrationReason = 1
	UnregistrationReason_UNREGISTRATION_REASON_UNBIND_DEVICE   UnregistrationReason = 2
)

func (p UnregistrationReason) String() string {
	switch p {
	case UnregistrationReason_UNREGISTRATION_REASON_UNREGISTER_USER:
		return "UNREGISTRATION_REASON_UNREGISTER_USER"
	case UnregistrationReason_UNREGISTRATION_REASON_UNBIND_DEVICE:
		return "UNREGISTRATION_REASON_UNBIND_DEVICE"
	}
	return "<UNSET>"
}

func UnregistrationReasonFromString(s string) (UnregistrationReason, error) {
	switch s {
	case "UNREGISTRATION_REASON_UNREGISTER_USER":
		return UnregistrationReason_UNREGISTRATION_REASON_UNREGISTER_USER, nil
	case "UNREGISTRATION_REASON_UNBIND_DEVICE":
		return UnregistrationReason_UNREGISTRATION_REASON_UNBIND_DEVICE, nil
	}
	return UnregistrationReason(0), fmt.Errorf("not a valid UnregistrationReason string")
}

func UnregistrationReasonPtr(v UnregistrationReason) *UnregistrationReason { return &v }

func (p UnregistrationReason) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *UnregistrationReason) UnmarshalText(text []byte) error {
	q, err := UnregistrationReasonFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type VerificationMethod int64

const (
	VerificationMethod_NO_AVAILABLE    VerificationMethod = 0
	VerificationMethod_PIN_VIA_SMS     VerificationMethod = 1
	VerificationMethod_CALLERID_INDIGO VerificationMethod = 2
	VerificationMethod_PIN_VIA_TTS     VerificationMethod = 4
	VerificationMethod_SKIP            VerificationMethod = 10
)

func (p VerificationMethod) String() string {
	switch p {
	case VerificationMethod_NO_AVAILABLE:
		return "NO_AVAILABLE"
	case VerificationMethod_PIN_VIA_SMS:
		return "PIN_VIA_SMS"
	case VerificationMethod_CALLERID_INDIGO:
		return "CALLERID_INDIGO"
	case VerificationMethod_PIN_VIA_TTS:
		return "PIN_VIA_TTS"
	case VerificationMethod_SKIP:
		return "SKIP"
	}
	return "<UNSET>"
}

func VerificationMethodFromString(s string) (VerificationMethod, error) {
	switch s {
	case "NO_AVAILABLE":
		return VerificationMethod_NO_AVAILABLE, nil
	case "PIN_VIA_SMS":
		return VerificationMethod_PIN_VIA_SMS, nil
	case "CALLERID_INDIGO":
		return VerificationMethod_CALLERID_INDIGO, nil
	case "PIN_VIA_TTS":
		return VerificationMethod_PIN_VIA_TTS, nil
	case "SKIP":
		return VerificationMethod_SKIP, nil
	}
	return VerificationMethod(0), fmt.Errorf("not a valid VerificationMethod string")
}

func VerificationMethodPtr(v VerificationMethod) *VerificationMethod { return &v }

func (p VerificationMethod) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *VerificationMethod) UnmarshalText(text []byte) error {
	q, err := VerificationMethodFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type VerificationResult_ int64

const (
	VerificationResult__FAILED                            VerificationResult_ = 0
	VerificationResult__OK_NOT_REGISTERED_YET             VerificationResult_ = 1
	VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE    VerificationResult_ = 2
	VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE VerificationResult_ = 3
)

func (p VerificationResult_) String() string {
	switch p {
	case VerificationResult__FAILED:
		return "FAILED"
	case VerificationResult__OK_NOT_REGISTERED_YET:
		return "OK_NOT_REGISTERED_YET"
	case VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE:
		return "OK_REGISTERED_WITH_SAME_DEVICE"
	case VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE:
		return "OK_REGISTERED_WITH_ANOTHER_DEVICE"
	}
	return "<UNSET>"
}

func VerificationResult_FromString(s string) (VerificationResult_, error) {
	switch s {
	case "FAILED":
		return VerificationResult__FAILED, nil
	case "OK_NOT_REGISTERED_YET":
		return VerificationResult__OK_NOT_REGISTERED_YET, nil
	case "OK_REGISTERED_WITH_SAME_DEVICE":
		return VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE, nil
	case "OK_REGISTERED_WITH_ANOTHER_DEVICE":
		return VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE, nil
	}
	return VerificationResult_(0), fmt.Errorf("not a valid VerificationResult_ string")
}

func VerificationResult_Ptr(v VerificationResult_) *VerificationResult_ { return &v }

func (p VerificationResult_) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *VerificationResult_) UnmarshalText(text []byte) error {
	q, err := VerificationResult_FromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type WapInvitationType int64

const (
	WapInvitationType_REGISTRATION WapInvitationType = 1
	WapInvitationType_CHAT         WapInvitationType = 2
)

func (p WapInvitationType) String() string {
	switch p {
	case WapInvitationType_REGISTRATION:
		return "REGISTRATION"
	case WapInvitationType_CHAT:
		return "CHAT"
	}
	return "<UNSET>"
}

func WapInvitationTypeFromString(s string) (WapInvitationType, error) {
	switch s {
	case "REGISTRATION":
		return WapInvitationType_REGISTRATION, nil
	case "CHAT":
		return WapInvitationType_CHAT, nil
	}
	return WapInvitationType(0), fmt.Errorf("not a valid WapInvitationType string")
}

func WapInvitationTypePtr(v WapInvitationType) *WapInvitationType { return &v }

func (p WapInvitationType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *WapInvitationType) UnmarshalText(text []byte) error {
	q, err := WapInvitationTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type CenterSettingsType int64

const (
	CenterSettingsType_NOT_APPLICABLE      CenterSettingsType = 0
	CenterSettingsType_NOT_SET             CenterSettingsType = 1
	CenterSettingsType_SET                 CenterSettingsType = 2
	CenterSettingsType_NEED_ENFORCED_INPUT CenterSettingsType = 3
)

func (p CenterSettingsType) String() string {
	switch p {
	case CenterSettingsType_NOT_APPLICABLE:
		return "NOT_APPLICABLE"
	case CenterSettingsType_NOT_SET:
		return "NOT_SET"
	case CenterSettingsType_SET:
		return "SET"
	case CenterSettingsType_NEED_ENFORCED_INPUT:
		return "NEED_ENFORCED_INPUT"
	}
	return "<UNSET>"
}

func CenterSettingsTypeFromString(s string) (CenterSettingsType, error) {
	switch s {
	case "NOT_APPLICABLE":
		return CenterSettingsType_NOT_APPLICABLE, nil
	case "NOT_SET":
		return CenterSettingsType_NOT_SET, nil
	case "SET":
		return CenterSettingsType_SET, nil
	case "NEED_ENFORCED_INPUT":
		return CenterSettingsType_NEED_ENFORCED_INPUT, nil
	}
	return CenterSettingsType(0), fmt.Errorf("not a valid CenterSettingsType string")
}

func CenterSettingsTypePtr(v CenterSettingsType) *CenterSettingsType { return &v }

func (p CenterSettingsType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *CenterSettingsType) UnmarshalText(text []byte) error {
	q, err := CenterSettingsTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ProductBannerLinkType int64

const (
	ProductBannerLinkType_BANNER_LINK_NONE     ProductBannerLinkType = 0
	ProductBannerLinkType_BANNER_LINK_ITEM     ProductBannerLinkType = 1
	ProductBannerLinkType_BANNER_LINK_URL      ProductBannerLinkType = 2
	ProductBannerLinkType_BANNER_LINK_CATEGORY ProductBannerLinkType = 3
)

func (p ProductBannerLinkType) String() string {
	switch p {
	case ProductBannerLinkType_BANNER_LINK_NONE:
		return "BANNER_LINK_NONE"
	case ProductBannerLinkType_BANNER_LINK_ITEM:
		return "BANNER_LINK_ITEM"
	case ProductBannerLinkType_BANNER_LINK_URL:
		return "BANNER_LINK_URL"
	case ProductBannerLinkType_BANNER_LINK_CATEGORY:
		return "BANNER_LINK_CATEGORY"
	}
	return "<UNSET>"
}

func ProductBannerLinkTypeFromString(s string) (ProductBannerLinkType, error) {
	switch s {
	case "BANNER_LINK_NONE":
		return ProductBannerLinkType_BANNER_LINK_NONE, nil
	case "BANNER_LINK_ITEM":
		return ProductBannerLinkType_BANNER_LINK_ITEM, nil
	case "BANNER_LINK_URL":
		return ProductBannerLinkType_BANNER_LINK_URL, nil
	case "BANNER_LINK_CATEGORY":
		return ProductBannerLinkType_BANNER_LINK_CATEGORY, nil
	}
	return ProductBannerLinkType(0), fmt.Errorf("not a valid ProductBannerLinkType string")
}

func ProductBannerLinkTypePtr(v ProductBannerLinkType) *ProductBannerLinkType { return &v }

func (p ProductBannerLinkType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ProductBannerLinkType) UnmarshalText(text []byte) error {
	q, err := ProductBannerLinkTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ProductEventType int64

const (
	ProductEventType_NO_EVENT        ProductEventType = 0
	ProductEventType_CARRIER_ANY     ProductEventType = 65537
	ProductEventType_BUDDY_ANY       ProductEventType = 131073
	ProductEventType_INSTALL_IOS     ProductEventType = 196609
	ProductEventType_INSTALL_ANDROID ProductEventType = 196610
	ProductEventType_MISSION_ANY     ProductEventType = 262145
	ProductEventType_MUSTBUY_ANY     ProductEventType = 327681
)

func (p ProductEventType) String() string {
	switch p {
	case ProductEventType_NO_EVENT:
		return "NO_EVENT"
	case ProductEventType_CARRIER_ANY:
		return "CARRIER_ANY"
	case ProductEventType_BUDDY_ANY:
		return "BUDDY_ANY"
	case ProductEventType_INSTALL_IOS:
		return "INSTALL_IOS"
	case ProductEventType_INSTALL_ANDROID:
		return "INSTALL_ANDROID"
	case ProductEventType_MISSION_ANY:
		return "MISSION_ANY"
	case ProductEventType_MUSTBUY_ANY:
		return "MUSTBUY_ANY"
	}
	return "<UNSET>"
}

func ProductEventTypeFromString(s string) (ProductEventType, error) {
	switch s {
	case "NO_EVENT":
		return ProductEventType_NO_EVENT, nil
	case "CARRIER_ANY":
		return ProductEventType_CARRIER_ANY, nil
	case "BUDDY_ANY":
		return ProductEventType_BUDDY_ANY, nil
	case "INSTALL_IOS":
		return ProductEventType_INSTALL_IOS, nil
	case "INSTALL_ANDROID":
		return ProductEventType_INSTALL_ANDROID, nil
	case "MISSION_ANY":
		return ProductEventType_MISSION_ANY, nil
	case "MUSTBUY_ANY":
		return ProductEventType_MUSTBUY_ANY, nil
	}
	return ProductEventType(0), fmt.Errorf("not a valid ProductEventType string")
}

func ProductEventTypePtr(v ProductEventType) *ProductEventType { return &v }

func (p ProductEventType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ProductEventType) UnmarshalText(text []byte) error {
	q, err := ProductEventTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - GaSamplingRate
//  - Tmid
type AnalyticsInfo struct {
	GaSamplingRate float64 `thrift:"gaSamplingRate,1" json:"gaSamplingRate"`
	Tmid           string  `thrift:"tmid,2" json:"tmid"`
}

func NewAnalyticsInfo() *AnalyticsInfo {
	return &AnalyticsInfo{}
}

func (p *AnalyticsInfo) GetGaSamplingRate() float64 {
	return p.GaSamplingRate
}

func (p *AnalyticsInfo) GetTmid() string {
	return p.Tmid
}
func (p *AnalyticsInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalyticsInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GaSamplingRate = v
	}
	return nil
}

func (p *AnalyticsInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Tmid = v
	}
	return nil
}

func (p *AnalyticsInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AnalyticsInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalyticsInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("gaSamplingRate", thrift.DOUBLE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:gaSamplingRate: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.GaSamplingRate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.gaSamplingRate (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:gaSamplingRate: ", p), err)
	}
	return err
}

func (p *AnalyticsInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tmid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tmid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Tmid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tmid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tmid: ", p), err)
	}
	return err
}

func (p *AnalyticsInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalyticsInfo(%+v)", *p)
}

// Attributes:
//  - ChannelId
//  - LastUpdated
type ChannelIdWithLastUpdated struct {
	ChannelId   string `thrift:"channelId,1" json:"channelId"`
	LastUpdated int64  `thrift:"lastUpdated,2" json:"lastUpdated"`
}

func NewChannelIdWithLastUpdated() *ChannelIdWithLastUpdated {
	return &ChannelIdWithLastUpdated{}
}

func (p *ChannelIdWithLastUpdated) GetChannelId() string {
	return p.ChannelId
}

func (p *ChannelIdWithLastUpdated) GetLastUpdated() int64 {
	return p.LastUpdated
}
func (p *ChannelIdWithLastUpdated) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelIdWithLastUpdated) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *ChannelIdWithLastUpdated) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LastUpdated = v
	}
	return nil
}

func (p *ChannelIdWithLastUpdated) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChannelIdWithLastUpdated"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelIdWithLastUpdated) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err)
	}
	return err
}

func (p *ChannelIdWithLastUpdated) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastUpdated", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastUpdated: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LastUpdated)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastUpdated (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastUpdated: ", p), err)
	}
	return err
}

func (p *ChannelIdWithLastUpdated) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelIdWithLastUpdated(%+v)", *p)
}

// Attributes:
//  - Name
type ChannelProvider struct {
	Name string `thrift:"name,1" json:"name"`
}

func NewChannelProvider() *ChannelProvider {
	return &ChannelProvider{}
}

func (p *ChannelProvider) GetName() string {
	return p.Name
}
func (p *ChannelProvider) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelProvider) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *ChannelProvider) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChannelProvider"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelProvider) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *ChannelProvider) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelProvider(%+v)", *p)
}

// Attributes:
//  - Host
//  - Removed
type ChannelDomain struct {
	Host    string `thrift:"host,1" json:"host"`
	Removed bool   `thrift:"removed,2" json:"removed"`
}

func NewChannelDomain() *ChannelDomain {
	return &ChannelDomain{}
}

func (p *ChannelDomain) GetHost() string {
	return p.Host
}

func (p *ChannelDomain) GetRemoved() bool {
	return p.Removed
}
func (p *ChannelDomain) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelDomain) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Host = v
	}
	return nil
}

func (p *ChannelDomain) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Removed = v
	}
	return nil
}

func (p *ChannelDomain) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChannelDomain"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelDomain) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("host", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err)
	}
	if err := oprot.WriteString(string(p.Host)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.host (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err)
	}
	return err
}

func (p *ChannelDomain) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("removed", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:removed: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Removed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.removed (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:removed: ", p), err)
	}
	return err
}

func (p *ChannelDomain) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelDomain(%+v)", *p)
}

// Attributes:
//  - ChannelDomains
//  - Revision
type ChannelDomains struct {
	ChannelDomains []*ChannelDomain `thrift:"channelDomains,1" json:"channelDomains"`
	Revision       int64            `thrift:"revision,2" json:"revision"`
}

func NewChannelDomains() *ChannelDomains {
	return &ChannelDomains{}
}

func (p *ChannelDomains) GetChannelDomains() []*ChannelDomain {
	return p.ChannelDomains
}

func (p *ChannelDomains) GetRevision() int64 {
	return p.Revision
}
func (p *ChannelDomains) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelDomains) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ChannelDomain, 0, size)
	p.ChannelDomains = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &ChannelDomain{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.ChannelDomains = append(p.ChannelDomains, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ChannelDomains) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Revision = v
	}
	return nil
}

func (p *ChannelDomains) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChannelDomains"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelDomains) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelDomains", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelDomains: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ChannelDomains)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ChannelDomains {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelDomains: ", p), err)
	}
	return err
}

func (p *ChannelDomains) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("revision", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:revision: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Revision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.revision (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:revision: ", p), err)
	}
	return err
}

func (p *ChannelDomains) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelDomains(%+v)", *p)
}

// Attributes:
//  - ChannelId
//  - Name
//  - EntryPageUrl
//  - DescriptionText
//  - Provider
//  - PublicType
//  - IconImage
//  - Permissions
//  - IconThumbnailImage
//  - ChannelConfigurations
//  - LcsAllApiUsable
//  - ChannelDomains
//  - UpdatedTimestamp
type ChannelInfo struct {
	ChannelId string `thrift:"channelId,1" json:"channelId"`
	// unused field # 2
	Name            string           `thrift:"name,3" json:"name"`
	EntryPageUrl    string           `thrift:"entryPageUrl,4" json:"entryPageUrl"`
	DescriptionText string           `thrift:"descriptionText,5" json:"descriptionText"`
	Provider        *ChannelProvider `thrift:"provider,6" json:"provider"`
	PublicType      PublicType       `thrift:"publicType,7" json:"publicType"`
	IconImage       string           `thrift:"iconImage,8" json:"iconImage"`
	Permissions     []string         `thrift:"permissions,9" json:"permissions"`
	// unused field # 10
	IconThumbnailImage    string                 `thrift:"iconThumbnailImage,11" json:"iconThumbnailImage"`
	ChannelConfigurations []ChannelConfiguration `thrift:"channelConfigurations,12" json:"channelConfigurations"`
	LcsAllApiUsable       bool                   `thrift:"lcsAllApiUsable,13" json:"lcsAllApiUsable"`
	// unused field # 14
	ChannelDomains   []*ChannelDomain `thrift:"channelDomains,15" json:"channelDomains"`
	UpdatedTimestamp int64            `thrift:"updatedTimestamp,16" json:"updatedTimestamp"`
}

func NewChannelInfo() *ChannelInfo {
	return &ChannelInfo{}
}

func (p *ChannelInfo) GetChannelId() string {
	return p.ChannelId
}

func (p *ChannelInfo) GetName() string {
	return p.Name
}

func (p *ChannelInfo) GetEntryPageUrl() string {
	return p.EntryPageUrl
}

func (p *ChannelInfo) GetDescriptionText() string {
	return p.DescriptionText
}

var ChannelInfo_Provider_DEFAULT *ChannelProvider

func (p *ChannelInfo) GetProvider() *ChannelProvider {
	if !p.IsSetProvider() {
		return ChannelInfo_Provider_DEFAULT
	}
	return p.Provider
}

func (p *ChannelInfo) GetPublicType() PublicType {
	return p.PublicType
}

func (p *ChannelInfo) GetIconImage() string {
	return p.IconImage
}

func (p *ChannelInfo) GetPermissions() []string {
	return p.Permissions
}

func (p *ChannelInfo) GetIconThumbnailImage() string {
	return p.IconThumbnailImage
}

func (p *ChannelInfo) GetChannelConfigurations() []ChannelConfiguration {
	return p.ChannelConfigurations
}

func (p *ChannelInfo) GetLcsAllApiUsable() bool {
	return p.LcsAllApiUsable
}

func (p *ChannelInfo) GetChannelDomains() []*ChannelDomain {
	return p.ChannelDomains
}

func (p *ChannelInfo) GetUpdatedTimestamp() int64 {
	return p.UpdatedTimestamp
}
func (p *ChannelInfo) IsSetProvider() bool {
	return p.Provider != nil
}

func (p *ChannelInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *ChannelInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *ChannelInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.EntryPageUrl = v
	}
	return nil
}

func (p *ChannelInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.DescriptionText = v
	}
	return nil
}

func (p *ChannelInfo) readField6(iprot thrift.TProtocol) error {
	p.Provider = &ChannelProvider{}
	if err := p.Provider.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Provider), err)
	}
	return nil
}

func (p *ChannelInfo) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := PublicType(v)
		p.PublicType = temp
	}
	return nil
}

func (p *ChannelInfo) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.IconImage = v
	}
	return nil
}

func (p *ChannelInfo) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Permissions = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.Permissions = append(p.Permissions, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ChannelInfo) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.IconThumbnailImage = v
	}
	return nil
}

func (p *ChannelInfo) readField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]ChannelConfiguration, 0, size)
	p.ChannelConfigurations = tSlice
	for i := 0; i < size; i++ {
		var _elem2 ChannelConfiguration
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := ChannelConfiguration(v)
			_elem2 = temp
		}
		p.ChannelConfigurations = append(p.ChannelConfigurations, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ChannelInfo) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.LcsAllApiUsable = v
	}
	return nil
}

func (p *ChannelInfo) readField15(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ChannelDomain, 0, size)
	p.ChannelDomains = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &ChannelDomain{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.ChannelDomains = append(p.ChannelDomains, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ChannelInfo) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.UpdatedTimestamp = v
	}
	return nil
}

func (p *ChannelInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChannelInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err)
	}
	return err
}

func (p *ChannelInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err)
	}
	return err
}

func (p *ChannelInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("entryPageUrl", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:entryPageUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.EntryPageUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.entryPageUrl (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:entryPageUrl: ", p), err)
	}
	return err
}

func (p *ChannelInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("descriptionText", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:descriptionText: ", p), err)
	}
	if err := oprot.WriteString(string(p.DescriptionText)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.descriptionText (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:descriptionText: ", p), err)
	}
	return err
}

func (p *ChannelInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("provider", thrift.STRUCT, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:provider: ", p), err)
	}
	if err := p.Provider.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Provider), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:provider: ", p), err)
	}
	return err
}

func (p *ChannelInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("publicType", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:publicType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PublicType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.publicType (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:publicType: ", p), err)
	}
	return err
}

func (p *ChannelInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iconImage", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:iconImage: ", p), err)
	}
	if err := oprot.WriteString(string(p.IconImage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.iconImage (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:iconImage: ", p), err)
	}
	return err
}

func (p *ChannelInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("permissions", thrift.LIST, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:permissions: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Permissions)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Permissions {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:permissions: ", p), err)
	}
	return err
}

func (p *ChannelInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iconThumbnailImage", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:iconThumbnailImage: ", p), err)
	}
	if err := oprot.WriteString(string(p.IconThumbnailImage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.iconThumbnailImage (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:iconThumbnailImage: ", p), err)
	}
	return err
}

func (p *ChannelInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelConfigurations", thrift.LIST, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:channelConfigurations: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.ChannelConfigurations)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ChannelConfigurations {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:channelConfigurations: ", p), err)
	}
	return err
}

func (p *ChannelInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lcsAllApiUsable", thrift.BOOL, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:lcsAllApiUsable: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.LcsAllApiUsable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lcsAllApiUsable (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:lcsAllApiUsable: ", p), err)
	}
	return err
}

func (p *ChannelInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelDomains", thrift.LIST, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:channelDomains: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ChannelDomains)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ChannelDomains {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:channelDomains: ", p), err)
	}
	return err
}

func (p *ChannelInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updatedTimestamp", thrift.I64, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:updatedTimestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdatedTimestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updatedTimestamp (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:updatedTimestamp: ", p), err)
	}
	return err
}

func (p *ChannelInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelInfo(%+v)", *p)
}

// Attributes:
//  - ChannelInfo
//  - ApprovedAt
type ApprovedChannelInfo struct {
	ChannelInfo *ChannelInfo `thrift:"channelInfo,1" json:"channelInfo"`
	ApprovedAt  int64        `thrift:"approvedAt,2" json:"approvedAt"`
}

func NewApprovedChannelInfo() *ApprovedChannelInfo {
	return &ApprovedChannelInfo{}
}

var ApprovedChannelInfo_ChannelInfo_DEFAULT *ChannelInfo

func (p *ApprovedChannelInfo) GetChannelInfo() *ChannelInfo {
	if !p.IsSetChannelInfo() {
		return ApprovedChannelInfo_ChannelInfo_DEFAULT
	}
	return p.ChannelInfo
}

func (p *ApprovedChannelInfo) GetApprovedAt() int64 {
	return p.ApprovedAt
}
func (p *ApprovedChannelInfo) IsSetChannelInfo() bool {
	return p.ChannelInfo != nil
}

func (p *ApprovedChannelInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ApprovedChannelInfo) readField1(iprot thrift.TProtocol) error {
	p.ChannelInfo = &ChannelInfo{}
	if err := p.ChannelInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ChannelInfo), err)
	}
	return nil
}

func (p *ApprovedChannelInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ApprovedAt = v
	}
	return nil
}

func (p *ApprovedChannelInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ApprovedChannelInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ApprovedChannelInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelInfo", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelInfo: ", p), err)
	}
	if err := p.ChannelInfo.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ChannelInfo), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelInfo: ", p), err)
	}
	return err
}

func (p *ApprovedChannelInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("approvedAt", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:approvedAt: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ApprovedAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.approvedAt (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:approvedAt: ", p), err)
	}
	return err
}

func (p *ApprovedChannelInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApprovedChannelInfo(%+v)", *p)
}

// Attributes:
//  - ApprovedChannelInfos
//  - Revision
type ApprovedChannelInfos struct {
	ApprovedChannelInfos []*ApprovedChannelInfo `thrift:"approvedChannelInfos,1" json:"approvedChannelInfos"`
	Revision             int64                  `thrift:"revision,2" json:"revision"`
}

func NewApprovedChannelInfos() *ApprovedChannelInfos {
	return &ApprovedChannelInfos{}
}

func (p *ApprovedChannelInfos) GetApprovedChannelInfos() []*ApprovedChannelInfo {
	return p.ApprovedChannelInfos
}

func (p *ApprovedChannelInfos) GetRevision() int64 {
	return p.Revision
}
func (p *ApprovedChannelInfos) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ApprovedChannelInfos) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ApprovedChannelInfo, 0, size)
	p.ApprovedChannelInfos = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &ApprovedChannelInfo{}
		if err := _elem4.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
		}
		p.ApprovedChannelInfos = append(p.ApprovedChannelInfos, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ApprovedChannelInfos) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Revision = v
	}
	return nil
}

func (p *ApprovedChannelInfos) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ApprovedChannelInfos"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ApprovedChannelInfos) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("approvedChannelInfos", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:approvedChannelInfos: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ApprovedChannelInfos)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ApprovedChannelInfos {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:approvedChannelInfos: ", p), err)
	}
	return err
}

func (p *ApprovedChannelInfos) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("revision", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:revision: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Revision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.revision (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:revision: ", p), err)
	}
	return err
}

func (p *ApprovedChannelInfos) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApprovedChannelInfos(%+v)", *p)
}

// Attributes:
//  - Qrcode
//  - Verifier
type AuthQrcode struct {
	Qrcode   string `thrift:"qrcode,1" json:"qrcode"`
	Verifier string `thrift:"verifier,2" json:"verifier"`
}

func NewAuthQrcode() *AuthQrcode {
	return &AuthQrcode{}
}

func (p *AuthQrcode) GetQrcode() string {
	return p.Qrcode
}

func (p *AuthQrcode) GetVerifier() string {
	return p.Verifier
}
func (p *AuthQrcode) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuthQrcode) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Qrcode = v
	}
	return nil
}

func (p *AuthQrcode) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *AuthQrcode) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AuthQrcode"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuthQrcode) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("qrcode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:qrcode: ", p), err)
	}
	if err := oprot.WriteString(string(p.Qrcode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.qrcode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:qrcode: ", p), err)
	}
	return err
}

func (p *AuthQrcode) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:verifier: ", p), err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.verifier (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:verifier: ", p), err)
	}
	return err
}

func (p *AuthQrcode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthQrcode(%+v)", *p)
}

// Attributes:
//  - Mid
//  - CreatedTime
//  - Type
//  - Status
//  - Relation
//  - DisplayName
//  - Phoneticname
//  - PictureStatus
//  - ThumbnailUrl
//  - StatusMessage
//  - DisplayNameOverridden
//  - FavoriteTime
//  - CapableVoiceCall
//  - CapableVideoCall
//  - CapableMyhome
//  - CapableBuddy
//  - Attributes
//  - Setting
//  - PicturePath
//  - RecommendParams
//  - FriendRequestStatus
//  - MusicProfile
//  - VideoProfile
type Contact struct {
	Mid         string `thrift:"mid,1" json:"mid"`
	CreatedTime int64  `thrift:"createdTime,2" json:"createdTime"`
	// unused fields # 3 to 9
	Type   ContactType   `thrift:"type,10" json:"type"`
	Status ContactStatus `thrift:"status,11" json:"status"`
	// unused fields # 12 to 20
	Relation              ContactRelation `thrift:"relation,21" json:"relation"`
	DisplayName           string          `thrift:"displayName,22" json:"displayName"`
	Phoneticname          string          `thrift:"phoneticname,23" json:"phoneticname"`
	PictureStatus         string          `thrift:"pictureStatus,24" json:"pictureStatus"`
	ThumbnailUrl          string          `thrift:"thumbnailUrl,25" json:"thumbnailUrl"`
	StatusMessage         string          `thrift:"statusMessage,26" json:"statusMessage"`
	DisplayNameOverridden string          `thrift:"displayNameOverridden,27" json:"displayNameOverridden"`
	FavoriteTime          int64           `thrift:"favoriteTime,28" json:"favoriteTime"`
	// unused fields # 29 to 30
	CapableVoiceCall    bool   `thrift:"capableVoiceCall,31" json:"capableVoiceCall"`
	CapableVideoCall    bool   `thrift:"capableVideoCall,32" json:"capableVideoCall"`
	CapableMyhome       bool   `thrift:"capableMyhome,33" json:"capableMyhome"`
	CapableBuddy        bool   `thrift:"capableBuddy,34" json:"capableBuddy"`
	Attributes          int32  `thrift:"attributes,35" json:"attributes"`
	Setting             int64  `thrift:"setting,36" json:"setting"`
	PicturePath         string `thrift:"picturePath,37" json:"picturePath"`
	RecommendParams     string `thrift:"recommendParams,38" json:"recommendParams"`
	FriendRequestStatus int32  `thrift:"friendRequestStatus,39" json:"friendRequestStatus"`
	MusicProfile        string `thrift:"musicProfile,40" json:"musicProfile"`
	// unused field # 41
	VideoProfile string `thrift:"videoProfile,42" json:"videoProfile"`
}

func NewContact() *Contact {
	return &Contact{}
}

func (p *Contact) GetMid() string {
	return p.Mid
}

func (p *Contact) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Contact) GetType() ContactType {
	return p.Type
}

func (p *Contact) GetStatus() ContactStatus {
	return p.Status
}

func (p *Contact) GetRelation() ContactRelation {
	return p.Relation
}

func (p *Contact) GetDisplayName() string {
	return p.DisplayName
}

func (p *Contact) GetPhoneticname() string {
	return p.Phoneticname
}

func (p *Contact) GetPictureStatus() string {
	return p.PictureStatus
}

func (p *Contact) GetThumbnailUrl() string {
	return p.ThumbnailUrl
}

func (p *Contact) GetStatusMessage() string {
	return p.StatusMessage
}

func (p *Contact) GetDisplayNameOverridden() string {
	return p.DisplayNameOverridden
}

func (p *Contact) GetFavoriteTime() int64 {
	return p.FavoriteTime
}

func (p *Contact) GetCapableVoiceCall() bool {
	return p.CapableVoiceCall
}

func (p *Contact) GetCapableVideoCall() bool {
	return p.CapableVideoCall
}

func (p *Contact) GetCapableMyhome() bool {
	return p.CapableMyhome
}

func (p *Contact) GetCapableBuddy() bool {
	return p.CapableBuddy
}

func (p *Contact) GetAttributes() int32 {
	return p.Attributes
}

func (p *Contact) GetSetting() int64 {
	return p.Setting
}

func (p *Contact) GetPicturePath() string {
	return p.PicturePath
}

func (p *Contact) GetRecommendParams() string {
	return p.RecommendParams
}

func (p *Contact) GetFriendRequestStatus() int32 {
	return p.FriendRequestStatus
}

func (p *Contact) GetMusicProfile() string {
	return p.MusicProfile
}

func (p *Contact) GetVideoProfile() string {
	return p.VideoProfile
}
func (p *Contact) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.readField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.readField26(iprot); err != nil {
				return err
			}
		case 27:
			if err := p.readField27(iprot); err != nil {
				return err
			}
		case 28:
			if err := p.readField28(iprot); err != nil {
				return err
			}
		case 31:
			if err := p.readField31(iprot); err != nil {
				return err
			}
		case 32:
			if err := p.readField32(iprot); err != nil {
				return err
			}
		case 33:
			if err := p.readField33(iprot); err != nil {
				return err
			}
		case 34:
			if err := p.readField34(iprot); err != nil {
				return err
			}
		case 35:
			if err := p.readField35(iprot); err != nil {
				return err
			}
		case 36:
			if err := p.readField36(iprot); err != nil {
				return err
			}
		case 37:
			if err := p.readField37(iprot); err != nil {
				return err
			}
		case 38:
			if err := p.readField38(iprot); err != nil {
				return err
			}
		case 39:
			if err := p.readField39(iprot); err != nil {
				return err
			}
		case 40:
			if err := p.readField40(iprot); err != nil {
				return err
			}
		case 42:
			if err := p.readField42(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Contact) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *Contact) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Contact) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := ContactType(v)
		p.Type = temp
	}
	return nil
}

func (p *Contact) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		temp := ContactStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *Contact) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		temp := ContactRelation(v)
		p.Relation = temp
	}
	return nil
}

func (p *Contact) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.DisplayName = v
	}
	return nil
}

func (p *Contact) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.Phoneticname = v
	}
	return nil
}

func (p *Contact) readField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.PictureStatus = v
	}
	return nil
}

func (p *Contact) readField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.ThumbnailUrl = v
	}
	return nil
}

func (p *Contact) readField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 26: ", err)
	} else {
		p.StatusMessage = v
	}
	return nil
}

func (p *Contact) readField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 27: ", err)
	} else {
		p.DisplayNameOverridden = v
	}
	return nil
}

func (p *Contact) readField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 28: ", err)
	} else {
		p.FavoriteTime = v
	}
	return nil
}

func (p *Contact) readField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 31: ", err)
	} else {
		p.CapableVoiceCall = v
	}
	return nil
}

func (p *Contact) readField32(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 32: ", err)
	} else {
		p.CapableVideoCall = v
	}
	return nil
}

func (p *Contact) readField33(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 33: ", err)
	} else {
		p.CapableMyhome = v
	}
	return nil
}

func (p *Contact) readField34(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 34: ", err)
	} else {
		p.CapableBuddy = v
	}
	return nil
}

func (p *Contact) readField35(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 35: ", err)
	} else {
		p.Attributes = v
	}
	return nil
}

func (p *Contact) readField36(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 36: ", err)
	} else {
		p.Setting = v
	}
	return nil
}

func (p *Contact) readField37(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 37: ", err)
	} else {
		p.PicturePath = v
	}
	return nil
}

func (p *Contact) readField38(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 38: ", err)
	} else {
		p.RecommendParams = v
	}
	return nil
}

func (p *Contact) readField39(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 39: ", err)
	} else {
		p.FriendRequestStatus = v
	}
	return nil
}

func (p *Contact) readField40(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 40: ", err)
	} else {
		p.MusicProfile = v
	}
	return nil
}

func (p *Contact) readField42(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 42: ", err)
	} else {
		p.VideoProfile = v
	}
	return nil
}

func (p *Contact) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Contact"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField27(oprot); err != nil {
		return err
	}
	if err := p.writeField28(oprot); err != nil {
		return err
	}
	if err := p.writeField31(oprot); err != nil {
		return err
	}
	if err := p.writeField32(oprot); err != nil {
		return err
	}
	if err := p.writeField33(oprot); err != nil {
		return err
	}
	if err := p.writeField34(oprot); err != nil {
		return err
	}
	if err := p.writeField35(oprot); err != nil {
		return err
	}
	if err := p.writeField36(oprot); err != nil {
		return err
	}
	if err := p.writeField37(oprot); err != nil {
		return err
	}
	if err := p.writeField38(oprot); err != nil {
		return err
	}
	if err := p.writeField39(oprot); err != nil {
		return err
	}
	if err := p.writeField40(oprot); err != nil {
		return err
	}
	if err := p.writeField42(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Contact) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err)
	}
	return err
}

func (p *Contact) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err)
	}
	return err
}

func (p *Contact) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:type: ", p), err)
	}
	return err
}

func (p *Contact) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:status: ", p), err)
	}
	return err
}

func (p *Contact) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("relation", thrift.I32, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:relation: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Relation)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.relation (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:relation: ", p), err)
	}
	return err
}

func (p *Contact) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:displayName: ", p), err)
	}
	if err := oprot.WriteString(string(p.DisplayName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.displayName (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:displayName: ", p), err)
	}
	return err
}

func (p *Contact) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phoneticname", thrift.STRING, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:phoneticname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Phoneticname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phoneticname (23) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:phoneticname: ", p), err)
	}
	return err
}

func (p *Contact) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pictureStatus", thrift.STRING, 24); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:pictureStatus: ", p), err)
	}
	if err := oprot.WriteString(string(p.PictureStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (24) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 24:pictureStatus: ", p), err)
	}
	return err
}

func (p *Contact) writeField25(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thumbnailUrl", thrift.STRING, 25); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:thumbnailUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.ThumbnailUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thumbnailUrl (25) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 25:thumbnailUrl: ", p), err)
	}
	return err
}

func (p *Contact) writeField26(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("statusMessage", thrift.STRING, 26); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:statusMessage: ", p), err)
	}
	if err := oprot.WriteString(string(p.StatusMessage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.statusMessage (26) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 26:statusMessage: ", p), err)
	}
	return err
}

func (p *Contact) writeField27(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayNameOverridden", thrift.STRING, 27); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:displayNameOverridden: ", p), err)
	}
	if err := oprot.WriteString(string(p.DisplayNameOverridden)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.displayNameOverridden (27) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 27:displayNameOverridden: ", p), err)
	}
	return err
}

func (p *Contact) writeField28(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("favoriteTime", thrift.I64, 28); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:favoriteTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FavoriteTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.favoriteTime (28) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 28:favoriteTime: ", p), err)
	}
	return err
}

func (p *Contact) writeField31(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("capableVoiceCall", thrift.BOOL, 31); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:capableVoiceCall: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.CapableVoiceCall)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.capableVoiceCall (31) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 31:capableVoiceCall: ", p), err)
	}
	return err
}

func (p *Contact) writeField32(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("capableVideoCall", thrift.BOOL, 32); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:capableVideoCall: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.CapableVideoCall)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.capableVideoCall (32) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 32:capableVideoCall: ", p), err)
	}
	return err
}

func (p *Contact) writeField33(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("capableMyhome", thrift.BOOL, 33); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:capableMyhome: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.CapableMyhome)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.capableMyhome (33) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 33:capableMyhome: ", p), err)
	}
	return err
}

func (p *Contact) writeField34(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("capableBuddy", thrift.BOOL, 34); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:capableBuddy: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.CapableBuddy)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.capableBuddy (34) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 34:capableBuddy: ", p), err)
	}
	return err
}

func (p *Contact) writeField35(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.I32, 35); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:attributes: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Attributes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.attributes (35) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 35:attributes: ", p), err)
	}
	return err
}

func (p *Contact) writeField36(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("setting", thrift.I64, 36); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:setting: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Setting)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.setting (36) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 36:setting: ", p), err)
	}
	return err
}

func (p *Contact) writeField37(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 37); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:picturePath: ", p), err)
	}
	if err := oprot.WriteString(string(p.PicturePath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.picturePath (37) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 37:picturePath: ", p), err)
	}
	return err
}

func (p *Contact) writeField38(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recommendParams", thrift.STRING, 38); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:recommendParams: ", p), err)
	}
	if err := oprot.WriteString(string(p.RecommendParams)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.recommendParams (38) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 38:recommendParams: ", p), err)
	}
	return err
}

func (p *Contact) writeField39(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("friendRequestStatus", thrift.I32, 39); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:friendRequestStatus: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FriendRequestStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.friendRequestStatus (39) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 39:friendRequestStatus: ", p), err)
	}
	return err
}

func (p *Contact) writeField40(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("musicProfile", thrift.STRING, 40); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:musicProfile: ", p), err)
	}
	if err := oprot.WriteString(string(p.MusicProfile)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.musicProfile (40) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 40:musicProfile: ", p), err)
	}
	return err
}

func (p *Contact) writeField42(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("videoProfile", thrift.STRING, 42); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:videoProfile: ", p), err)
	}
	if err := oprot.WriteString(string(p.VideoProfile)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.videoProfile (42) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 42:videoProfile: ", p), err)
	}
	return err
}

func (p *Contact) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Contact(%+v)", *p)
}

// Attributes:
//  - Title
//  - Address
//  - Latitude
//  - Longitude
//  - Phone
type Location struct {
	Title     string  `thrift:"title,1" json:"title"`
	Address   string  `thrift:"address,2" json:"address"`
	Latitude  float64 `thrift:"latitude,3" json:"latitude"`
	Longitude float64 `thrift:"longitude,4" json:"longitude"`
	Phone     string  `thrift:"phone,5" json:"phone"`
}

func NewLocation() *Location {
	return &Location{}
}

func (p *Location) GetTitle() string {
	return p.Title
}

func (p *Location) GetAddress() string {
	return p.Address
}

func (p *Location) GetLatitude() float64 {
	return p.Latitude
}

func (p *Location) GetLongitude() float64 {
	return p.Longitude
}

func (p *Location) GetPhone() string {
	return p.Phone
}
func (p *Location) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Location) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *Location) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Address = v
	}
	return nil
}

func (p *Location) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Latitude = v
	}
	return nil
}

func (p *Location) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Longitude = v
	}
	return nil
}

func (p *Location) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *Location) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Location"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Location) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:title: ", p), err)
	}
	return err
}

func (p *Location) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("address", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:address: ", p), err)
	}
	if err := oprot.WriteString(string(p.Address)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.address (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:address: ", p), err)
	}
	return err
}

func (p *Location) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:latitude: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Latitude)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.latitude (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:latitude: ", p), err)
	}
	return err
}

func (p *Location) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:longitude: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Longitude)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.longitude (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:longitude: ", p), err)
	}
	return err
}

func (p *Location) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:phone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phone (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:phone: ", p), err)
	}
	return err
}

func (p *Location) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Location(%+v)", *p)
}

// Attributes:
//  - Index
//  - ForceUpdate
//  - Title
//  - Text
//  - CreatedTime
//  - PictureUrl
//  - ThumbnailUrl
type Announcement struct {
	Index int32 `thrift:"index,1" json:"index"`
	// unused fields # 2 to 9
	ForceUpdate  bool   `thrift:"forceUpdate,10" json:"forceUpdate"`
	Title        string `thrift:"title,11" json:"title"`
	Text         string `thrift:"text,12" json:"text"`
	CreatedTime  int64  `thrift:"createdTime,13" json:"createdTime"`
	PictureUrl   string `thrift:"pictureUrl,14" json:"pictureUrl"`
	ThumbnailUrl string `thrift:"thumbnailUrl,15" json:"thumbnailUrl"`
}

func NewAnnouncement() *Announcement {
	return &Announcement{}
}

func (p *Announcement) GetIndex() int32 {
	return p.Index
}

func (p *Announcement) GetForceUpdate() bool {
	return p.ForceUpdate
}

func (p *Announcement) GetTitle() string {
	return p.Title
}

func (p *Announcement) GetText() string {
	return p.Text
}

func (p *Announcement) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Announcement) GetPictureUrl() string {
	return p.PictureUrl
}

func (p *Announcement) GetThumbnailUrl() string {
	return p.ThumbnailUrl
}
func (p *Announcement) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Announcement) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Index = v
	}
	return nil
}

func (p *Announcement) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.ForceUpdate = v
	}
	return nil
}

func (p *Announcement) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *Announcement) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Text = v
	}
	return nil
}

func (p *Announcement) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Announcement) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.PictureUrl = v
	}
	return nil
}

func (p *Announcement) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.ThumbnailUrl = v
	}
	return nil
}

func (p *Announcement) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Announcement"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Announcement) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:index: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Index)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.index (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:index: ", p), err)
	}
	return err
}

func (p *Announcement) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("forceUpdate", thrift.BOOL, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:forceUpdate: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.ForceUpdate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.forceUpdate (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:forceUpdate: ", p), err)
	}
	return err
}

func (p *Announcement) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:title: ", p), err)
	}
	return err
}

func (p *Announcement) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("text", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:text: ", p), err)
	}
	if err := oprot.WriteString(string(p.Text)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.text (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:text: ", p), err)
	}
	return err
}

func (p *Announcement) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:createdTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createdTime (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:createdTime: ", p), err)
	}
	return err
}

func (p *Announcement) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pictureUrl", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:pictureUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.PictureUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pictureUrl (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:pictureUrl: ", p), err)
	}
	return err
}

func (p *Announcement) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thumbnailUrl", thrift.STRING, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:thumbnailUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.ThumbnailUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thumbnailUrl (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:thumbnailUrl: ", p), err)
	}
	return err
}

func (p *Announcement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Announcement(%+v)", *p)
}

// Attributes:
//  - Code
//  - Reason
//  - ParameterMap
type ChannelException struct {
	Code         ChannelErrorCode  `thrift:"code,1" json:"code"`
	Reason       string            `thrift:"reason,2" json:"reason"`
	ParameterMap map[string]string `thrift:"parameterMap,3" json:"parameterMap"`
}

func NewChannelException() *ChannelException {
	return &ChannelException{}
}

func (p *ChannelException) GetCode() ChannelErrorCode {
	return p.Code
}

func (p *ChannelException) GetReason() string {
	return p.Reason
}

func (p *ChannelException) GetParameterMap() map[string]string {
	return p.ParameterMap
}
func (p *ChannelException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ChannelErrorCode(v)
		p.Code = temp
	}
	return nil
}

func (p *ChannelException) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Reason = v
	}
	return nil
}

func (p *ChannelException) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ParameterMap = tMap
	for i := 0; i < size; i++ {
		var _key5 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key5 = v
		}
		var _val6 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val6 = v
		}
		p.ParameterMap[_key5] = _val6
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ChannelException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChannelException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *ChannelException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reason", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reason: ", p), err)
	}
	if err := oprot.WriteString(string(p.Reason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reason (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reason: ", p), err)
	}
	return err
}

func (p *ChannelException) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parameterMap", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parameterMap: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ParameterMap)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.ParameterMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parameterMap: ", p), err)
	}
	return err
}

func (p *ChannelException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelException(%+v)", *p)
}

func (p *ChannelException) Error() string {
	return p.String()
}

// Attributes:
//  - ChannelInfos
//  - Revision
type ChannelInfos struct {
	ChannelInfos []*ChannelInfo `thrift:"channelInfos,1" json:"channelInfos"`
	Revision     int64          `thrift:"revision,2" json:"revision"`
}

func NewChannelInfos() *ChannelInfos {
	return &ChannelInfos{}
}

func (p *ChannelInfos) GetChannelInfos() []*ChannelInfo {
	return p.ChannelInfos
}

func (p *ChannelInfos) GetRevision() int64 {
	return p.Revision
}
func (p *ChannelInfos) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelInfos) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ChannelInfo, 0, size)
	p.ChannelInfos = tSlice
	for i := 0; i < size; i++ {
		_elem7 := &ChannelInfo{}
		if err := _elem7.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
		}
		p.ChannelInfos = append(p.ChannelInfos, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ChannelInfos) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Revision = v
	}
	return nil
}

func (p *ChannelInfos) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChannelInfos"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelInfos) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelInfos", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelInfos: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ChannelInfos)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ChannelInfos {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelInfos: ", p), err)
	}
	return err
}

func (p *ChannelInfos) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("revision", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:revision: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Revision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.revision (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:revision: ", p), err)
	}
	return err
}

func (p *ChannelInfos) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelInfos(%+v)", *p)
}

// Attributes:
//  - Revision
//  - ConfigMap
type Configurations struct {
	Revision  int64    `thrift:"revision,1" json:"revision"`
	ConfigMap []string `thrift:"configMap,2" json:"configMap"`
}

func NewConfigurations() *Configurations {
	return &Configurations{}
}

func (p *Configurations) GetRevision() int64 {
	return p.Revision
}

func (p *Configurations) GetConfigMap() []string {
	return p.ConfigMap
}
func (p *Configurations) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Configurations) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Revision = v
	}
	return nil
}

func (p *Configurations) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ConfigMap = tSlice
	for i := 0; i < size; i++ {
		var _elem8 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem8 = v
		}
		p.ConfigMap = append(p.ConfigMap, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Configurations) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Configurations"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Configurations) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("revision", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:revision: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Revision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.revision (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:revision: ", p), err)
	}
	return err
}

func (p *Configurations) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("configMap", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:configMap: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ConfigMap)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ConfigMap {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:configMap: ", p), err)
	}
	return err
}

func (p *Configurations) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Configurations(%+v)", *p)
}

// Attributes:
//  - ChannelId
//  - Name
//  - NotificationReceivable
//  - MessageReceivable
//  - ShowDefault
type ChannelNotificationSetting struct {
	ChannelId              string `thrift:"channelId,1" json:"channelId"`
	Name                   string `thrift:"name,2" json:"name"`
	NotificationReceivable bool   `thrift:"notificationReceivable,3" json:"notificationReceivable"`
	MessageReceivable      bool   `thrift:"messageReceivable,4" json:"messageReceivable"`
	ShowDefault            bool   `thrift:"showDefault,5" json:"showDefault"`
}

func NewChannelNotificationSetting() *ChannelNotificationSetting {
	return &ChannelNotificationSetting{}
}

func (p *ChannelNotificationSetting) GetChannelId() string {
	return p.ChannelId
}

func (p *ChannelNotificationSetting) GetName() string {
	return p.Name
}

func (p *ChannelNotificationSetting) GetNotificationReceivable() bool {
	return p.NotificationReceivable
}

func (p *ChannelNotificationSetting) GetMessageReceivable() bool {
	return p.MessageReceivable
}

func (p *ChannelNotificationSetting) GetShowDefault() bool {
	return p.ShowDefault
}
func (p *ChannelNotificationSetting) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelNotificationSetting) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *ChannelNotificationSetting) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *ChannelNotificationSetting) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NotificationReceivable = v
	}
	return nil
}

func (p *ChannelNotificationSetting) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MessageReceivable = v
	}
	return nil
}

func (p *ChannelNotificationSetting) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ShowDefault = v
	}
	return nil
}

func (p *ChannelNotificationSetting) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChannelNotificationSetting"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelNotificationSetting) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err)
	}
	return err
}

func (p *ChannelNotificationSetting) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *ChannelNotificationSetting) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationReceivable", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notificationReceivable: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationReceivable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationReceivable (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notificationReceivable: ", p), err)
	}
	return err
}

func (p *ChannelNotificationSetting) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageReceivable", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:messageReceivable: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.MessageReceivable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.messageReceivable (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:messageReceivable: ", p), err)
	}
	return err
}

func (p *ChannelNotificationSetting) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("showDefault", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:showDefault: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.ShowDefault)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.showDefault (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:showDefault: ", p), err)
	}
	return err
}

func (p *ChannelNotificationSetting) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelNotificationSetting(%+v)", *p)
}

// Attributes:
//  - UserExisting
//  - PhoneNumberRegistered
//  - SameDevice
type SnsIdUserStatus struct {
	UserExisting          bool `thrift:"userExisting,1" json:"userExisting"`
	PhoneNumberRegistered bool `thrift:"phoneNumberRegistered,2" json:"phoneNumberRegistered"`
	SameDevice            bool `thrift:"sameDevice,3" json:"sameDevice"`
}

func NewSnsIdUserStatus() *SnsIdUserStatus {
	return &SnsIdUserStatus{}
}

func (p *SnsIdUserStatus) GetUserExisting() bool {
	return p.UserExisting
}

func (p *SnsIdUserStatus) GetPhoneNumberRegistered() bool {
	return p.PhoneNumberRegistered
}

func (p *SnsIdUserStatus) GetSameDevice() bool {
	return p.SameDevice
}
func (p *SnsIdUserStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SnsIdUserStatus) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserExisting = v
	}
	return nil
}

func (p *SnsIdUserStatus) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PhoneNumberRegistered = v
	}
	return nil
}

func (p *SnsIdUserStatus) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SameDevice = v
	}
	return nil
}

func (p *SnsIdUserStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SnsIdUserStatus"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SnsIdUserStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userExisting", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userExisting: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.UserExisting)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userExisting (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userExisting: ", p), err)
	}
	return err
}

func (p *SnsIdUserStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phoneNumberRegistered", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phoneNumberRegistered: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PhoneNumberRegistered)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phoneNumberRegistered (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phoneNumberRegistered: ", p), err)
	}
	return err
}

func (p *SnsIdUserStatus) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sameDevice", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sameDevice: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.SameDevice)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sameDevice (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sameDevice: ", p), err)
	}
	return err
}

func (p *SnsIdUserStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SnsIdUserStatus(%+v)", *p)
}

// Attributes:
//  - SnsUserId
//  - SnsUserName
//  - Email
//  - ThumbnailUrl
type SnsProfile struct {
	SnsUserId    string `thrift:"snsUserId,1" json:"snsUserId"`
	SnsUserName  string `thrift:"snsUserName,2" json:"snsUserName"`
	Email        string `thrift:"email,3" json:"email"`
	ThumbnailUrl string `thrift:"thumbnailUrl,4" json:"thumbnailUrl"`
}

func NewSnsProfile() *SnsProfile {
	return &SnsProfile{}
}

func (p *SnsProfile) GetSnsUserId() string {
	return p.SnsUserId
}

func (p *SnsProfile) GetSnsUserName() string {
	return p.SnsUserName
}

func (p *SnsProfile) GetEmail() string {
	return p.Email
}

func (p *SnsProfile) GetThumbnailUrl() string {
	return p.ThumbnailUrl
}
func (p *SnsProfile) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SnsProfile) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SnsUserId = v
	}
	return nil
}

func (p *SnsProfile) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SnsUserName = v
	}
	return nil
}

func (p *SnsProfile) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *SnsProfile) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ThumbnailUrl = v
	}
	return nil
}

func (p *SnsProfile) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SnsProfile"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SnsProfile) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsUserId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:snsUserId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SnsUserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.snsUserId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:snsUserId: ", p), err)
	}
	return err
}

func (p *SnsProfile) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:snsUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.SnsUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.snsUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:snsUserName: ", p), err)
	}
	return err
}

func (p *SnsProfile) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:email: ", p), err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.email (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:email: ", p), err)
	}
	return err
}

func (p *SnsProfile) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thumbnailUrl", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:thumbnailUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.ThumbnailUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thumbnailUrl (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:thumbnailUrl: ", p), err)
	}
	return err
}

func (p *SnsProfile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SnsProfile(%+v)", *p)
}

// Attributes:
//  - Endpoint
//  - EndpointSsl
//  - UpdateUrl
//  - C2dmAccount
//  - NniServer
type SystemConfiguration struct {
	Endpoint    string `thrift:"endpoint,1" json:"endpoint"`
	EndpointSsl string `thrift:"endpointSsl,2" json:"endpointSsl"`
	UpdateUrl   string `thrift:"updateUrl,3" json:"updateUrl"`
	// unused fields # 4 to 10
	C2dmAccount string `thrift:"c2dmAccount,11" json:"c2dmAccount"`
	NniServer   string `thrift:"nniServer,12" json:"nniServer"`
}

func NewSystemConfiguration() *SystemConfiguration {
	return &SystemConfiguration{}
}

func (p *SystemConfiguration) GetEndpoint() string {
	return p.Endpoint
}

func (p *SystemConfiguration) GetEndpointSsl() string {
	return p.EndpointSsl
}

func (p *SystemConfiguration) GetUpdateUrl() string {
	return p.UpdateUrl
}

func (p *SystemConfiguration) GetC2dmAccount() string {
	return p.C2dmAccount
}

func (p *SystemConfiguration) GetNniServer() string {
	return p.NniServer
}
func (p *SystemConfiguration) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SystemConfiguration) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Endpoint = v
	}
	return nil
}

func (p *SystemConfiguration) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EndpointSsl = v
	}
	return nil
}

func (p *SystemConfiguration) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UpdateUrl = v
	}
	return nil
}

func (p *SystemConfiguration) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.C2dmAccount = v
	}
	return nil
}

func (p *SystemConfiguration) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.NniServer = v
	}
	return nil
}

func (p *SystemConfiguration) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SystemConfiguration"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SystemConfiguration) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endpoint", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:endpoint: ", p), err)
	}
	if err := oprot.WriteString(string(p.Endpoint)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endpoint (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:endpoint: ", p), err)
	}
	return err
}

func (p *SystemConfiguration) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endpointSsl", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:endpointSsl: ", p), err)
	}
	if err := oprot.WriteString(string(p.EndpointSsl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endpointSsl (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:endpointSsl: ", p), err)
	}
	return err
}

func (p *SystemConfiguration) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateUrl", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:updateUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.UpdateUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updateUrl (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:updateUrl: ", p), err)
	}
	return err
}

func (p *SystemConfiguration) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("c2dmAccount", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:c2dmAccount: ", p), err)
	}
	if err := oprot.WriteString(string(p.C2dmAccount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.c2dmAccount (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:c2dmAccount: ", p), err)
	}
	return err
}

func (p *SystemConfiguration) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nniServer", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:nniServer: ", p), err)
	}
	if err := oprot.WriteString(string(p.NniServer)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nniServer (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:nniServer: ", p), err)
	}
	return err
}

func (p *SystemConfiguration) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemConfiguration(%+v)", *p)
}

// Attributes:
//  - ChannelInfos
//  - ChannelDomains
//  - Revision
//  - Expires
type ChannelSyncDatas struct {
	ChannelInfos   []*ChannelInfo   `thrift:"channelInfos,1" json:"channelInfos"`
	ChannelDomains []*ChannelDomain `thrift:"channelDomains,2" json:"channelDomains"`
	Revision       int64            `thrift:"revision,3" json:"revision"`
	Expires        int64            `thrift:"expires,4" json:"expires"`
}

func NewChannelSyncDatas() *ChannelSyncDatas {
	return &ChannelSyncDatas{}
}

func (p *ChannelSyncDatas) GetChannelInfos() []*ChannelInfo {
	return p.ChannelInfos
}

func (p *ChannelSyncDatas) GetChannelDomains() []*ChannelDomain {
	return p.ChannelDomains
}

func (p *ChannelSyncDatas) GetRevision() int64 {
	return p.Revision
}

func (p *ChannelSyncDatas) GetExpires() int64 {
	return p.Expires
}
func (p *ChannelSyncDatas) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelSyncDatas) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ChannelInfo, 0, size)
	p.ChannelInfos = tSlice
	for i := 0; i < size; i++ {
		_elem9 := &ChannelInfo{}
		if err := _elem9.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
		}
		p.ChannelInfos = append(p.ChannelInfos, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ChannelSyncDatas) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ChannelDomain, 0, size)
	p.ChannelDomains = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &ChannelDomain{}
		if err := _elem10.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
		}
		p.ChannelDomains = append(p.ChannelDomains, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ChannelSyncDatas) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Revision = v
	}
	return nil
}

func (p *ChannelSyncDatas) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Expires = v
	}
	return nil
}

func (p *ChannelSyncDatas) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChannelSyncDatas"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelSyncDatas) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelInfos", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelInfos: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ChannelInfos)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ChannelInfos {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelInfos: ", p), err)
	}
	return err
}

func (p *ChannelSyncDatas) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelDomains", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:channelDomains: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ChannelDomains)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ChannelDomains {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:channelDomains: ", p), err)
	}
	return err
}

func (p *ChannelSyncDatas) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("revision", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:revision: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Revision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.revision (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:revision: ", p), err)
	}
	return err
}

func (p *ChannelSyncDatas) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expires", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:expires: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Expires)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.expires (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:expires: ", p), err)
	}
	return err
}

func (p *ChannelSyncDatas) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelSyncDatas(%+v)", *p)
}

// Attributes:
//  - Token
//  - ObsToken
//  - Expiration
//  - RefreshToken
//  - ChannelAccessToken
type ChannelToken struct {
	Token              string `thrift:"token,1" json:"token"`
	ObsToken           string `thrift:"obsToken,2" json:"obsToken"`
	Expiration         int64  `thrift:"expiration,3" json:"expiration"`
	RefreshToken       string `thrift:"refreshToken,4" json:"refreshToken"`
	ChannelAccessToken string `thrift:"channelAccessToken,5" json:"channelAccessToken"`
}

func NewChannelToken() *ChannelToken {
	return &ChannelToken{}
}

func (p *ChannelToken) GetToken() string {
	return p.Token
}

func (p *ChannelToken) GetObsToken() string {
	return p.ObsToken
}

func (p *ChannelToken) GetExpiration() int64 {
	return p.Expiration
}

func (p *ChannelToken) GetRefreshToken() string {
	return p.RefreshToken
}

func (p *ChannelToken) GetChannelAccessToken() string {
	return p.ChannelAccessToken
}
func (p *ChannelToken) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelToken) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *ChannelToken) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ObsToken = v
	}
	return nil
}

func (p *ChannelToken) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Expiration = v
	}
	return nil
}

func (p *ChannelToken) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.RefreshToken = v
	}
	return nil
}

func (p *ChannelToken) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ChannelAccessToken = v
	}
	return nil
}

func (p *ChannelToken) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChannelToken"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelToken) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err)
	}
	return err
}

func (p *ChannelToken) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("obsToken", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:obsToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.ObsToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.obsToken (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:obsToken: ", p), err)
	}
	return err
}

func (p *ChannelToken) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expiration", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expiration: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Expiration)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.expiration (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expiration: ", p), err)
	}
	return err
}

func (p *ChannelToken) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("refreshToken", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:refreshToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.RefreshToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.refreshToken (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:refreshToken: ", p), err)
	}
	return err
}

func (p *ChannelToken) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelAccessToken", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:channelAccessToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChannelAccessToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.channelAccessToken (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:channelAccessToken: ", p), err)
	}
	return err
}

func (p *ChannelToken) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelToken(%+v)", *p)
}

// Attributes:
//  - UnapprovedMessageReceivable
type ChannelSettings struct {
	UnapprovedMessageReceivable bool `thrift:"unapprovedMessageReceivable,1" json:"unapprovedMessageReceivable"`
}

func NewChannelSettings() *ChannelSettings {
	return &ChannelSettings{}
}

func (p *ChannelSettings) GetUnapprovedMessageReceivable() bool {
	return p.UnapprovedMessageReceivable
}
func (p *ChannelSettings) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelSettings) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UnapprovedMessageReceivable = v
	}
	return nil
}

func (p *ChannelSettings) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChannelSettings"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelSettings) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unapprovedMessageReceivable", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:unapprovedMessageReceivable: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.UnapprovedMessageReceivable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.unapprovedMessageReceivable (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:unapprovedMessageReceivable: ", p), err)
	}
	return err
}

func (p *ChannelSettings) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelSettings(%+v)", *p)
}

// Attributes:
//  - Mid
//  - CreatedTime
//  - ModifiedTime
//  - Status
//  - Settings
//  - DisplayNameOverridden
type CompactContact struct {
	Mid                   string        `thrift:"mid,1" json:"mid"`
	CreatedTime           int64         `thrift:"createdTime,2" json:"createdTime"`
	ModifiedTime          int64         `thrift:"modifiedTime,3" json:"modifiedTime"`
	Status                ContactStatus `thrift:"status,4" json:"status"`
	Settings              int64         `thrift:"settings,5" json:"settings"`
	DisplayNameOverridden string        `thrift:"displayNameOverridden,6" json:"displayNameOverridden"`
}

func NewCompactContact() *CompactContact {
	return &CompactContact{}
}

func (p *CompactContact) GetMid() string {
	return p.Mid
}

func (p *CompactContact) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *CompactContact) GetModifiedTime() int64 {
	return p.ModifiedTime
}

func (p *CompactContact) GetStatus() ContactStatus {
	return p.Status
}

func (p *CompactContact) GetSettings() int64 {
	return p.Settings
}

func (p *CompactContact) GetDisplayNameOverridden() string {
	return p.DisplayNameOverridden
}
func (p *CompactContact) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CompactContact) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *CompactContact) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *CompactContact) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ModifiedTime = v
	}
	return nil
}

func (p *CompactContact) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := ContactStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *CompactContact) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Settings = v
	}
	return nil
}

func (p *CompactContact) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.DisplayNameOverridden = v
	}
	return nil
}

func (p *CompactContact) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CompactContact"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CompactContact) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err)
	}
	return err
}

func (p *CompactContact) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err)
	}
	return err
}

func (p *CompactContact) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("modifiedTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:modifiedTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ModifiedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.modifiedTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:modifiedTime: ", p), err)
	}
	return err
}

func (p *CompactContact) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err)
	}
	return err
}

func (p *CompactContact) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("settings", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:settings: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Settings)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.settings (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:settings: ", p), err)
	}
	return err
}

func (p *CompactContact) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayNameOverridden", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:displayNameOverridden: ", p), err)
	}
	if err := oprot.WriteString(string(p.DisplayNameOverridden)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.displayNameOverridden (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:displayNameOverridden: ", p), err)
	}
	return err
}

func (p *CompactContact) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompactContact(%+v)", *p)
}

// Attributes:
//  - Type
//  - Luid
//  - Phones
//  - Emails
//  - Userids
type ContactModification struct {
	Type ModificationType `thrift:"type,1" json:"type"`
	Luid string           `thrift:"luid,2" json:"luid"`
	// unused fields # 3 to 10
	Phones  []string `thrift:"phones,11" json:"phones"`
	Emails  []string `thrift:"emails,12" json:"emails"`
	Userids []string `thrift:"userids,13" json:"userids"`
}

func NewContactModification() *ContactModification {
	return &ContactModification{}
}

func (p *ContactModification) GetType() ModificationType {
	return p.Type
}

func (p *ContactModification) GetLuid() string {
	return p.Luid
}

func (p *ContactModification) GetPhones() []string {
	return p.Phones
}

func (p *ContactModification) GetEmails() []string {
	return p.Emails
}

func (p *ContactModification) GetUserids() []string {
	return p.Userids
}
func (p *ContactModification) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ContactModification) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ModificationType(v)
		p.Type = temp
	}
	return nil
}

func (p *ContactModification) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Luid = v
	}
	return nil
}

func (p *ContactModification) readField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Phones = tSlice
	for i := 0; i < size; i++ {
		var _elem11 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem11 = v
		}
		p.Phones = append(p.Phones, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ContactModification) readField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Emails = tSlice
	for i := 0; i < size; i++ {
		var _elem12 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem12 = v
		}
		p.Emails = append(p.Emails, _elem12)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ContactModification) readField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Userids = tSlice
	for i := 0; i < size; i++ {
		var _elem13 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem13 = v
		}
		p.Userids = append(p.Userids, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ContactModification) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContactModification"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContactModification) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *ContactModification) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("luid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:luid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Luid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.luid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:luid: ", p), err)
	}
	return err
}

func (p *ContactModification) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phones", thrift.LIST, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:phones: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Phones)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Phones {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:phones: ", p), err)
	}
	return err
}

func (p *ContactModification) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("emails", thrift.LIST, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:emails: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Emails)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Emails {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:emails: ", p), err)
	}
	return err
}

func (p *ContactModification) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userids", thrift.LIST, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:userids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Userids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Userids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:userids: ", p), err)
	}
	return err
}

func (p *ContactModification) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContactModification(%+v)", *p)
}

// Attributes:
//  - Contact
//  - Luid
//  - ContactType
//  - ContactKey
type ContactRegistration struct {
	Contact *Contact `thrift:"contact,1" json:"contact"`
	// unused fields # 2 to 9
	Luid        string      `thrift:"luid,10" json:"luid"`
	ContactType ContactType `thrift:"contactType,11" json:"contactType"`
	ContactKey  string      `thrift:"contactKey,12" json:"contactKey"`
}

func NewContactRegistration() *ContactRegistration {
	return &ContactRegistration{}
}

var ContactRegistration_Contact_DEFAULT *Contact

func (p *ContactRegistration) GetContact() *Contact {
	if !p.IsSetContact() {
		return ContactRegistration_Contact_DEFAULT
	}
	return p.Contact
}

func (p *ContactRegistration) GetLuid() string {
	return p.Luid
}

func (p *ContactRegistration) GetContactType() ContactType {
	return p.ContactType
}

func (p *ContactRegistration) GetContactKey() string {
	return p.ContactKey
}
func (p *ContactRegistration) IsSetContact() bool {
	return p.Contact != nil
}

func (p *ContactRegistration) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ContactRegistration) readField1(iprot thrift.TProtocol) error {
	p.Contact = &Contact{}
	if err := p.Contact.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contact), err)
	}
	return nil
}

func (p *ContactRegistration) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Luid = v
	}
	return nil
}

func (p *ContactRegistration) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		temp := ContactType(v)
		p.ContactType = temp
	}
	return nil
}

func (p *ContactRegistration) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.ContactKey = v
	}
	return nil
}

func (p *ContactRegistration) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContactRegistration"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContactRegistration) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contact", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:contact: ", p), err)
	}
	if err := p.Contact.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contact), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:contact: ", p), err)
	}
	return err
}

func (p *ContactRegistration) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("luid", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:luid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Luid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.luid (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:luid: ", p), err)
	}
	return err
}

func (p *ContactRegistration) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactType", thrift.I32, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:contactType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ContactType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.contactType (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:contactType: ", p), err)
	}
	return err
}

func (p *ContactRegistration) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactKey", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:contactKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.ContactKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.contactKey (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:contactKey: ", p), err)
	}
	return err
}

func (p *ContactRegistration) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContactRegistration(%+v)", *p)
}

// Attributes:
//  - Mid
//  - Exists
//  - Contact
type ContactReport struct {
	Mid     string   `thrift:"mid,1" json:"mid"`
	Exists  bool     `thrift:"exists,2" json:"exists"`
	Contact *Contact `thrift:"contact,3" json:"contact"`
}

func NewContactReport() *ContactReport {
	return &ContactReport{}
}

func (p *ContactReport) GetMid() string {
	return p.Mid
}

func (p *ContactReport) GetExists() bool {
	return p.Exists
}

var ContactReport_Contact_DEFAULT *Contact

func (p *ContactReport) GetContact() *Contact {
	if !p.IsSetContact() {
		return ContactReport_Contact_DEFAULT
	}
	return p.Contact
}
func (p *ContactReport) IsSetContact() bool {
	return p.Contact != nil
}

func (p *ContactReport) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ContactReport) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *ContactReport) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Exists = v
	}
	return nil
}

func (p *ContactReport) readField3(iprot thrift.TProtocol) error {
	p.Contact = &Contact{}
	if err := p.Contact.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contact), err)
	}
	return nil
}

func (p *ContactReport) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContactReport"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContactReport) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err)
	}
	return err
}

func (p *ContactReport) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("exists", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:exists: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Exists)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.exists (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:exists: ", p), err)
	}
	return err
}

func (p *ContactReport) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contact", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contact: ", p), err)
	}
	if err := p.Contact.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contact), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contact: ", p), err)
	}
	return err
}

func (p *ContactReport) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContactReport(%+v)", *p)
}

// Attributes:
//  - Mid
//  - Exists
type ContactReportResult_ struct {
	Mid    string `thrift:"mid,1" json:"mid"`
	Exists bool   `thrift:"exists,2" json:"exists"`
}

func NewContactReportResult_() *ContactReportResult_ {
	return &ContactReportResult_{}
}

func (p *ContactReportResult_) GetMid() string {
	return p.Mid
}

func (p *ContactReportResult_) GetExists() bool {
	return p.Exists
}
func (p *ContactReportResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ContactReportResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *ContactReportResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Exists = v
	}
	return nil
}

func (p *ContactReportResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContactReportResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContactReportResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err)
	}
	return err
}

func (p *ContactReportResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("exists", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:exists: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Exists)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.exists (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:exists: ", p), err)
	}
	return err
}

func (p *ContactReportResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContactReportResult_(%+v)", *p)
}

// Attributes:
//  - DeviceName
//  - SystemName
//  - SystemVersion
//  - Model
//  - CarrierCode
//  - CarrierName
//  - ApplicationType
type DeviceInfo struct {
	DeviceName    string `thrift:"deviceName,1" json:"deviceName"`
	SystemName    string `thrift:"systemName,2" json:"systemName"`
	SystemVersion string `thrift:"systemVersion,3" json:"systemVersion"`
	Model         string `thrift:"model,4" json:"model"`
	// unused fields # 5 to 9
	CarrierCode CarrierCode `thrift:"carrierCode,10" json:"carrierCode"`
	CarrierName string      `thrift:"carrierName,11" json:"carrierName"`
	// unused fields # 12 to 19
	ApplicationType ApplicationType `thrift:"applicationType,20" json:"applicationType"`
}

func NewDeviceInfo() *DeviceInfo {
	return &DeviceInfo{}
}

func (p *DeviceInfo) GetDeviceName() string {
	return p.DeviceName
}

func (p *DeviceInfo) GetSystemName() string {
	return p.SystemName
}

func (p *DeviceInfo) GetSystemVersion() string {
	return p.SystemVersion
}

func (p *DeviceInfo) GetModel() string {
	return p.Model
}

func (p *DeviceInfo) GetCarrierCode() CarrierCode {
	return p.CarrierCode
}

func (p *DeviceInfo) GetCarrierName() string {
	return p.CarrierName
}

func (p *DeviceInfo) GetApplicationType() ApplicationType {
	return p.ApplicationType
}
func (p *DeviceInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DeviceInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DeviceName = v
	}
	return nil
}

func (p *DeviceInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SystemName = v
	}
	return nil
}

func (p *DeviceInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SystemVersion = v
	}
	return nil
}

func (p *DeviceInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Model = v
	}
	return nil
}

func (p *DeviceInfo) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := CarrierCode(v)
		p.CarrierCode = temp
	}
	return nil
}

func (p *DeviceInfo) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.CarrierName = v
	}
	return nil
}

func (p *DeviceInfo) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		temp := ApplicationType(v)
		p.ApplicationType = temp
	}
	return nil
}

func (p *DeviceInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeviceInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DeviceInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deviceName: ", p), err)
	}
	if err := oprot.WriteString(string(p.DeviceName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deviceName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deviceName: ", p), err)
	}
	return err
}

func (p *DeviceInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("systemName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemName: ", p), err)
	}
	if err := oprot.WriteString(string(p.SystemName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.systemName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemName: ", p), err)
	}
	return err
}

func (p *DeviceInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("systemVersion", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemVersion: ", p), err)
	}
	if err := oprot.WriteString(string(p.SystemVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.systemVersion (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemVersion: ", p), err)
	}
	return err
}

func (p *DeviceInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("model", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:model: ", p), err)
	}
	if err := oprot.WriteString(string(p.Model)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.model (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:model: ", p), err)
	}
	return err
}

func (p *DeviceInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("carrierCode", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:carrierCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CarrierCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.carrierCode (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:carrierCode: ", p), err)
	}
	return err
}

func (p *DeviceInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("carrierName", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:carrierName: ", p), err)
	}
	if err := oprot.WriteString(string(p.CarrierName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.carrierName (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:carrierName: ", p), err)
	}
	return err
}

func (p *DeviceInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("applicationType", thrift.I32, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:applicationType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ApplicationType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.applicationType (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:applicationType: ", p), err)
	}
	return err
}

func (p *DeviceInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceInfo(%+v)", *p)
}

// Attributes:
//  - UsePasswordSet
//  - Email
//  - Password
//  - IgnoreDuplication
type EmailConfirmation struct {
	UsePasswordSet    bool   `thrift:"usePasswordSet,1" json:"usePasswordSet"`
	Email             string `thrift:"email,2" json:"email"`
	Password          string `thrift:"password,3" json:"password"`
	IgnoreDuplication bool   `thrift:"ignoreDuplication,4" json:"ignoreDuplication"`
}

func NewEmailConfirmation() *EmailConfirmation {
	return &EmailConfirmation{}
}

func (p *EmailConfirmation) GetUsePasswordSet() bool {
	return p.UsePasswordSet
}

func (p *EmailConfirmation) GetEmail() string {
	return p.Email
}

func (p *EmailConfirmation) GetPassword() string {
	return p.Password
}

func (p *EmailConfirmation) GetIgnoreDuplication() bool {
	return p.IgnoreDuplication
}
func (p *EmailConfirmation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EmailConfirmation) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UsePasswordSet = v
	}
	return nil
}

func (p *EmailConfirmation) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *EmailConfirmation) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *EmailConfirmation) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IgnoreDuplication = v
	}
	return nil
}

func (p *EmailConfirmation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EmailConfirmation"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EmailConfirmation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("usePasswordSet", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:usePasswordSet: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.UsePasswordSet)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.usePasswordSet (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:usePasswordSet: ", p), err)
	}
	return err
}

func (p *EmailConfirmation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:email: ", p), err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.email (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:email: ", p), err)
	}
	return err
}

func (p *EmailConfirmation) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err)
	}
	return err
}

func (p *EmailConfirmation) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ignoreDuplication", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ignoreDuplication: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IgnoreDuplication)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ignoreDuplication (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ignoreDuplication: ", p), err)
	}
	return err
}

func (p *EmailConfirmation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmailConfirmation(%+v)", *p)
}

// Attributes:
//  - EmailConfirmationType
//  - Verifier
//  - TargetEmail
type EmailConfirmationSession struct {
	EmailConfirmationType EmailConfirmationType `thrift:"emailConfirmationType,1" json:"emailConfirmationType"`
	Verifier              string                `thrift:"verifier,2" json:"verifier"`
	TargetEmail           string                `thrift:"targetEmail,3" json:"targetEmail"`
}

func NewEmailConfirmationSession() *EmailConfirmationSession {
	return &EmailConfirmationSession{}
}

func (p *EmailConfirmationSession) GetEmailConfirmationType() EmailConfirmationType {
	return p.EmailConfirmationType
}

func (p *EmailConfirmationSession) GetVerifier() string {
	return p.Verifier
}

func (p *EmailConfirmationSession) GetTargetEmail() string {
	return p.TargetEmail
}
func (p *EmailConfirmationSession) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EmailConfirmationSession) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := EmailConfirmationType(v)
		p.EmailConfirmationType = temp
	}
	return nil
}

func (p *EmailConfirmationSession) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *EmailConfirmationSession) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TargetEmail = v
	}
	return nil
}

func (p *EmailConfirmationSession) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EmailConfirmationSession"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EmailConfirmationSession) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("emailConfirmationType", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:emailConfirmationType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EmailConfirmationType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.emailConfirmationType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:emailConfirmationType: ", p), err)
	}
	return err
}

func (p *EmailConfirmationSession) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:verifier: ", p), err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.verifier (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:verifier: ", p), err)
	}
	return err
}

func (p *EmailConfirmationSession) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targetEmail", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetEmail: ", p), err)
	}
	if err := oprot.WriteString(string(p.TargetEmail)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.targetEmail (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetEmail: ", p), err)
	}
	return err
}

func (p *EmailConfirmationSession) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmailConfirmationSession(%+v)", *p)
}

// Attributes:
//  - Year
//  - YearPrivacyLevelType
//  - YearEnabled
//  - Day
//  - DayPrivacyLevelType
//  - DayEnabled
type ExtendedProfileBirthday struct {
	Year                 string               `thrift:"year,1" json:"year"`
	YearPrivacyLevelType YearPrivacyLevelType `thrift:"yearPrivacyLevelType,2" json:"yearPrivacyLevelType"`
	YearEnabled          bool                 `thrift:"yearEnabled,3" json:"yearEnabled"`
	// unused field # 4
	Day                 string              `thrift:"day,5" json:"day"`
	DayPrivacyLevelType DayPrivacyLevelType `thrift:"dayPrivacyLevelType,6" json:"dayPrivacyLevelType"`
	DayEnabled          bool                `thrift:"dayEnabled,7" json:"dayEnabled"`
}

func NewExtendedProfileBirthday() *ExtendedProfileBirthday {
	return &ExtendedProfileBirthday{}
}

func (p *ExtendedProfileBirthday) GetYear() string {
	return p.Year
}

func (p *ExtendedProfileBirthday) GetYearPrivacyLevelType() YearPrivacyLevelType {
	return p.YearPrivacyLevelType
}

func (p *ExtendedProfileBirthday) GetYearEnabled() bool {
	return p.YearEnabled
}

func (p *ExtendedProfileBirthday) GetDay() string {
	return p.Day
}

func (p *ExtendedProfileBirthday) GetDayPrivacyLevelType() DayPrivacyLevelType {
	return p.DayPrivacyLevelType
}

func (p *ExtendedProfileBirthday) GetDayEnabled() bool {
	return p.DayEnabled
}
func (p *ExtendedProfileBirthday) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ExtendedProfileBirthday) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Year = v
	}
	return nil
}

func (p *ExtendedProfileBirthday) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := YearPrivacyLevelType(v)
		p.YearPrivacyLevelType = temp
	}
	return nil
}

func (p *ExtendedProfileBirthday) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.YearEnabled = v
	}
	return nil
}

func (p *ExtendedProfileBirthday) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Day = v
	}
	return nil
}

func (p *ExtendedProfileBirthday) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := DayPrivacyLevelType(v)
		p.DayPrivacyLevelType = temp
	}
	return nil
}

func (p *ExtendedProfileBirthday) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.DayEnabled = v
	}
	return nil
}

func (p *ExtendedProfileBirthday) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExtendedProfileBirthday"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExtendedProfileBirthday) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("year", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:year: ", p), err)
	}
	if err := oprot.WriteString(string(p.Year)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.year (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:year: ", p), err)
	}
	return err
}

func (p *ExtendedProfileBirthday) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("yearPrivacyLevelType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:yearPrivacyLevelType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.YearPrivacyLevelType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.yearPrivacyLevelType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:yearPrivacyLevelType: ", p), err)
	}
	return err
}

func (p *ExtendedProfileBirthday) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("yearEnabled", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:yearEnabled: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.YearEnabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.yearEnabled (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:yearEnabled: ", p), err)
	}
	return err
}

func (p *ExtendedProfileBirthday) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("day", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:day: ", p), err)
	}
	if err := oprot.WriteString(string(p.Day)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.day (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:day: ", p), err)
	}
	return err
}

func (p *ExtendedProfileBirthday) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dayPrivacyLevelType", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:dayPrivacyLevelType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DayPrivacyLevelType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dayPrivacyLevelType (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:dayPrivacyLevelType: ", p), err)
	}
	return err
}

func (p *ExtendedProfileBirthday) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dayEnabled", thrift.BOOL, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dayEnabled: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.DayEnabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dayEnabled (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dayEnabled: ", p), err)
	}
	return err
}

func (p *ExtendedProfileBirthday) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExtendedProfileBirthday(%+v)", *p)
}

// Attributes:
//  - Birthday
type ExtendedProfile struct {
	Birthday *ExtendedProfileBirthday `thrift:"birthday,1" json:"birthday"`
}

func NewExtendedProfile() *ExtendedProfile {
	return &ExtendedProfile{}
}

var ExtendedProfile_Birthday_DEFAULT *ExtendedProfileBirthday

func (p *ExtendedProfile) GetBirthday() *ExtendedProfileBirthday {
	if !p.IsSetBirthday() {
		return ExtendedProfile_Birthday_DEFAULT
	}
	return p.Birthday
}
func (p *ExtendedProfile) IsSetBirthday() bool {
	return p.Birthday != nil
}

func (p *ExtendedProfile) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ExtendedProfile) readField1(iprot thrift.TProtocol) error {
	p.Birthday = &ExtendedProfileBirthday{}
	if err := p.Birthday.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Birthday), err)
	}
	return nil
}

func (p *ExtendedProfile) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExtendedProfile"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExtendedProfile) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("birthday", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:birthday: ", p), err)
	}
	if err := p.Birthday.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Birthday), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:birthday: ", p), err)
	}
	return err
}

func (p *ExtendedProfile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExtendedProfile(%+v)", *p)
}

// Attributes:
//  - ChannelId
//  - RepresentMid
//  - Count
//  - Point
type FriendChannelMatrix struct {
	ChannelId    string `thrift:"channelId,1" json:"channelId"`
	RepresentMid string `thrift:"representMid,2" json:"representMid"`
	Count        int32  `thrift:"count,3" json:"count"`
	Point        int32  `thrift:"point,4" json:"point"`
}

func NewFriendChannelMatrix() *FriendChannelMatrix {
	return &FriendChannelMatrix{}
}

func (p *FriendChannelMatrix) GetChannelId() string {
	return p.ChannelId
}

func (p *FriendChannelMatrix) GetRepresentMid() string {
	return p.RepresentMid
}

func (p *FriendChannelMatrix) GetCount() int32 {
	return p.Count
}

func (p *FriendChannelMatrix) GetPoint() int32 {
	return p.Point
}
func (p *FriendChannelMatrix) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FriendChannelMatrix) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *FriendChannelMatrix) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RepresentMid = v
	}
	return nil
}

func (p *FriendChannelMatrix) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *FriendChannelMatrix) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Point = v
	}
	return nil
}

func (p *FriendChannelMatrix) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FriendChannelMatrix"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FriendChannelMatrix) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err)
	}
	return err
}

func (p *FriendChannelMatrix) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("representMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:representMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.RepresentMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.representMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:representMid: ", p), err)
	}
	return err
}

func (p *FriendChannelMatrix) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *FriendChannelMatrix) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("point", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:point: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Point)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.point (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:point: ", p), err)
	}
	return err
}

func (p *FriendChannelMatrix) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FriendChannelMatrix(%+v)", *p)
}

// Attributes:
//  - Expires
//  - Matrices
type FriendChannelMatricesResponse struct {
	Expires  int64                  `thrift:"expires,1" json:"expires"`
	Matrices []*FriendChannelMatrix `thrift:"matrices,2" json:"matrices"`
}

func NewFriendChannelMatricesResponse() *FriendChannelMatricesResponse {
	return &FriendChannelMatricesResponse{}
}

func (p *FriendChannelMatricesResponse) GetExpires() int64 {
	return p.Expires
}

func (p *FriendChannelMatricesResponse) GetMatrices() []*FriendChannelMatrix {
	return p.Matrices
}
func (p *FriendChannelMatricesResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FriendChannelMatricesResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Expires = v
	}
	return nil
}

func (p *FriendChannelMatricesResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*FriendChannelMatrix, 0, size)
	p.Matrices = tSlice
	for i := 0; i < size; i++ {
		_elem14 := &FriendChannelMatrix{}
		if err := _elem14.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
		}
		p.Matrices = append(p.Matrices, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FriendChannelMatricesResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FriendChannelMatricesResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FriendChannelMatricesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expires", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:expires: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Expires)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.expires (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:expires: ", p), err)
	}
	return err
}

func (p *FriendChannelMatricesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("matrices", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:matrices: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Matrices)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Matrices {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:matrices: ", p), err)
	}
	return err
}

func (p *FriendChannelMatricesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FriendChannelMatricesResponse(%+v)", *p)
}

// Attributes:
//  - Longitude
//  - Latitude
type Geolocation struct {
	Longitude float64 `thrift:"longitude,1" json:"longitude"`
	Latitude  float64 `thrift:"latitude,2" json:"latitude"`
}

func NewGeolocation() *Geolocation {
	return &Geolocation{}
}

func (p *Geolocation) GetLongitude() float64 {
	return p.Longitude
}

func (p *Geolocation) GetLatitude() float64 {
	return p.Latitude
}
func (p *Geolocation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Geolocation) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Longitude = v
	}
	return nil
}

func (p *Geolocation) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Latitude = v
	}
	return nil
}

func (p *Geolocation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Geolocation"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Geolocation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:longitude: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Longitude)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.longitude (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:longitude: ", p), err)
	}
	return err
}

func (p *Geolocation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:latitude: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Latitude)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.latitude (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:latitude: ", p), err)
	}
	return err
}

func (p *Geolocation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Geolocation(%+v)", *p)
}

// Attributes:
//  - ApplicationType
//  - ApplicationVersion
//  - Region
type NotificationTarget struct {
	ApplicationType    string `thrift:"applicationType,1" json:"applicationType"`
	ApplicationVersion string `thrift:"applicationVersion,2" json:"applicationVersion"`
	Region             string `thrift:"region,3" json:"region"`
}

func NewNotificationTarget() *NotificationTarget {
	return &NotificationTarget{}
}

func (p *NotificationTarget) GetApplicationType() string {
	return p.ApplicationType
}

func (p *NotificationTarget) GetApplicationVersion() string {
	return p.ApplicationVersion
}

func (p *NotificationTarget) GetRegion() string {
	return p.Region
}
func (p *NotificationTarget) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NotificationTarget) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ApplicationType = v
	}
	return nil
}

func (p *NotificationTarget) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ApplicationVersion = v
	}
	return nil
}

func (p *NotificationTarget) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Region = v
	}
	return nil
}

func (p *NotificationTarget) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NotificationTarget"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NotificationTarget) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("applicationType", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:applicationType: ", p), err)
	}
	if err := oprot.WriteString(string(p.ApplicationType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.applicationType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:applicationType: ", p), err)
	}
	return err
}

func (p *NotificationTarget) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("applicationVersion", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:applicationVersion: ", p), err)
	}
	if err := oprot.WriteString(string(p.ApplicationVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.applicationVersion (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:applicationVersion: ", p), err)
	}
	return err
}

func (p *NotificationTarget) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("region", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:region: ", p), err)
	}
	if err := oprot.WriteString(string(p.Region)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.region (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:region: ", p), err)
	}
	return err
}

func (p *NotificationTarget) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotificationTarget(%+v)", *p)
}

// Attributes:
//  - Key
//  - Targets
//  - CreatedTime
//  - Data
//  - MaxDelay
type GlobalEvent struct {
	Key         string                `thrift:"key,1" json:"key"`
	Targets     []*NotificationTarget `thrift:"targets,2" json:"targets"`
	CreatedTime int64                 `thrift:"createdTime,3" json:"createdTime"`
	Data        int64                 `thrift:"data,4" json:"data"`
	MaxDelay    int32                 `thrift:"maxDelay,5" json:"maxDelay"`
}

func NewGlobalEvent() *GlobalEvent {
	return &GlobalEvent{}
}

func (p *GlobalEvent) GetKey() string {
	return p.Key
}

func (p *GlobalEvent) GetTargets() []*NotificationTarget {
	return p.Targets
}

func (p *GlobalEvent) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *GlobalEvent) GetData() int64 {
	return p.Data
}

func (p *GlobalEvent) GetMaxDelay() int32 {
	return p.MaxDelay
}
func (p *GlobalEvent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GlobalEvent) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *GlobalEvent) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*NotificationTarget, 0, size)
	p.Targets = tSlice
	for i := 0; i < size; i++ {
		_elem15 := &NotificationTarget{}
		if err := _elem15.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
		}
		p.Targets = append(p.Targets, _elem15)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GlobalEvent) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *GlobalEvent) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Data = v
	}
	return nil
}

func (p *GlobalEvent) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.MaxDelay = v
	}
	return nil
}

func (p *GlobalEvent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GlobalEvent"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GlobalEvent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *GlobalEvent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targets", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:targets: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Targets)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Targets {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:targets: ", p), err)
	}
	return err
}

func (p *GlobalEvent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:createdTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createdTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:createdTime: ", p), err)
	}
	return err
}

func (p *GlobalEvent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:data: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Data)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.data (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:data: ", p), err)
	}
	return err
}

func (p *GlobalEvent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxDelay", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:maxDelay: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxDelay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxDelay (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:maxDelay: ", p), err)
	}
	return err
}

func (p *GlobalEvent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GlobalEvent(%+v)", *p)
}

// Attributes:
//  - InvitationTicket
//  - FavoriteTimestamp
type GroupPreference struct {
	// unused fields # 1 to 10
	InvitationTicket  string `thrift:"invitationTicket,11" json:"invitationTicket"`
	FavoriteTimestamp int64  `thrift:"favoriteTimestamp,12" json:"favoriteTimestamp"`
}

func NewGroupPreference() *GroupPreference {
	return &GroupPreference{}
}

func (p *GroupPreference) GetInvitationTicket() string {
	return p.InvitationTicket
}

func (p *GroupPreference) GetFavoriteTimestamp() int64 {
	return p.FavoriteTimestamp
}
func (p *GroupPreference) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupPreference) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.InvitationTicket = v
	}
	return nil
}

func (p *GroupPreference) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.FavoriteTimestamp = v
	}
	return nil
}

func (p *GroupPreference) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupPreference"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupPreference) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("invitationTicket", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:invitationTicket: ", p), err)
	}
	if err := oprot.WriteString(string(p.InvitationTicket)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.invitationTicket (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:invitationTicket: ", p), err)
	}
	return err
}

func (p *GroupPreference) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("favoriteTimestamp", thrift.I64, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:favoriteTimestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FavoriteTimestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.favoriteTimestamp (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:favoriteTimestamp: ", p), err)
	}
	return err
}

func (p *GroupPreference) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupPreference(%+v)", *p)
}

// Attributes:
//  - ID
//  - CreatedTime
//  - Name
//  - PictureStatus
//  - PreventedJoinByTicket
//  - GroupPreference
//  - Members
//  - Creator
//  - Invitee
//  - NotificationDisabled
//  - PicturePath
//  - MemberMids
//  - InviteeMids
type Group struct {
	ID          string `thrift:"id,1" json:"id"`
	CreatedTime int64  `thrift:"createdTime,2" json:"createdTime"`
	// unused fields # 3 to 9
	Name                  string           `thrift:"name,10" json:"name"`
	PictureStatus         string           `thrift:"PictureStatus,11" json:"PictureStatus"`
	PreventedJoinByTicket bool             `thrift:"preventedJoinByTicket,12" json:"preventedJoinByTicket"`
	GroupPreference       *GroupPreference `thrift:"groupPreference,13" json:"groupPreference"`
	// unused fields # 14 to 19
	Members []*Contact `thrift:"members,20" json:"members"`
	Creator *Contact   `thrift:"creator,21" json:"creator"`
	Invitee []*Contact `thrift:"invitee,22" json:"invitee"`
	// unused fields # 23 to 30
	NotificationDisabled bool   `thrift:"notificationDisabled,31" json:"notificationDisabled"`
	PicturePath          string `thrift:"picturePath,32" json:"picturePath"`
	// unused fields # 33 to 39
	MemberMids  []string `thrift:"memberMids,40" json:"memberMids"`
	InviteeMids []string `thrift:"inviteeMids,41" json:"inviteeMids"`
}

func NewGroup() *Group {
	return &Group{}
}

func (p *Group) GetID() string {
	return p.ID
}

func (p *Group) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Group) GetName() string {
	return p.Name
}

func (p *Group) GetPictureStatus() string {
	return p.PictureStatus
}

func (p *Group) GetPreventedJoinByTicket() bool {
	return p.PreventedJoinByTicket
}

var Group_GroupPreference_DEFAULT *GroupPreference

func (p *Group) GetGroupPreference() *GroupPreference {
	if !p.IsSetGroupPreference() {
		return Group_GroupPreference_DEFAULT
	}
	return p.GroupPreference
}

func (p *Group) GetMembers() []*Contact {
	return p.Members
}

var Group_Creator_DEFAULT *Contact

func (p *Group) GetCreator() *Contact {
	if !p.IsSetCreator() {
		return Group_Creator_DEFAULT
	}
	return p.Creator
}

func (p *Group) GetInvitee() []*Contact {
	return p.Invitee
}

func (p *Group) GetNotificationDisabled() bool {
	return p.NotificationDisabled
}

func (p *Group) GetPicturePath() string {
	return p.PicturePath
}

func (p *Group) GetMemberMids() []string {
	return p.MemberMids
}

func (p *Group) GetInviteeMids() []string {
	return p.InviteeMids
}
func (p *Group) IsSetGroupPreference() bool {
	return p.GroupPreference != nil
}

func (p *Group) IsSetCreator() bool {
	return p.Creator != nil
}

func (p *Group) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 31:
			if err := p.readField31(iprot); err != nil {
				return err
			}
		case 32:
			if err := p.readField32(iprot); err != nil {
				return err
			}
		case 40:
			if err := p.readField40(iprot); err != nil {
				return err
			}
		case 41:
			if err := p.readField41(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Group) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Group) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Group) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Group) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.PictureStatus = v
	}
	return nil
}

func (p *Group) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.PreventedJoinByTicket = v
	}
	return nil
}

func (p *Group) readField13(iprot thrift.TProtocol) error {
	p.GroupPreference = &GroupPreference{}
	if err := p.GroupPreference.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GroupPreference), err)
	}
	return nil
}

func (p *Group) readField20(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Members = tSlice
	for i := 0; i < size; i++ {
		_elem16 := &Contact{}
		if err := _elem16.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
		}
		p.Members = append(p.Members, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Group) readField21(iprot thrift.TProtocol) error {
	p.Creator = &Contact{}
	if err := p.Creator.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Creator), err)
	}
	return nil
}

func (p *Group) readField22(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Invitee = tSlice
	for i := 0; i < size; i++ {
		_elem17 := &Contact{}
		if err := _elem17.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
		}
		p.Invitee = append(p.Invitee, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Group) readField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 31: ", err)
	} else {
		p.NotificationDisabled = v
	}
	return nil
}

func (p *Group) readField32(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 32: ", err)
	} else {
		p.PicturePath = v
	}
	return nil
}

func (p *Group) readField40(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.MemberMids = tSlice
	for i := 0; i < size; i++ {
		var _elem18 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem18 = v
		}
		p.MemberMids = append(p.MemberMids, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Group) readField41(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.InviteeMids = tSlice
	for i := 0; i < size; i++ {
		var _elem19 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem19 = v
		}
		p.InviteeMids = append(p.InviteeMids, _elem19)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Group) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Group"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField31(oprot); err != nil {
		return err
	}
	if err := p.writeField32(oprot); err != nil {
		return err
	}
	if err := p.writeField40(oprot); err != nil {
		return err
	}
	if err := p.writeField41(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Group) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Group) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err)
	}
	return err
}

func (p *Group) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:name: ", p), err)
	}
	return err
}

func (p *Group) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PictureStatus", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:PictureStatus: ", p), err)
	}
	if err := oprot.WriteString(string(p.PictureStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PictureStatus (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:PictureStatus: ", p), err)
	}
	return err
}

func (p *Group) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("preventedJoinByTicket", thrift.BOOL, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:preventedJoinByTicket: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PreventedJoinByTicket)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.preventedJoinByTicket (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:preventedJoinByTicket: ", p), err)
	}
	return err
}

func (p *Group) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupPreference", thrift.STRUCT, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:groupPreference: ", p), err)
	}
	if err := p.GroupPreference.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GroupPreference), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:groupPreference: ", p), err)
	}
	return err
}

func (p *Group) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("members", thrift.LIST, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:members: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Members)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Members {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:members: ", p), err)
	}
	return err
}

func (p *Group) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("creator", thrift.STRUCT, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:creator: ", p), err)
	}
	if err := p.Creator.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Creator), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:creator: ", p), err)
	}
	return err
}

func (p *Group) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("invitee", thrift.LIST, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:invitee: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Invitee)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Invitee {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:invitee: ", p), err)
	}
	return err
}

func (p *Group) writeField31(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationDisabled", thrift.BOOL, 31); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:notificationDisabled: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationDisabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationDisabled (31) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 31:notificationDisabled: ", p), err)
	}
	return err
}

func (p *Group) writeField32(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 32); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:picturePath: ", p), err)
	}
	if err := oprot.WriteString(string(p.PicturePath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.picturePath (32) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 32:picturePath: ", p), err)
	}
	return err
}

func (p *Group) writeField40(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberMids", thrift.LIST, 40); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:memberMids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.MemberMids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MemberMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 40:memberMids: ", p), err)
	}
	return err
}

func (p *Group) writeField41(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inviteeMids", thrift.LIST, 41); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:inviteeMids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.InviteeMids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.InviteeMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 41:inviteeMids: ", p), err)
	}
	return err
}

func (p *Group) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Group(%+v)", *p)
}

// Attributes:
//  - Host
//  - Port
//  - Zone
type CallHost struct {
	Host string `thrift:"host,1" json:"host"`
	Port int32  `thrift:"port,2" json:"port"`
	Zone string `thrift:"zone,3" json:"zone"`
}

func NewCallHost() *CallHost {
	return &CallHost{}
}

func (p *CallHost) GetHost() string {
	return p.Host
}

func (p *CallHost) GetPort() int32 {
	return p.Port
}

func (p *CallHost) GetZone() string {
	return p.Zone
}
func (p *CallHost) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CallHost) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Host = v
	}
	return nil
}

func (p *CallHost) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *CallHost) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Zone = v
	}
	return nil
}

func (p *CallHost) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CallHost"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CallHost) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("host", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err)
	}
	if err := oprot.WriteString(string(p.Host)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.host (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err)
	}
	return err
}

func (p *CallHost) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Port)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err)
	}
	return err
}

func (p *CallHost) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("zone", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:zone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Zone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.zone (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:zone: ", p), err)
	}
	return err
}

func (p *CallHost) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CallHost(%+v)", *p)
}

// Attributes:
//  - Online
//  - ChatMid
//  - HostMids
//  - MemberMids
//  - Started
//  - MediaType
type GroupCall struct {
	Online     bool      `thrift:"online,1" json:"online"`
	ChatMid    string    `thrift:"chatMid,2" json:"chatMid"`
	HostMids   string    `thrift:"hostMids,3" json:"hostMids"`
	MemberMids []string  `thrift:"memberMids,4" json:"memberMids"`
	Started    int64     `thrift:"started,5" json:"started"`
	MediaType  MediaType `thrift:"mediaType,6" json:"mediaType"`
}

func NewGroupCall() *GroupCall {
	return &GroupCall{}
}

func (p *GroupCall) GetOnline() bool {
	return p.Online
}

func (p *GroupCall) GetChatMid() string {
	return p.ChatMid
}

func (p *GroupCall) GetHostMids() string {
	return p.HostMids
}

func (p *GroupCall) GetMemberMids() []string {
	return p.MemberMids
}

func (p *GroupCall) GetStarted() int64 {
	return p.Started
}

func (p *GroupCall) GetMediaType() MediaType {
	return p.MediaType
}
func (p *GroupCall) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupCall) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Online = v
	}
	return nil
}

func (p *GroupCall) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *GroupCall) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.HostMids = v
	}
	return nil
}

func (p *GroupCall) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.MemberMids = tSlice
	for i := 0; i < size; i++ {
		var _elem20 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem20 = v
		}
		p.MemberMids = append(p.MemberMids, _elem20)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GroupCall) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Started = v
	}
	return nil
}

func (p *GroupCall) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := MediaType(v)
		p.MediaType = temp
	}
	return nil
}

func (p *GroupCall) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupCall"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupCall) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("online", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:online: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Online)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.online (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:online: ", p), err)
	}
	return err
}

func (p *GroupCall) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *GroupCall) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostMids", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hostMids: ", p), err)
	}
	if err := oprot.WriteString(string(p.HostMids)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hostMids (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hostMids: ", p), err)
	}
	return err
}

func (p *GroupCall) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberMids", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:memberMids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.MemberMids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MemberMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:memberMids: ", p), err)
	}
	return err
}

func (p *GroupCall) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("started", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:started: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Started)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.started (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:started: ", p), err)
	}
	return err
}

func (p *GroupCall) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mediaType", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:mediaType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MediaType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mediaType (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:mediaType: ", p), err)
	}
	return err
}

func (p *GroupCall) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupCall(%+v)", *p)
}

// Attributes:
//  - Token
//  - Cscf
//  - Mix
type GroupCallRoute struct {
	Token string    `thrift:"token,1" json:"token"`
	Cscf  *CallHost `thrift:"cscf,2" json:"cscf"`
	Mix   *CallHost `thrift:"mix,3" json:"mix"`
}

func NewGroupCallRoute() *GroupCallRoute {
	return &GroupCallRoute{}
}

func (p *GroupCallRoute) GetToken() string {
	return p.Token
}

var GroupCallRoute_Cscf_DEFAULT *CallHost

func (p *GroupCallRoute) GetCscf() *CallHost {
	if !p.IsSetCscf() {
		return GroupCallRoute_Cscf_DEFAULT
	}
	return p.Cscf
}

var GroupCallRoute_Mix_DEFAULT *CallHost

func (p *GroupCallRoute) GetMix() *CallHost {
	if !p.IsSetMix() {
		return GroupCallRoute_Mix_DEFAULT
	}
	return p.Mix
}
func (p *GroupCallRoute) IsSetCscf() bool {
	return p.Cscf != nil
}

func (p *GroupCallRoute) IsSetMix() bool {
	return p.Mix != nil
}

func (p *GroupCallRoute) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupCallRoute) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *GroupCallRoute) readField2(iprot thrift.TProtocol) error {
	p.Cscf = &CallHost{}
	if err := p.Cscf.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cscf), err)
	}
	return nil
}

func (p *GroupCallRoute) readField3(iprot thrift.TProtocol) error {
	p.Mix = &CallHost{}
	if err := p.Mix.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Mix), err)
	}
	return nil
}

func (p *GroupCallRoute) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupCallRoute"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupCallRoute) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err)
	}
	return err
}

func (p *GroupCallRoute) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cscf", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cscf: ", p), err)
	}
	if err := p.Cscf.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cscf), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cscf: ", p), err)
	}
	return err
}

func (p *GroupCallRoute) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mix", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mix: ", p), err)
	}
	if err := p.Mix.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Mix), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mix: ", p), err)
	}
	return err
}

func (p *GroupCallRoute) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupCallRoute(%+v)", *p)
}

// Attributes:
//  - Token
//  - VoipServer
type TestCallRoute struct {
	Token      string    `thrift:"token,1" json:"token"`
	VoipServer *CallHost `thrift:"voipServer,2" json:"voipServer"`
}

func NewTestCallRoute() *TestCallRoute {
	return &TestCallRoute{}
}

func (p *TestCallRoute) GetToken() string {
	return p.Token
}

var TestCallRoute_VoipServer_DEFAULT *CallHost

func (p *TestCallRoute) GetVoipServer() *CallHost {
	if !p.IsSetVoipServer() {
		return TestCallRoute_VoipServer_DEFAULT
	}
	return p.VoipServer
}
func (p *TestCallRoute) IsSetVoipServer() bool {
	return p.VoipServer != nil
}

func (p *TestCallRoute) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TestCallRoute) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *TestCallRoute) readField2(iprot thrift.TProtocol) error {
	p.VoipServer = &CallHost{}
	if err := p.VoipServer.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VoipServer), err)
	}
	return nil
}

func (p *TestCallRoute) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TestCallRoute"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TestCallRoute) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err)
	}
	return err
}

func (p *TestCallRoute) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("voipServer", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:voipServer: ", p), err)
	}
	if err := p.VoipServer.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VoipServer), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:voipServer: ", p), err)
	}
	return err
}

func (p *TestCallRoute) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestCallRoute(%+v)", *p)
}

// Attributes:
//  - Provider
//  - Identifier
//  - Password
type IdentityCredential struct {
	Provider   IdentityProvider `thrift:"provider,1" json:"provider"`
	Identifier string           `thrift:"identifier,2" json:"identifier"`
	Password   string           `thrift:"password,3" json:"password"`
}

func NewIdentityCredential() *IdentityCredential {
	return &IdentityCredential{}
}

func (p *IdentityCredential) GetProvider() IdentityProvider {
	return p.Provider
}

func (p *IdentityCredential) GetIdentifier() string {
	return p.Identifier
}

func (p *IdentityCredential) GetPassword() string {
	return p.Password
}
func (p *IdentityCredential) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IdentityCredential) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := IdentityProvider(v)
		p.Provider = temp
	}
	return nil
}

func (p *IdentityCredential) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Identifier = v
	}
	return nil
}

func (p *IdentityCredential) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *IdentityCredential) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IdentityCredential"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IdentityCredential) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("provider", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:provider: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Provider)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.provider (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:provider: ", p), err)
	}
	return err
}

func (p *IdentityCredential) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identifier: ", p), err)
	}
	if err := oprot.WriteString(string(p.Identifier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.identifier (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identifier: ", p), err)
	}
	return err
}

func (p *IdentityCredential) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err)
	}
	return err
}

func (p *IdentityCredential) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IdentityCredential(%+v)", *p)
}

// Attributes:
//  - Mid
//  - LastReadMessageId
type LastReadMessageId struct {
	Mid               string `thrift:"mid,1" json:"mid"`
	LastReadMessageId string `thrift:"lastReadMessageId,2" json:"lastReadMessageId"`
}

func NewLastReadMessageId() *LastReadMessageId {
	return &LastReadMessageId{}
}

func (p *LastReadMessageId) GetMid() string {
	return p.Mid
}

func (p *LastReadMessageId) GetLastReadMessageId() string {
	return p.LastReadMessageId
}
func (p *LastReadMessageId) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LastReadMessageId) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *LastReadMessageId) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LastReadMessageId = v
	}
	return nil
}

func (p *LastReadMessageId) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LastReadMessageId"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LastReadMessageId) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err)
	}
	return err
}

func (p *LastReadMessageId) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastReadMessageId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastReadMessageId: ", p), err)
	}
	if err := oprot.WriteString(string(p.LastReadMessageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastReadMessageId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastReadMessageId: ", p), err)
	}
	return err
}

func (p *LastReadMessageId) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LastReadMessageId(%+v)", *p)
}

// Attributes:
//  - ChatId
//  - LastReadMessageIds
type LastReadMessageIds struct {
	ChatId             string               `thrift:"chatId,1" json:"chatId"`
	LastReadMessageIds []*LastReadMessageId `thrift:"lastReadMessageIds,2" json:"lastReadMessageIds"`
}

func NewLastReadMessageIds() *LastReadMessageIds {
	return &LastReadMessageIds{}
}

func (p *LastReadMessageIds) GetChatId() string {
	return p.ChatId
}

func (p *LastReadMessageIds) GetLastReadMessageIds() []*LastReadMessageId {
	return p.LastReadMessageIds
}
func (p *LastReadMessageIds) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LastReadMessageIds) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ChatId = v
	}
	return nil
}

func (p *LastReadMessageIds) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*LastReadMessageId, 0, size)
	p.LastReadMessageIds = tSlice
	for i := 0; i < size; i++ {
		_elem21 := &LastReadMessageId{}
		if err := _elem21.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem21), err)
		}
		p.LastReadMessageIds = append(p.LastReadMessageIds, _elem21)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LastReadMessageIds) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LastReadMessageIds"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LastReadMessageIds) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chatId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chatId: ", p), err)
	}
	return err
}

func (p *LastReadMessageIds) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastReadMessageIds", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastReadMessageIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LastReadMessageIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.LastReadMessageIds {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastReadMessageIds: ", p), err)
	}
	return err
}

func (p *LastReadMessageIds) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LastReadMessageIds(%+v)", *p)
}

// Attributes:
//  - AuthToken
//  - Certificate
//  - Verifier
//  - PinCode
//  - Type
type LoginResult_ struct {
	AuthToken   string          `thrift:"authToken,1" json:"authToken"`
	Certificate string          `thrift:"certificate,2" json:"certificate"`
	Verifier    string          `thrift:"verifier,3" json:"verifier"`
	PinCode     string          `thrift:"pinCode,4" json:"pinCode"`
	Type        LoginResultType `thrift:"type,5" json:"type"`
}

func NewLoginResult_() *LoginResult_ {
	return &LoginResult_{}
}

func (p *LoginResult_) GetAuthToken() string {
	return p.AuthToken
}

func (p *LoginResult_) GetCertificate() string {
	return p.Certificate
}

func (p *LoginResult_) GetVerifier() string {
	return p.Verifier
}

func (p *LoginResult_) GetPinCode() string {
	return p.PinCode
}

func (p *LoginResult_) GetType() LoginResultType {
	return p.Type
}
func (p *LoginResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LoginResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthToken = v
	}
	return nil
}

func (p *LoginResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Certificate = v
	}
	return nil
}

func (p *LoginResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *LoginResult_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PinCode = v
	}
	return nil
}

func (p *LoginResult_) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := LoginResultType(v)
		p.Type = temp
	}
	return nil
}

func (p *LoginResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LoginResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LoginResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err)
	}
	return err
}

func (p *LoginResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("certificate", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:certificate: ", p), err)
	}
	if err := oprot.WriteString(string(p.Certificate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.certificate (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:certificate: ", p), err)
	}
	return err
}

func (p *LoginResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:verifier: ", p), err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.verifier (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:verifier: ", p), err)
	}
	return err
}

func (p *LoginResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pinCode", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pinCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.PinCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pinCode (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pinCode: ", p), err)
	}
	return err
}

func (p *LoginResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:type: ", p), err)
	}
	return err
}

func (p *LoginResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginResult_(%+v)", *p)
}

// Attributes:
//  - TokenKey
//  - ExpirationTime
//  - ApplicationType
//  - SystemName
//  - AccessLocation
type LoginSession struct {
	TokenKey string `thrift:"tokenKey,1" json:"tokenKey"`
	// unused field # 2
	ExpirationTime int64 `thrift:"expirationTime,3" json:"expirationTime"`
	// unused fields # 4 to 10
	ApplicationType ApplicationType `thrift:"applicationType,11" json:"applicationType"`
	SystemName      string          `thrift:"systemName,12" json:"systemName"`
	// unused fields # 13 to 21
	AccessLocation string `thrift:"accessLocation,22" json:"accessLocation"`
}

func NewLoginSession() *LoginSession {
	return &LoginSession{}
}

func (p *LoginSession) GetTokenKey() string {
	return p.TokenKey
}

func (p *LoginSession) GetExpirationTime() int64 {
	return p.ExpirationTime
}

func (p *LoginSession) GetApplicationType() ApplicationType {
	return p.ApplicationType
}

func (p *LoginSession) GetSystemName() string {
	return p.SystemName
}

func (p *LoginSession) GetAccessLocation() string {
	return p.AccessLocation
}
func (p *LoginSession) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LoginSession) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TokenKey = v
	}
	return nil
}

func (p *LoginSession) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ExpirationTime = v
	}
	return nil
}

func (p *LoginSession) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		temp := ApplicationType(v)
		p.ApplicationType = temp
	}
	return nil
}

func (p *LoginSession) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.SystemName = v
	}
	return nil
}

func (p *LoginSession) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.AccessLocation = v
	}
	return nil
}

func (p *LoginSession) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LoginSession"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LoginSession) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tokenKey", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tokenKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.TokenKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tokenKey (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tokenKey: ", p), err)
	}
	return err
}

func (p *LoginSession) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expirationTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expirationTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ExpirationTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.expirationTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expirationTime: ", p), err)
	}
	return err
}

func (p *LoginSession) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("applicationType", thrift.I32, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:applicationType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ApplicationType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.applicationType (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:applicationType: ", p), err)
	}
	return err
}

func (p *LoginSession) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("systemName", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:systemName: ", p), err)
	}
	if err := oprot.WriteString(string(p.SystemName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.systemName (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:systemName: ", p), err)
	}
	return err
}

func (p *LoginSession) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accessLocation", thrift.STRING, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:accessLocation: ", p), err)
	}
	if err := oprot.WriteString(string(p.AccessLocation)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.accessLocation (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:accessLocation: ", p), err)
	}
	return err
}

func (p *LoginSession) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginSession(%+v)", *p)
}

// Attributes:
//  - EMid
//  - Mid
//  - Direction
//  - Method
//  - Param
//  - Timestamp
//  - SeqId
//  - DisplayName
//  - PicturePath
//  - PictureStatus
type FriendRequest struct {
	EMid      string        `thrift:"eMid,1" json:"eMid"`
	Mid       string        `thrift:"mid,2" json:"mid"`
	Direction DirectionType `thrift:"direction,3" json:"direction"`
	Method    MethodType    `thrift:"method,4" json:"method"`
	Param     string        `thrift:"param,5" json:"param"`
	Timestamp int64         `thrift:"timestamp,6" json:"timestamp"`
	SeqId     int64         `thrift:"seqId,7" json:"seqId"`
	// unused fields # 8 to 9
	DisplayName   string `thrift:"displayName,10" json:"displayName"`
	PicturePath   string `thrift:"picturePath,11" json:"picturePath"`
	PictureStatus string `thrift:"pictureStatus,12" json:"pictureStatus"`
}

func NewFriendRequest() *FriendRequest {
	return &FriendRequest{}
}

func (p *FriendRequest) GetEMid() string {
	return p.EMid
}

func (p *FriendRequest) GetMid() string {
	return p.Mid
}

func (p *FriendRequest) GetDirection() DirectionType {
	return p.Direction
}

func (p *FriendRequest) GetMethod() MethodType {
	return p.Method
}

func (p *FriendRequest) GetParam() string {
	return p.Param
}

func (p *FriendRequest) GetTimestamp() int64 {
	return p.Timestamp
}

func (p *FriendRequest) GetSeqId() int64 {
	return p.SeqId
}

func (p *FriendRequest) GetDisplayName() string {
	return p.DisplayName
}

func (p *FriendRequest) GetPicturePath() string {
	return p.PicturePath
}

func (p *FriendRequest) GetPictureStatus() string {
	return p.PictureStatus
}
func (p *FriendRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FriendRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.EMid = v
	}
	return nil
}

func (p *FriendRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *FriendRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := DirectionType(v)
		p.Direction = temp
	}
	return nil
}

func (p *FriendRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := MethodType(v)
		p.Method = temp
	}
	return nil
}

func (p *FriendRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Param = v
	}
	return nil
}

func (p *FriendRequest) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *FriendRequest) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SeqId = v
	}
	return nil
}

func (p *FriendRequest) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.DisplayName = v
	}
	return nil
}

func (p *FriendRequest) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.PicturePath = v
	}
	return nil
}

func (p *FriendRequest) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.PictureStatus = v
	}
	return nil
}

func (p *FriendRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FriendRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FriendRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eMid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:eMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.EMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.eMid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:eMid: ", p), err)
	}
	return err
}

func (p *FriendRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err)
	}
	return err
}

func (p *FriendRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("direction", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:direction: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Direction)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.direction (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:direction: ", p), err)
	}
	return err
}

func (p *FriendRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("method", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:method: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Method)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.method (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:method: ", p), err)
	}
	return err
}

func (p *FriendRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("param", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:param: ", p), err)
	}
	if err := oprot.WriteString(string(p.Param)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.param (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:param: ", p), err)
	}
	return err
}

func (p *FriendRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:timestamp: ", p), err)
	}
	return err
}

func (p *FriendRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seqId", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:seqId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SeqId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.seqId (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:seqId: ", p), err)
	}
	return err
}

func (p *FriendRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:displayName: ", p), err)
	}
	if err := oprot.WriteString(string(p.DisplayName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.displayName (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:displayName: ", p), err)
	}
	return err
}

func (p *FriendRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:picturePath: ", p), err)
	}
	if err := oprot.WriteString(string(p.PicturePath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.picturePath (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:picturePath: ", p), err)
	}
	return err
}

func (p *FriendRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pictureStatus", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:pictureStatus: ", p), err)
	}
	if err := oprot.WriteString(string(p.PictureStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:pictureStatus: ", p), err)
	}
	return err
}

func (p *FriendRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FriendRequest(%+v)", *p)
}

// Attributes:
//  - TotalIncomingCount
//  - TotalOutgoingCount
//  - RecentIncomings
//  - RecentOutgoings
//  - TotalIncomingLimit
//  - TotalOutgoingLimit
type FriendRequestsInfo struct {
	TotalIncomingCount int32          `thrift:"totalIncomingCount,1" json:"totalIncomingCount"`
	TotalOutgoingCount int32          `thrift:"totalOutgoingCount,2" json:"totalOutgoingCount"`
	RecentIncomings    *FriendRequest `thrift:"recentIncomings,3" json:"recentIncomings"`
	RecentOutgoings    *FriendRequest `thrift:"recentOutgoings,4" json:"recentOutgoings"`
	TotalIncomingLimit int32          `thrift:"totalIncomingLimit,5" json:"totalIncomingLimit"`
	TotalOutgoingLimit int32          `thrift:"totalOutgoingLimit,6" json:"totalOutgoingLimit"`
}

func NewFriendRequestsInfo() *FriendRequestsInfo {
	return &FriendRequestsInfo{}
}

func (p *FriendRequestsInfo) GetTotalIncomingCount() int32 {
	return p.TotalIncomingCount
}

func (p *FriendRequestsInfo) GetTotalOutgoingCount() int32 {
	return p.TotalOutgoingCount
}

var FriendRequestsInfo_RecentIncomings_DEFAULT *FriendRequest

func (p *FriendRequestsInfo) GetRecentIncomings() *FriendRequest {
	if !p.IsSetRecentIncomings() {
		return FriendRequestsInfo_RecentIncomings_DEFAULT
	}
	return p.RecentIncomings
}

var FriendRequestsInfo_RecentOutgoings_DEFAULT *FriendRequest

func (p *FriendRequestsInfo) GetRecentOutgoings() *FriendRequest {
	if !p.IsSetRecentOutgoings() {
		return FriendRequestsInfo_RecentOutgoings_DEFAULT
	}
	return p.RecentOutgoings
}

func (p *FriendRequestsInfo) GetTotalIncomingLimit() int32 {
	return p.TotalIncomingLimit
}

func (p *FriendRequestsInfo) GetTotalOutgoingLimit() int32 {
	return p.TotalOutgoingLimit
}
func (p *FriendRequestsInfo) IsSetRecentIncomings() bool {
	return p.RecentIncomings != nil
}

func (p *FriendRequestsInfo) IsSetRecentOutgoings() bool {
	return p.RecentOutgoings != nil
}

func (p *FriendRequestsInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FriendRequestsInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TotalIncomingCount = v
	}
	return nil
}

func (p *FriendRequestsInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TotalOutgoingCount = v
	}
	return nil
}

func (p *FriendRequestsInfo) readField3(iprot thrift.TProtocol) error {
	p.RecentIncomings = &FriendRequest{}
	if err := p.RecentIncomings.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RecentIncomings), err)
	}
	return nil
}

func (p *FriendRequestsInfo) readField4(iprot thrift.TProtocol) error {
	p.RecentOutgoings = &FriendRequest{}
	if err := p.RecentOutgoings.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RecentOutgoings), err)
	}
	return nil
}

func (p *FriendRequestsInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.TotalIncomingLimit = v
	}
	return nil
}

func (p *FriendRequestsInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.TotalOutgoingLimit = v
	}
	return nil
}

func (p *FriendRequestsInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FriendRequestsInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FriendRequestsInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalIncomingCount", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:totalIncomingCount: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalIncomingCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalIncomingCount (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:totalIncomingCount: ", p), err)
	}
	return err
}

func (p *FriendRequestsInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalOutgoingCount", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:totalOutgoingCount: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalOutgoingCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalOutgoingCount (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:totalOutgoingCount: ", p), err)
	}
	return err
}

func (p *FriendRequestsInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recentIncomings", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recentIncomings: ", p), err)
	}
	if err := p.RecentIncomings.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RecentIncomings), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recentIncomings: ", p), err)
	}
	return err
}

func (p *FriendRequestsInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recentOutgoings", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:recentOutgoings: ", p), err)
	}
	if err := p.RecentOutgoings.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RecentOutgoings), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:recentOutgoings: ", p), err)
	}
	return err
}

func (p *FriendRequestsInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalIncomingLimit", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:totalIncomingLimit: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalIncomingLimit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalIncomingLimit (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:totalIncomingLimit: ", p), err)
	}
	return err
}

func (p *FriendRequestsInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalOutgoingLimit", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:totalOutgoingLimit: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalOutgoingLimit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalOutgoingLimit (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:totalOutgoingLimit: ", p), err)
	}
	return err
}

func (p *FriendRequestsInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FriendRequestsInfo(%+v)", *p)
}

// Attributes:
//  - From_
//  - To
//  - ToType
//  - ID
//  - CreatedTime
//  - DeliveredTime
//  - Text
//  - Location
//  - HasContent
//  - ContentType
//  - ContentPreview
//  - ContentMetadata
//  - Chunks
//  - RelatedMessageId
//  - MessageRelationType
//  - ReadCount
type Message struct {
	From_         string  `thrift:"from_,1" json:"from_"`
	To            string  `thrift:"to,2" json:"to"`
	ToType        MIDType `thrift:"toType,3" json:"toType"`
	ID            string  `thrift:"id,4" json:"id"`
	CreatedTime   int64   `thrift:"createdTime,5" json:"createdTime"`
	DeliveredTime int64   `thrift:"deliveredTime,6" json:"deliveredTime"`
	// unused fields # 7 to 9
	Text     string    `thrift:"text,10" json:"text"`
	Location *Location `thrift:"location,11" json:"location"`
	// unused fields # 12 to 13
	HasContent  bool        `thrift:"hasContent,14" json:"hasContent"`
	ContentType ContentType `thrift:"contentType,15" json:"contentType"`
	// unused field # 16
	ContentPreview  []byte            `thrift:"contentPreview,17" json:"contentPreview"`
	ContentMetadata map[string]string `thrift:"contentMetadata,18" json:"contentMetadata"`
	// unused field # 19
	Chunks              []byte       `thrift:"chunks,20" json:"chunks"`
	RelatedMessageId    string       `thrift:"relatedMessageId,21" json:"relatedMessageId"`
	MessageRelationType RelationType `thrift:"messageRelationType,22" json:"messageRelationType"`
	ReadCount           int32        `thrift:"readCount,23" json:"readCount"`
}

func NewMessage() *Message {
	return &Message{}
}

func (p *Message) GetFrom_() string {
	return p.From_
}

func (p *Message) GetTo() string {
	return p.To
}

func (p *Message) GetToType() MIDType {
	return p.ToType
}

func (p *Message) GetID() string {
	return p.ID
}

func (p *Message) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Message) GetDeliveredTime() int64 {
	return p.DeliveredTime
}

func (p *Message) GetText() string {
	return p.Text
}

var Message_Location_DEFAULT *Location

func (p *Message) GetLocation() *Location {
	if !p.IsSetLocation() {
		return Message_Location_DEFAULT
	}
	return p.Location
}

func (p *Message) GetHasContent() bool {
	return p.HasContent
}

func (p *Message) GetContentType() ContentType {
	return p.ContentType
}

func (p *Message) GetContentPreview() []byte {
	return p.ContentPreview
}

func (p *Message) GetContentMetadata() map[string]string {
	return p.ContentMetadata
}

func (p *Message) GetChunks() []byte {
	return p.Chunks
}

func (p *Message) GetRelatedMessageId() string {
	return p.RelatedMessageId
}

func (p *Message) GetMessageRelationType() RelationType {
	return p.MessageRelationType
}

func (p *Message) GetReadCount() int32 {
	return p.ReadCount
}
func (p *Message) IsSetLocation() bool {
	return p.Location != nil
}

func (p *Message) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Message) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.From_ = v
	}
	return nil
}

func (p *Message) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.To = v
	}
	return nil
}

func (p *Message) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := MIDType(v)
		p.ToType = temp
	}
	return nil
}

func (p *Message) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Message) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Message) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.DeliveredTime = v
	}
	return nil
}

func (p *Message) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Text = v
	}
	return nil
}

func (p *Message) readField11(iprot thrift.TProtocol) error {
	p.Location = &Location{}
	if err := p.Location.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Location), err)
	}
	return nil
}

func (p *Message) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.HasContent = v
	}
	return nil
}

func (p *Message) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		temp := ContentType(v)
		p.ContentType = temp
	}
	return nil
}

func (p *Message) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.ContentPreview = v
	}
	return nil
}

func (p *Message) readField18(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ContentMetadata = tMap
	for i := 0; i < size; i++ {
		var _key22 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key22 = v
		}
		var _val23 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val23 = v
		}
		p.ContentMetadata[_key22] = _val23
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Message) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.Chunks = v
	}
	return nil
}

func (p *Message) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.RelatedMessageId = v
	}
	return nil
}

func (p *Message) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		temp := RelationType(v)
		p.MessageRelationType = temp
	}
	return nil
}

func (p *Message) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.ReadCount = v
	}
	return nil
}

func (p *Message) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Message"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Message) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("from_", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:from_: ", p), err)
	}
	if err := oprot.WriteString(string(p.From_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.from_ (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:from_: ", p), err)
	}
	return err
}

func (p *Message) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("to", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:to: ", p), err)
	}
	if err := oprot.WriteString(string(p.To)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.to (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:to: ", p), err)
	}
	return err
}

func (p *Message) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("toType", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:toType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ToType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:toType: ", p), err)
	}
	return err
}

func (p *Message) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:id: ", p), err)
	}
	return err
}

func (p *Message) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createdTime (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdTime: ", p), err)
	}
	return err
}

func (p *Message) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deliveredTime", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deliveredTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DeliveredTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deliveredTime (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deliveredTime: ", p), err)
	}
	return err
}

func (p *Message) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("text", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:text: ", p), err)
	}
	if err := oprot.WriteString(string(p.Text)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.text (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:text: ", p), err)
	}
	return err
}

func (p *Message) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("location", thrift.STRUCT, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:location: ", p), err)
	}
	if err := p.Location.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Location), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:location: ", p), err)
	}
	return err
}

func (p *Message) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hasContent", thrift.BOOL, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:hasContent: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.HasContent)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hasContent (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:hasContent: ", p), err)
	}
	return err
}

func (p *Message) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentType", thrift.I32, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:contentType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ContentType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.contentType (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:contentType: ", p), err)
	}
	return err
}

func (p *Message) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentPreview", thrift.STRING, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:contentPreview: ", p), err)
	}
	if err := oprot.WriteBinary(p.ContentPreview); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.contentPreview (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:contentPreview: ", p), err)
	}
	return err
}

func (p *Message) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentMetadata", thrift.MAP, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:contentMetadata: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ContentMetadata)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.ContentMetadata {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:contentMetadata: ", p), err)
	}
	return err
}

func (p *Message) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chunks", thrift.STRING, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:chunks: ", p), err)
	}
	if err := oprot.WriteBinary(p.Chunks); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chunks (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:chunks: ", p), err)
	}
	return err
}

func (p *Message) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("relatedMessageId", thrift.STRING, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:relatedMessageId: ", p), err)
	}
	if err := oprot.WriteString(string(p.RelatedMessageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.relatedMessageId (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:relatedMessageId: ", p), err)
	}
	return err
}

func (p *Message) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageRelationType", thrift.I32, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:messageRelationType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MessageRelationType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.messageRelationType (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:messageRelationType: ", p), err)
	}
	return err
}

func (p *Message) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("readCount", thrift.I32, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:readCount: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReadCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.readCount (23) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:readCount: ", p), err)
	}
	return err
}

func (p *Message) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Message(%+v)", *p)
}

// Attributes:
//  - Revision
//  - CreatedTime
//  - Type
//  - ReqSeq
//  - Status
//  - Param1
//  - Param2
//  - Param3
//  - Message
type MessageOperation struct {
	Revision    int64                `thrift:"revision,1" json:"revision"`
	CreatedTime int64                `thrift:"createdTime,2" json:"createdTime"`
	Type        MessageOperationType `thrift:"type,3" json:"type"`
	ReqSeq      int32                `thrift:"reqSeq,4" json:"reqSeq"`
	Status      OpStatus             `thrift:"status,5" json:"status"`
	// unused fields # 6 to 9
	Param1 string `thrift:"param1,10" json:"param1"`
	Param2 string `thrift:"param2,11" json:"param2"`
	Param3 string `thrift:"param3,12" json:"param3"`
	// unused fields # 13 to 19
	Message *Message `thrift:"message,20" json:"message"`
}

func NewMessageOperation() *MessageOperation {
	return &MessageOperation{}
}

func (p *MessageOperation) GetRevision() int64 {
	return p.Revision
}

func (p *MessageOperation) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *MessageOperation) GetType() MessageOperationType {
	return p.Type
}

func (p *MessageOperation) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *MessageOperation) GetStatus() OpStatus {
	return p.Status
}

func (p *MessageOperation) GetParam1() string {
	return p.Param1
}

func (p *MessageOperation) GetParam2() string {
	return p.Param2
}

func (p *MessageOperation) GetParam3() string {
	return p.Param3
}

var MessageOperation_Message_DEFAULT *Message

func (p *MessageOperation) GetMessage() *Message {
	if !p.IsSetMessage() {
		return MessageOperation_Message_DEFAULT
	}
	return p.Message
}
func (p *MessageOperation) IsSetMessage() bool {
	return p.Message != nil
}

func (p *MessageOperation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MessageOperation) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Revision = v
	}
	return nil
}

func (p *MessageOperation) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *MessageOperation) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := MessageOperationType(v)
		p.Type = temp
	}
	return nil
}

func (p *MessageOperation) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *MessageOperation) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := OpStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *MessageOperation) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Param1 = v
	}
	return nil
}

func (p *MessageOperation) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Param2 = v
	}
	return nil
}

func (p *MessageOperation) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Param3 = v
	}
	return nil
}

func (p *MessageOperation) readField20(iprot thrift.TProtocol) error {
	p.Message = &Message{}
	if err := p.Message.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
	}
	return nil
}

func (p *MessageOperation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MessageOperation"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MessageOperation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("revision", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:revision: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Revision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.revision (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:revision: ", p), err)
	}
	return err
}

func (p *MessageOperation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err)
	}
	return err
}

func (p *MessageOperation) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
	}
	return err
}

func (p *MessageOperation) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reqSeq: ", p), err)
	}
	return err
}

func (p *MessageOperation) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err)
	}
	return err
}

func (p *MessageOperation) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("param1", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:param1: ", p), err)
	}
	if err := oprot.WriteString(string(p.Param1)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.param1 (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:param1: ", p), err)
	}
	return err
}

func (p *MessageOperation) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("param2", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:param2: ", p), err)
	}
	if err := oprot.WriteString(string(p.Param2)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.param2 (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:param2: ", p), err)
	}
	return err
}

func (p *MessageOperation) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("param3", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:param3: ", p), err)
	}
	if err := oprot.WriteString(string(p.Param3)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.param3 (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:param3: ", p), err)
	}
	return err
}

func (p *MessageOperation) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:message: ", p), err)
	}
	if err := p.Message.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:message: ", p), err)
	}
	return err
}

func (p *MessageOperation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageOperation(%+v)", *p)
}

// Attributes:
//  - Operations
//  - EndFlag
type MessageOperations struct {
	Operations []*MessageOperation `thrift:"operations,1" json:"operations"`
	EndFlag    bool                `thrift:"endFlag,2" json:"endFlag"`
}

func NewMessageOperations() *MessageOperations {
	return &MessageOperations{}
}

func (p *MessageOperations) GetOperations() []*MessageOperation {
	return p.Operations
}

func (p *MessageOperations) GetEndFlag() bool {
	return p.EndFlag
}
func (p *MessageOperations) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MessageOperations) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*MessageOperation, 0, size)
	p.Operations = tSlice
	for i := 0; i < size; i++ {
		_elem24 := &MessageOperation{}
		if err := _elem24.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem24), err)
		}
		p.Operations = append(p.Operations, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MessageOperations) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EndFlag = v
	}
	return nil
}

func (p *MessageOperations) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MessageOperations"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MessageOperations) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operations", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:operations: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Operations)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Operations {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:operations: ", p), err)
	}
	return err
}

func (p *MessageOperations) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endFlag", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:endFlag: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.EndFlag)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endFlag (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:endFlag: ", p), err)
	}
	return err
}

func (p *MessageOperations) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageOperations(%+v)", *p)
}

// Attributes:
//  - CreateTime
//  - RegionCode
//  - Identities
type MetaProfile struct {
	CreateTime int64                       `thrift:"createTime,1" json:"createTime"`
	RegionCode string                      `thrift:"regionCode,2" json:"regionCode"`
	Identities map[RegistrationType]string `thrift:"identities,3" json:"identities"`
}

func NewMetaProfile() *MetaProfile {
	return &MetaProfile{}
}

func (p *MetaProfile) GetCreateTime() int64 {
	return p.CreateTime
}

func (p *MetaProfile) GetRegionCode() string {
	return p.RegionCode
}

func (p *MetaProfile) GetIdentities() map[RegistrationType]string {
	return p.Identities
}
func (p *MetaProfile) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetaProfile) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *MetaProfile) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RegionCode = v
	}
	return nil
}

func (p *MetaProfile) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[RegistrationType]string, size)
	p.Identities = tMap
	for i := 0; i < size; i++ {
		var _key25 RegistrationType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := RegistrationType(v)
			_key25 = temp
		}
		var _val26 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val26 = v
		}
		p.Identities[_key25] = _val26
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *MetaProfile) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MetaProfile"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetaProfile) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createTime", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createTime (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createTime: ", p), err)
	}
	return err
}

func (p *MetaProfile) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("regionCode", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:regionCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.RegionCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.regionCode (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:regionCode: ", p), err)
	}
	return err
}

func (p *MetaProfile) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identities", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:identities: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.Identities)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Identities {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:identities: ", p), err)
	}
	return err
}

func (p *MetaProfile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetaProfile(%+v)", *p)
}

// Attributes:
//  - ID
//  - From_
//  - To
//  - FromChannel
//  - ToChannel
//  - Revision
//  - CreatedTime
//  - Content
type NotificationItem struct {
	ID          string `thrift:"id,1" json:"id"`
	From_       string `thrift:"from_,2" json:"from_"`
	To          string `thrift:"to,3" json:"to"`
	FromChannel string `thrift:"fromChannel,4" json:"fromChannel"`
	ToChannel   string `thrift:"toChannel,5" json:"toChannel"`
	// unused field # 6
	Revision    int64             `thrift:"revision,7" json:"revision"`
	CreatedTime int64             `thrift:"createdTime,8" json:"createdTime"`
	Content     map[string]string `thrift:"content,9" json:"content"`
}

func NewNotificationItem() *NotificationItem {
	return &NotificationItem{}
}

func (p *NotificationItem) GetID() string {
	return p.ID
}

func (p *NotificationItem) GetFrom_() string {
	return p.From_
}

func (p *NotificationItem) GetTo() string {
	return p.To
}

func (p *NotificationItem) GetFromChannel() string {
	return p.FromChannel
}

func (p *NotificationItem) GetToChannel() string {
	return p.ToChannel
}

func (p *NotificationItem) GetRevision() int64 {
	return p.Revision
}

func (p *NotificationItem) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *NotificationItem) GetContent() map[string]string {
	return p.Content
}
func (p *NotificationItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NotificationItem) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *NotificationItem) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.From_ = v
	}
	return nil
}

func (p *NotificationItem) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.To = v
	}
	return nil
}

func (p *NotificationItem) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.FromChannel = v
	}
	return nil
}

func (p *NotificationItem) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ToChannel = v
	}
	return nil
}

func (p *NotificationItem) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Revision = v
	}
	return nil
}

func (p *NotificationItem) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *NotificationItem) readField9(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Content = tMap
	for i := 0; i < size; i++ {
		var _key27 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key27 = v
		}
		var _val28 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val28 = v
		}
		p.Content[_key27] = _val28
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *NotificationItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NotificationItem"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NotificationItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *NotificationItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("from_", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:from_: ", p), err)
	}
	if err := oprot.WriteString(string(p.From_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.from_ (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:from_: ", p), err)
	}
	return err
}

func (p *NotificationItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("to", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:to: ", p), err)
	}
	if err := oprot.WriteString(string(p.To)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.to (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:to: ", p), err)
	}
	return err
}

func (p *NotificationItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromChannel", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fromChannel: ", p), err)
	}
	if err := oprot.WriteString(string(p.FromChannel)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromChannel (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fromChannel: ", p), err)
	}
	return err
}

func (p *NotificationItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("toChannel", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:toChannel: ", p), err)
	}
	if err := oprot.WriteString(string(p.ToChannel)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toChannel (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:toChannel: ", p), err)
	}
	return err
}

func (p *NotificationItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("revision", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:revision: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Revision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.revision (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:revision: ", p), err)
	}
	return err
}

func (p *NotificationItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:createdTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createdTime (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:createdTime: ", p), err)
	}
	return err
}

func (p *NotificationItem) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("content", thrift.MAP, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:content: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Content)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Content {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:content: ", p), err)
	}
	return err
}

func (p *NotificationItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotificationItem(%+v)", *p)
}

// Attributes:
//  - FetchMode
//  - ItemList
type NotificationFetchResult_ struct {
	FetchMode NotificationItemFetchMode `thrift:"fetchMode,1" json:"fetchMode"`
	ItemList  []*NotificationItem       `thrift:"itemList,2" json:"itemList"`
}

func NewNotificationFetchResult_() *NotificationFetchResult_ {
	return &NotificationFetchResult_{}
}

func (p *NotificationFetchResult_) GetFetchMode() NotificationItemFetchMode {
	return p.FetchMode
}

func (p *NotificationFetchResult_) GetItemList() []*NotificationItem {
	return p.ItemList
}
func (p *NotificationFetchResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NotificationFetchResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := NotificationItemFetchMode(v)
		p.FetchMode = temp
	}
	return nil
}

func (p *NotificationFetchResult_) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*NotificationItem, 0, size)
	p.ItemList = tSlice
	for i := 0; i < size; i++ {
		_elem29 := &NotificationItem{}
		if err := _elem29.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
		}
		p.ItemList = append(p.ItemList, _elem29)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NotificationFetchResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NotificationFetchResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NotificationFetchResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fetchMode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fetchMode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FetchMode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fetchMode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fetchMode: ", p), err)
	}
	return err
}

func (p *NotificationFetchResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("itemList", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ItemList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ItemList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemList: ", p), err)
	}
	return err
}

func (p *NotificationFetchResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotificationFetchResult_(%+v)", *p)
}

// Attributes:
//  - Revision
//  - CreatedTime
//  - Type
//  - ReqSeq
//  - Checksum
//  - Status
//  - Param1
//  - Param2
//  - Param3
//  - Message
type Operation struct {
	Revision    int64  `thrift:"revision,1" json:"revision"`
	CreatedTime int64  `thrift:"createdTime,2" json:"createdTime"`
	Type        OpType `thrift:"type,3" json:"type"`
	ReqSeq      int32  `thrift:"reqSeq,4" json:"reqSeq"`
	Checksum    string `thrift:"checksum,5" json:"checksum"`
	// unused field # 6
	Status OpStatus `thrift:"status,7" json:"status"`
	// unused fields # 8 to 9
	Param1 string `thrift:"param1,10" json:"param1"`
	Param2 string `thrift:"param2,11" json:"param2"`
	Param3 string `thrift:"param3,12" json:"param3"`
	// unused fields # 13 to 19
	Message *Message `thrift:"message,20" json:"message"`
}

func NewOperation() *Operation {
	return &Operation{}
}

func (p *Operation) GetRevision() int64 {
	return p.Revision
}

func (p *Operation) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Operation) GetType() OpType {
	return p.Type
}

func (p *Operation) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *Operation) GetChecksum() string {
	return p.Checksum
}

func (p *Operation) GetStatus() OpStatus {
	return p.Status
}

func (p *Operation) GetParam1() string {
	return p.Param1
}

func (p *Operation) GetParam2() string {
	return p.Param2
}

func (p *Operation) GetParam3() string {
	return p.Param3
}

var Operation_Message_DEFAULT *Message

func (p *Operation) GetMessage() *Message {
	if !p.IsSetMessage() {
		return Operation_Message_DEFAULT
	}
	return p.Message
}
func (p *Operation) IsSetMessage() bool {
	return p.Message != nil
}

func (p *Operation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Operation) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Revision = v
	}
	return nil
}

func (p *Operation) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Operation) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := OpType(v)
		p.Type = temp
	}
	return nil
}

func (p *Operation) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *Operation) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Checksum = v
	}
	return nil
}

func (p *Operation) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := OpStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *Operation) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Param1 = v
	}
	return nil
}

func (p *Operation) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Param2 = v
	}
	return nil
}

func (p *Operation) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Param3 = v
	}
	return nil
}

func (p *Operation) readField20(iprot thrift.TProtocol) error {
	p.Message = &Message{}
	if err := p.Message.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
	}
	return nil
}

func (p *Operation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Operation"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Operation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("revision", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:revision: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Revision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.revision (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:revision: ", p), err)
	}
	return err
}

func (p *Operation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err)
	}
	return err
}

func (p *Operation) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
	}
	return err
}

func (p *Operation) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reqSeq: ", p), err)
	}
	return err
}

func (p *Operation) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("checksum", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:checksum: ", p), err)
	}
	if err := oprot.WriteString(string(p.Checksum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.checksum (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:checksum: ", p), err)
	}
	return err
}

func (p *Operation) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:status: ", p), err)
	}
	return err
}

func (p *Operation) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("param1", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:param1: ", p), err)
	}
	if err := oprot.WriteString(string(p.Param1)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.param1 (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:param1: ", p), err)
	}
	return err
}

func (p *Operation) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("param2", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:param2: ", p), err)
	}
	if err := oprot.WriteString(string(p.Param2)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.param2 (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:param2: ", p), err)
	}
	return err
}

func (p *Operation) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("param3", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:param3: ", p), err)
	}
	if err := oprot.WriteString(string(p.Param3)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.param3 (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:param3: ", p), err)
	}
	return err
}

func (p *Operation) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:message: ", p), err)
	}
	if err := p.Message.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:message: ", p), err)
	}
	return err
}

func (p *Operation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Operation(%+v)", *p)
}

// Attributes:
//  - ReceiverMid
//  - ProductId
//  - Language
//  - Location
//  - Currency
//  - Price
//  - AppStoreCode
//  - MessageText
//  - MessageTemplate
//  - PackageId
type PaymentReservation struct {
	ReceiverMid     string      `thrift:"receiverMid,1" json:"receiverMid"`
	ProductId       string      `thrift:"productId,2" json:"productId"`
	Language        string      `thrift:"language,3" json:"language"`
	Location        string      `thrift:"location,4" json:"location"`
	Currency        string      `thrift:"currency,5" json:"currency"`
	Price           string      `thrift:"price,6" json:"price"`
	AppStoreCode    PaymentType `thrift:"appStoreCode,7" json:"appStoreCode"`
	MessageText     string      `thrift:"messageText,8" json:"messageText"`
	MessageTemplate int32       `thrift:"messageTemplate,9" json:"messageTemplate"`
	PackageId       int64       `thrift:"packageId,10" json:"packageId"`
}

func NewPaymentReservation() *PaymentReservation {
	return &PaymentReservation{}
}

func (p *PaymentReservation) GetReceiverMid() string {
	return p.ReceiverMid
}

func (p *PaymentReservation) GetProductId() string {
	return p.ProductId
}

func (p *PaymentReservation) GetLanguage() string {
	return p.Language
}

func (p *PaymentReservation) GetLocation() string {
	return p.Location
}

func (p *PaymentReservation) GetCurrency() string {
	return p.Currency
}

func (p *PaymentReservation) GetPrice() string {
	return p.Price
}

func (p *PaymentReservation) GetAppStoreCode() PaymentType {
	return p.AppStoreCode
}

func (p *PaymentReservation) GetMessageText() string {
	return p.MessageText
}

func (p *PaymentReservation) GetMessageTemplate() int32 {
	return p.MessageTemplate
}

func (p *PaymentReservation) GetPackageId() int64 {
	return p.PackageId
}
func (p *PaymentReservation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentReservation) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReceiverMid = v
	}
	return nil
}

func (p *PaymentReservation) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ProductId = v
	}
	return nil
}

func (p *PaymentReservation) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *PaymentReservation) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Location = v
	}
	return nil
}

func (p *PaymentReservation) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Currency = v
	}
	return nil
}

func (p *PaymentReservation) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *PaymentReservation) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := PaymentType(v)
		p.AppStoreCode = temp
	}
	return nil
}

func (p *PaymentReservation) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.MessageText = v
	}
	return nil
}

func (p *PaymentReservation) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.MessageTemplate = v
	}
	return nil
}

func (p *PaymentReservation) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.PackageId = v
	}
	return nil
}

func (p *PaymentReservation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PaymentReservation"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentReservation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiverMid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:receiverMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ReceiverMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.receiverMid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:receiverMid: ", p), err)
	}
	return err
}

func (p *PaymentReservation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("productId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:productId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ProductId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.productId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:productId: ", p), err)
	}
	return err
}

func (p *PaymentReservation) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:language: ", p), err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.language (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:language: ", p), err)
	}
	return err
}

func (p *PaymentReservation) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("location", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:location: ", p), err)
	}
	if err := oprot.WriteString(string(p.Location)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.location (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:location: ", p), err)
	}
	return err
}

func (p *PaymentReservation) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currency", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:currency: ", p), err)
	}
	if err := oprot.WriteString(string(p.Currency)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currency (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:currency: ", p), err)
	}
	return err
}

func (p *PaymentReservation) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("price", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:price: ", p), err)
	}
	if err := oprot.WriteString(string(p.Price)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.price (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:price: ", p), err)
	}
	return err
}

func (p *PaymentReservation) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appStoreCode", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:appStoreCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AppStoreCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appStoreCode (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:appStoreCode: ", p), err)
	}
	return err
}

func (p *PaymentReservation) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageText", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:messageText: ", p), err)
	}
	if err := oprot.WriteString(string(p.MessageText)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.messageText (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:messageText: ", p), err)
	}
	return err
}

func (p *PaymentReservation) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageTemplate", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:messageTemplate: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MessageTemplate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.messageTemplate (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:messageTemplate: ", p), err)
	}
	return err
}

func (p *PaymentReservation) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("packageId", thrift.I64, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:packageId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.PackageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.packageId (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:packageId: ", p), err)
	}
	return err
}

func (p *PaymentReservation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentReservation(%+v)", *p)
}

// Attributes:
//  - OrderId
//  - ConfirmUrl
//  - Extras
type PaymentReservationResult_ struct {
	OrderId    string            `thrift:"orderId,1" json:"orderId"`
	ConfirmUrl string            `thrift:"confirmUrl,2" json:"confirmUrl"`
	Extras     map[string]string `thrift:"extras,3" json:"extras"`
}

func NewPaymentReservationResult_() *PaymentReservationResult_ {
	return &PaymentReservationResult_{}
}

func (p *PaymentReservationResult_) GetOrderId() string {
	return p.OrderId
}

func (p *PaymentReservationResult_) GetConfirmUrl() string {
	return p.ConfirmUrl
}

func (p *PaymentReservationResult_) GetExtras() map[string]string {
	return p.Extras
}
func (p *PaymentReservationResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentReservationResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *PaymentReservationResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ConfirmUrl = v
	}
	return nil
}

func (p *PaymentReservationResult_) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extras = tMap
	for i := 0; i < size; i++ {
		var _key30 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key30 = v
		}
		var _val31 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val31 = v
		}
		p.Extras[_key30] = _val31
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *PaymentReservationResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PaymentReservationResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentReservationResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orderId: ", p), err)
	}
	if err := oprot.WriteString(string(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orderId: ", p), err)
	}
	return err
}

func (p *PaymentReservationResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confirmUrl", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:confirmUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.ConfirmUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.confirmUrl (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:confirmUrl: ", p), err)
	}
	return err
}

func (p *PaymentReservationResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extras", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extras: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extras)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Extras {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extras: ", p), err)
	}
	return err
}

func (p *PaymentReservationResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentReservationResult_(%+v)", *p)
}

// Attributes:
//  - ProductId
//  - PackageId
//  - Version
//  - AuthorName
//  - OnSale
//  - ValidDays
//  - SaleType
//  - Copyright
//  - Title
//  - DescriptionText
//  - ShopOrderId
//  - FromMid
//  - ToMid
//  - ValidUntil
//  - PriceTier
//  - Price
//  - Currency
//  - CurrencySymbol
//  - PaymentType
//  - CreateDate
//  - OwnFlag
//  - EventType
//  - UrlSchema
//  - DownloadUrl
//  - BuddyMid
//  - PublishSince
//  - NewFlag_
//  - MissionFlag
type Product struct {
	ProductId       string           `thrift:"productId,1" json:"productId"`
	PackageId       int64            `thrift:"packageId,2" json:"packageId"`
	Version         int32            `thrift:"version,3" json:"version"`
	AuthorName      string           `thrift:"authorName,4" json:"authorName"`
	OnSale          bool             `thrift:"onSale,5" json:"onSale"`
	ValidDays       int32            `thrift:"validDays,6" json:"validDays"`
	SaleType        int32            `thrift:"saleType,7" json:"saleType"`
	Copyright       string           `thrift:"copyright,8" json:"copyright"`
	Title           string           `thrift:"title,9" json:"title"`
	DescriptionText string           `thrift:"descriptionText,10" json:"descriptionText"`
	ShopOrderId     int64            `thrift:"shopOrderId,11" json:"shopOrderId"`
	FromMid         string           `thrift:"fromMid,12" json:"fromMid"`
	ToMid           string           `thrift:"toMid,13" json:"toMid"`
	ValidUntil      int64            `thrift:"validUntil,14" json:"validUntil"`
	PriceTier       int32            `thrift:"priceTier,15" json:"priceTier"`
	Price           string           `thrift:"price,16" json:"price"`
	Currency        string           `thrift:"currency,17" json:"currency"`
	CurrencySymbol  string           `thrift:"currencySymbol,18" json:"currencySymbol"`
	PaymentType     PaymentType      `thrift:"paymentType,19" json:"paymentType"`
	CreateDate      int64            `thrift:"createDate,20" json:"createDate"`
	OwnFlag         bool             `thrift:"ownFlag,21" json:"ownFlag"`
	EventType       ProductEventType `thrift:"eventType,22" json:"eventType"`
	UrlSchema       string           `thrift:"urlSchema,23" json:"urlSchema"`
	DownloadUrl     string           `thrift:"downloadUrl,24" json:"downloadUrl"`
	BuddyMid        string           `thrift:"buddyMid,25" json:"buddyMid"`
	PublishSince    int64            `thrift:"publishSince,26" json:"publishSince"`
	NewFlag_        bool             `thrift:"newFlag,27" json:"newFlag"`
	MissionFlag     bool             `thrift:"missionFlag,28" json:"missionFlag"`
}

func NewProduct() *Product {
	return &Product{}
}

func (p *Product) GetProductId() string {
	return p.ProductId
}

func (p *Product) GetPackageId() int64 {
	return p.PackageId
}

func (p *Product) GetVersion() int32 {
	return p.Version
}

func (p *Product) GetAuthorName() string {
	return p.AuthorName
}

func (p *Product) GetOnSale() bool {
	return p.OnSale
}

func (p *Product) GetValidDays() int32 {
	return p.ValidDays
}

func (p *Product) GetSaleType() int32 {
	return p.SaleType
}

func (p *Product) GetCopyright() string {
	return p.Copyright
}

func (p *Product) GetTitle() string {
	return p.Title
}

func (p *Product) GetDescriptionText() string {
	return p.DescriptionText
}

func (p *Product) GetShopOrderId() int64 {
	return p.ShopOrderId
}

func (p *Product) GetFromMid() string {
	return p.FromMid
}

func (p *Product) GetToMid() string {
	return p.ToMid
}

func (p *Product) GetValidUntil() int64 {
	return p.ValidUntil
}

func (p *Product) GetPriceTier() int32 {
	return p.PriceTier
}

func (p *Product) GetPrice() string {
	return p.Price
}

func (p *Product) GetCurrency() string {
	return p.Currency
}

func (p *Product) GetCurrencySymbol() string {
	return p.CurrencySymbol
}

func (p *Product) GetPaymentType() PaymentType {
	return p.PaymentType
}

func (p *Product) GetCreateDate() int64 {
	return p.CreateDate
}

func (p *Product) GetOwnFlag() bool {
	return p.OwnFlag
}

func (p *Product) GetEventType() ProductEventType {
	return p.EventType
}

func (p *Product) GetUrlSchema() string {
	return p.UrlSchema
}

func (p *Product) GetDownloadUrl() string {
	return p.DownloadUrl
}

func (p *Product) GetBuddyMid() string {
	return p.BuddyMid
}

func (p *Product) GetPublishSince() int64 {
	return p.PublishSince
}

func (p *Product) GetNewFlag_() bool {
	return p.NewFlag_
}

func (p *Product) GetMissionFlag() bool {
	return p.MissionFlag
}
func (p *Product) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.readField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.readField26(iprot); err != nil {
				return err
			}
		case 27:
			if err := p.readField27(iprot); err != nil {
				return err
			}
		case 28:
			if err := p.readField28(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Product) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProductId = v
	}
	return nil
}

func (p *Product) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PackageId = v
	}
	return nil
}

func (p *Product) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *Product) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AuthorName = v
	}
	return nil
}

func (p *Product) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.OnSale = v
	}
	return nil
}

func (p *Product) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ValidDays = v
	}
	return nil
}

func (p *Product) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SaleType = v
	}
	return nil
}

func (p *Product) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Copyright = v
	}
	return nil
}

func (p *Product) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *Product) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.DescriptionText = v
	}
	return nil
}

func (p *Product) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.ShopOrderId = v
	}
	return nil
}

func (p *Product) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.FromMid = v
	}
	return nil
}

func (p *Product) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.ToMid = v
	}
	return nil
}

func (p *Product) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.ValidUntil = v
	}
	return nil
}

func (p *Product) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.PriceTier = v
	}
	return nil
}

func (p *Product) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *Product) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.Currency = v
	}
	return nil
}

func (p *Product) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.CurrencySymbol = v
	}
	return nil
}

func (p *Product) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		temp := PaymentType(v)
		p.PaymentType = temp
	}
	return nil
}

func (p *Product) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.CreateDate = v
	}
	return nil
}

func (p *Product) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.OwnFlag = v
	}
	return nil
}

func (p *Product) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		temp := ProductEventType(v)
		p.EventType = temp
	}
	return nil
}

func (p *Product) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.UrlSchema = v
	}
	return nil
}

func (p *Product) readField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.DownloadUrl = v
	}
	return nil
}

func (p *Product) readField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.BuddyMid = v
	}
	return nil
}

func (p *Product) readField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 26: ", err)
	} else {
		p.PublishSince = v
	}
	return nil
}

func (p *Product) readField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 27: ", err)
	} else {
		p.NewFlag_ = v
	}
	return nil
}

func (p *Product) readField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 28: ", err)
	} else {
		p.MissionFlag = v
	}
	return nil
}

func (p *Product) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Product"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField27(oprot); err != nil {
		return err
	}
	if err := p.writeField28(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Product) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("productId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:productId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ProductId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.productId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:productId: ", p), err)
	}
	return err
}

func (p *Product) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("packageId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:packageId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.PackageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.packageId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:packageId: ", p), err)
	}
	return err
}

func (p *Product) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err)
	}
	return err
}

func (p *Product) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authorName", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:authorName: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthorName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authorName (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:authorName: ", p), err)
	}
	return err
}

func (p *Product) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("onSale", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:onSale: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.OnSale)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.onSale (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:onSale: ", p), err)
	}
	return err
}

func (p *Product) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("validDays", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:validDays: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ValidDays)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.validDays (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:validDays: ", p), err)
	}
	return err
}

func (p *Product) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("saleType", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:saleType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SaleType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.saleType (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:saleType: ", p), err)
	}
	return err
}

func (p *Product) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("copyright", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:copyright: ", p), err)
	}
	if err := oprot.WriteString(string(p.Copyright)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.copyright (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:copyright: ", p), err)
	}
	return err
}

func (p *Product) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:title: ", p), err)
	}
	return err
}

func (p *Product) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("descriptionText", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:descriptionText: ", p), err)
	}
	if err := oprot.WriteString(string(p.DescriptionText)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.descriptionText (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:descriptionText: ", p), err)
	}
	return err
}

func (p *Product) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("shopOrderId", thrift.I64, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:shopOrderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ShopOrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.shopOrderId (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:shopOrderId: ", p), err)
	}
	return err
}

func (p *Product) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromMid", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:fromMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.FromMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromMid (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:fromMid: ", p), err)
	}
	return err
}

func (p *Product) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("toMid", thrift.STRING, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:toMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ToMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toMid (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:toMid: ", p), err)
	}
	return err
}

func (p *Product) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("validUntil", thrift.I64, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:validUntil: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ValidUntil)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.validUntil (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:validUntil: ", p), err)
	}
	return err
}

func (p *Product) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("priceTier", thrift.I32, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:priceTier: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PriceTier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.priceTier (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:priceTier: ", p), err)
	}
	return err
}

func (p *Product) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("price", thrift.STRING, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:price: ", p), err)
	}
	if err := oprot.WriteString(string(p.Price)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.price (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:price: ", p), err)
	}
	return err
}

func (p *Product) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currency", thrift.STRING, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:currency: ", p), err)
	}
	if err := oprot.WriteString(string(p.Currency)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currency (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:currency: ", p), err)
	}
	return err
}

func (p *Product) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currencySymbol", thrift.STRING, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:currencySymbol: ", p), err)
	}
	if err := oprot.WriteString(string(p.CurrencySymbol)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currencySymbol (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:currencySymbol: ", p), err)
	}
	return err
}

func (p *Product) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paymentType", thrift.I32, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:paymentType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PaymentType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.paymentType (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:paymentType: ", p), err)
	}
	return err
}

func (p *Product) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createDate", thrift.I64, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:createDate: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreateDate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createDate (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:createDate: ", p), err)
	}
	return err
}

func (p *Product) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ownFlag", thrift.BOOL, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:ownFlag: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.OwnFlag)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ownFlag (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:ownFlag: ", p), err)
	}
	return err
}

func (p *Product) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eventType", thrift.I32, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:eventType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EventType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.eventType (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:eventType: ", p), err)
	}
	return err
}

func (p *Product) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("urlSchema", thrift.STRING, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:urlSchema: ", p), err)
	}
	if err := oprot.WriteString(string(p.UrlSchema)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.urlSchema (23) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:urlSchema: ", p), err)
	}
	return err
}

func (p *Product) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("downloadUrl", thrift.STRING, 24); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:downloadUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.DownloadUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.downloadUrl (24) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 24:downloadUrl: ", p), err)
	}
	return err
}

func (p *Product) writeField25(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("buddyMid", thrift.STRING, 25); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:buddyMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.BuddyMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.buddyMid (25) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 25:buddyMid: ", p), err)
	}
	return err
}

func (p *Product) writeField26(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("publishSince", thrift.I64, 26); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:publishSince: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.PublishSince)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.publishSince (26) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 26:publishSince: ", p), err)
	}
	return err
}

func (p *Product) writeField27(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newFlag", thrift.BOOL, 27); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:newFlag: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NewFlag_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.newFlag (27) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 27:newFlag: ", p), err)
	}
	return err
}

func (p *Product) writeField28(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("missionFlag", thrift.BOOL, 28); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:missionFlag: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.MissionFlag)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.missionFlag (28) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 28:missionFlag: ", p), err)
	}
	return err
}

func (p *Product) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Product(%+v)", *p)
}

// Attributes:
//  - HasNext
//  - BannerSequence
//  - BannerTargetType
//  - BannerTargetPath
//  - ProductList
//  - BannerLang
type ProductList struct {
	HasNext bool `thrift:"hasNext,1" json:"hasNext"`
	// unused fields # 2 to 3
	BannerSequence   int64                 `thrift:"bannerSequence,4" json:"bannerSequence"`
	BannerTargetType ProductBannerLinkType `thrift:"bannerTargetType,5" json:"bannerTargetType"`
	BannerTargetPath string                `thrift:"bannerTargetPath,6" json:"bannerTargetPath"`
	ProductList      []*Product            `thrift:"productList,7" json:"productList"`
	BannerLang       string                `thrift:"bannerLang,8" json:"bannerLang"`
}

func NewProductList() *ProductList {
	return &ProductList{}
}

func (p *ProductList) GetHasNext() bool {
	return p.HasNext
}

func (p *ProductList) GetBannerSequence() int64 {
	return p.BannerSequence
}

func (p *ProductList) GetBannerTargetType() ProductBannerLinkType {
	return p.BannerTargetType
}

func (p *ProductList) GetBannerTargetPath() string {
	return p.BannerTargetPath
}

func (p *ProductList) GetProductList() []*Product {
	return p.ProductList
}

func (p *ProductList) GetBannerLang() string {
	return p.BannerLang
}
func (p *ProductList) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProductList) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HasNext = v
	}
	return nil
}

func (p *ProductList) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.BannerSequence = v
	}
	return nil
}

func (p *ProductList) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := ProductBannerLinkType(v)
		p.BannerTargetType = temp
	}
	return nil
}

func (p *ProductList) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.BannerTargetPath = v
	}
	return nil
}

func (p *ProductList) readField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Product, 0, size)
	p.ProductList = tSlice
	for i := 0; i < size; i++ {
		_elem32 := &Product{}
		if err := _elem32.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem32), err)
		}
		p.ProductList = append(p.ProductList, _elem32)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ProductList) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.BannerLang = v
	}
	return nil
}

func (p *ProductList) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ProductList"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProductList) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hasNext", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hasNext: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.HasNext)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hasNext (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hasNext: ", p), err)
	}
	return err
}

func (p *ProductList) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bannerSequence", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:bannerSequence: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BannerSequence)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bannerSequence (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:bannerSequence: ", p), err)
	}
	return err
}

func (p *ProductList) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bannerTargetType", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bannerTargetType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.BannerTargetType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bannerTargetType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bannerTargetType: ", p), err)
	}
	return err
}

func (p *ProductList) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bannerTargetPath", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:bannerTargetPath: ", p), err)
	}
	if err := oprot.WriteString(string(p.BannerTargetPath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bannerTargetPath (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:bannerTargetPath: ", p), err)
	}
	return err
}

func (p *ProductList) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("productList", thrift.LIST, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:productList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ProductList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ProductList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:productList: ", p), err)
	}
	return err
}

func (p *ProductList) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bannerLang", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:bannerLang: ", p), err)
	}
	if err := oprot.WriteString(string(p.BannerLang)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bannerLang (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:bannerLang: ", p), err)
	}
	return err
}

func (p *ProductList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductList(%+v)", *p)
}

// Attributes:
//  - ProductId
//  - PackageId
//  - Version
//  - OnSale
//  - ValidUntil
type ProductSimple struct {
	ProductId  string `thrift:"productId,1" json:"productId"`
	PackageId  int64  `thrift:"packageId,2" json:"packageId"`
	Version    int32  `thrift:"version,3" json:"version"`
	OnSale     bool   `thrift:"onSale,4" json:"onSale"`
	ValidUntil int64  `thrift:"validUntil,5" json:"validUntil"`
}

func NewProductSimple() *ProductSimple {
	return &ProductSimple{}
}

func (p *ProductSimple) GetProductId() string {
	return p.ProductId
}

func (p *ProductSimple) GetPackageId() int64 {
	return p.PackageId
}

func (p *ProductSimple) GetVersion() int32 {
	return p.Version
}

func (p *ProductSimple) GetOnSale() bool {
	return p.OnSale
}

func (p *ProductSimple) GetValidUntil() int64 {
	return p.ValidUntil
}
func (p *ProductSimple) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProductSimple) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProductId = v
	}
	return nil
}

func (p *ProductSimple) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PackageId = v
	}
	return nil
}

func (p *ProductSimple) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *ProductSimple) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.OnSale = v
	}
	return nil
}

func (p *ProductSimple) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ValidUntil = v
	}
	return nil
}

func (p *ProductSimple) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ProductSimple"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProductSimple) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("productId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:productId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ProductId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.productId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:productId: ", p), err)
	}
	return err
}

func (p *ProductSimple) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("packageId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:packageId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.PackageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.packageId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:packageId: ", p), err)
	}
	return err
}

func (p *ProductSimple) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err)
	}
	return err
}

func (p *ProductSimple) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("onSale", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:onSale: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.OnSale)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.onSale (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:onSale: ", p), err)
	}
	return err
}

func (p *ProductSimple) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("validUntil", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:validUntil: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ValidUntil)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.validUntil (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:validUntil: ", p), err)
	}
	return err
}

func (p *ProductSimple) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductSimple(%+v)", *p)
}

// Attributes:
//  - HasNext
//  - ReinvokeHour
//  - LastVersionSeq
//  - ProductList
//  - RecentNewReleaseDate
//  - RecentEventReleaseDate
type ProductSimpleList struct {
	HasNext                bool             `thrift:"hasNext,1" json:"hasNext"`
	ReinvokeHour           int32            `thrift:"reinvokeHour,2" json:"reinvokeHour"`
	LastVersionSeq         int64            `thrift:"lastVersionSeq,3" json:"lastVersionSeq"`
	ProductList            []*ProductSimple `thrift:"productList,4" json:"productList"`
	RecentNewReleaseDate   int64            `thrift:"recentNewReleaseDate,5" json:"recentNewReleaseDate"`
	RecentEventReleaseDate int64            `thrift:"recentEventReleaseDate,6" json:"recentEventReleaseDate"`
}

func NewProductSimpleList() *ProductSimpleList {
	return &ProductSimpleList{}
}

func (p *ProductSimpleList) GetHasNext() bool {
	return p.HasNext
}

func (p *ProductSimpleList) GetReinvokeHour() int32 {
	return p.ReinvokeHour
}

func (p *ProductSimpleList) GetLastVersionSeq() int64 {
	return p.LastVersionSeq
}

func (p *ProductSimpleList) GetProductList() []*ProductSimple {
	return p.ProductList
}

func (p *ProductSimpleList) GetRecentNewReleaseDate() int64 {
	return p.RecentNewReleaseDate
}

func (p *ProductSimpleList) GetRecentEventReleaseDate() int64 {
	return p.RecentEventReleaseDate
}
func (p *ProductSimpleList) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProductSimpleList) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HasNext = v
	}
	return nil
}

func (p *ProductSimpleList) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ReinvokeHour = v
	}
	return nil
}

func (p *ProductSimpleList) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LastVersionSeq = v
	}
	return nil
}

func (p *ProductSimpleList) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ProductSimple, 0, size)
	p.ProductList = tSlice
	for i := 0; i < size; i++ {
		_elem33 := &ProductSimple{}
		if err := _elem33.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem33), err)
		}
		p.ProductList = append(p.ProductList, _elem33)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ProductSimpleList) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.RecentNewReleaseDate = v
	}
	return nil
}

func (p *ProductSimpleList) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.RecentEventReleaseDate = v
	}
	return nil
}

func (p *ProductSimpleList) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ProductSimpleList"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProductSimpleList) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hasNext", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hasNext: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.HasNext)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hasNext (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hasNext: ", p), err)
	}
	return err
}

func (p *ProductSimpleList) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reinvokeHour", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reinvokeHour: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReinvokeHour)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reinvokeHour (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reinvokeHour: ", p), err)
	}
	return err
}

func (p *ProductSimpleList) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastVersionSeq", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastVersionSeq: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LastVersionSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastVersionSeq (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastVersionSeq: ", p), err)
	}
	return err
}

func (p *ProductSimpleList) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("productList", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:productList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ProductList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ProductList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:productList: ", p), err)
	}
	return err
}

func (p *ProductSimpleList) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recentNewReleaseDate", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:recentNewReleaseDate: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RecentNewReleaseDate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.recentNewReleaseDate (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:recentNewReleaseDate: ", p), err)
	}
	return err
}

func (p *ProductSimpleList) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recentEventReleaseDate", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:recentEventReleaseDate: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RecentEventReleaseDate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.recentEventReleaseDate (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:recentEventReleaseDate: ", p), err)
	}
	return err
}

func (p *ProductSimpleList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductSimpleList(%+v)", *p)
}

// Attributes:
//  - UUID
//  - TrackId
//  - Title
//  - Oid
//  - Tid
type RingbackTone struct {
	UUID    string            `thrift:"uuid,1" json:"uuid"`
	TrackId string            `thrift:"trackId,2" json:"trackId"`
	Title   string            `thrift:"title,3" json:"title"`
	Oid     string            `thrift:"oid,4" json:"oid"`
	Tid     map[string]string `thrift:"tid,5" json:"tid"`
}

func NewRingbackTone() *RingbackTone {
	return &RingbackTone{}
}

func (p *RingbackTone) GetUUID() string {
	return p.UUID
}

func (p *RingbackTone) GetTrackId() string {
	return p.TrackId
}

func (p *RingbackTone) GetTitle() string {
	return p.Title
}

func (p *RingbackTone) GetOid() string {
	return p.Oid
}

func (p *RingbackTone) GetTid() map[string]string {
	return p.Tid
}
func (p *RingbackTone) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RingbackTone) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UUID = v
	}
	return nil
}

func (p *RingbackTone) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TrackId = v
	}
	return nil
}

func (p *RingbackTone) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *RingbackTone) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Oid = v
	}
	return nil
}

func (p *RingbackTone) readField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Tid = tMap
	for i := 0; i < size; i++ {
		var _key34 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key34 = v
		}
		var _val35 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val35 = v
		}
		p.Tid[_key34] = _val35
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *RingbackTone) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RingbackTone"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RingbackTone) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uuid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uuid: ", p), err)
	}
	if err := oprot.WriteString(string(p.UUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uuid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uuid: ", p), err)
	}
	return err
}

func (p *RingbackTone) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("trackId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:trackId: ", p), err)
	}
	if err := oprot.WriteString(string(p.TrackId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.trackId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:trackId: ", p), err)
	}
	return err
}

func (p *RingbackTone) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:title: ", p), err)
	}
	return err
}

func (p *RingbackTone) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("oid", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:oid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Oid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.oid (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:oid: ", p), err)
	}
	return err
}

func (p *RingbackTone) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tid", thrift.MAP, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tid: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Tid)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Tid {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tid: ", p), err)
	}
	return err
}

func (p *RingbackTone) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RingbackTone(%+v)", *p)
}

// Attributes:
//  - Mid
//  - Userid
//  - Phone
//  - Email
//  - RegionCode
//  - DisplayName
//  - PhoneticName
//  - PictureStatus
//  - ThumbnailUrl
//  - StatusMessage
//  - AllowSearchByUserid
//  - AllowSearchByEmail
//  - PicturePath
//  - MusicProfile
//  - VideoProfile
type Profile struct {
	Mid    string `thrift:"mid,1" json:"mid"`
	Userid string `thrift:"userid,2" json:"userid"`
	// unused fields # 3 to 9
	Phone      string `thrift:"phone,10" json:"phone"`
	Email      string `thrift:"email,11" json:"email"`
	RegionCode string `thrift:"regionCode,12" json:"regionCode"`
	// unused fields # 13 to 19
	DisplayName   string `thrift:"displayName,20" json:"displayName"`
	PhoneticName  string `thrift:"phoneticName,21" json:"phoneticName"`
	PictureStatus string `thrift:"pictureStatus,22" json:"pictureStatus"`
	ThumbnailUrl  string `thrift:"thumbnailUrl,23" json:"thumbnailUrl"`
	StatusMessage string `thrift:"statusMessage,24" json:"statusMessage"`
	// unused fields # 25 to 30
	AllowSearchByUserid bool   `thrift:"allowSearchByUserid,31" json:"allowSearchByUserid"`
	AllowSearchByEmail  bool   `thrift:"allowSearchByEmail,32" json:"allowSearchByEmail"`
	PicturePath         string `thrift:"picturePath,33" json:"picturePath"`
	MusicProfile        string `thrift:"musicProfile,34" json:"musicProfile"`
	VideoProfile        string `thrift:"videoProfile,35" json:"videoProfile"`
}

func NewProfile() *Profile {
	return &Profile{}
}

func (p *Profile) GetMid() string {
	return p.Mid
}

func (p *Profile) GetUserid() string {
	return p.Userid
}

func (p *Profile) GetPhone() string {
	return p.Phone
}

func (p *Profile) GetEmail() string {
	return p.Email
}

func (p *Profile) GetRegionCode() string {
	return p.RegionCode
}

func (p *Profile) GetDisplayName() string {
	return p.DisplayName
}

func (p *Profile) GetPhoneticName() string {
	return p.PhoneticName
}

func (p *Profile) GetPictureStatus() string {
	return p.PictureStatus
}

func (p *Profile) GetThumbnailUrl() string {
	return p.ThumbnailUrl
}

func (p *Profile) GetStatusMessage() string {
	return p.StatusMessage
}

func (p *Profile) GetAllowSearchByUserid() bool {
	return p.AllowSearchByUserid
}

func (p *Profile) GetAllowSearchByEmail() bool {
	return p.AllowSearchByEmail
}

func (p *Profile) GetPicturePath() string {
	return p.PicturePath
}

func (p *Profile) GetMusicProfile() string {
	return p.MusicProfile
}

func (p *Profile) GetVideoProfile() string {
	return p.VideoProfile
}
func (p *Profile) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		case 31:
			if err := p.readField31(iprot); err != nil {
				return err
			}
		case 32:
			if err := p.readField32(iprot); err != nil {
				return err
			}
		case 33:
			if err := p.readField33(iprot); err != nil {
				return err
			}
		case 34:
			if err := p.readField34(iprot); err != nil {
				return err
			}
		case 35:
			if err := p.readField35(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Profile) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *Profile) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Userid = v
	}
	return nil
}

func (p *Profile) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *Profile) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *Profile) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.RegionCode = v
	}
	return nil
}

func (p *Profile) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.DisplayName = v
	}
	return nil
}

func (p *Profile) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.PhoneticName = v
	}
	return nil
}

func (p *Profile) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.PictureStatus = v
	}
	return nil
}

func (p *Profile) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.ThumbnailUrl = v
	}
	return nil
}

func (p *Profile) readField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.StatusMessage = v
	}
	return nil
}

func (p *Profile) readField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 31: ", err)
	} else {
		p.AllowSearchByUserid = v
	}
	return nil
}

func (p *Profile) readField32(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 32: ", err)
	} else {
		p.AllowSearchByEmail = v
	}
	return nil
}

func (p *Profile) readField33(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 33: ", err)
	} else {
		p.PicturePath = v
	}
	return nil
}

func (p *Profile) readField34(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 34: ", err)
	} else {
		p.MusicProfile = v
	}
	return nil
}

func (p *Profile) readField35(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 35: ", err)
	} else {
		p.VideoProfile = v
	}
	return nil
}

func (p *Profile) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Profile"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField31(oprot); err != nil {
		return err
	}
	if err := p.writeField32(oprot); err != nil {
		return err
	}
	if err := p.writeField33(oprot); err != nil {
		return err
	}
	if err := p.writeField34(oprot); err != nil {
		return err
	}
	if err := p.writeField35(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Profile) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err)
	}
	return err
}

func (p *Profile) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Userid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userid: ", p), err)
	}
	return err
}

func (p *Profile) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:phone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phone (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:phone: ", p), err)
	}
	return err
}

func (p *Profile) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:email: ", p), err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.email (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:email: ", p), err)
	}
	return err
}

func (p *Profile) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("regionCode", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:regionCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.RegionCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.regionCode (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:regionCode: ", p), err)
	}
	return err
}

func (p *Profile) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:displayName: ", p), err)
	}
	if err := oprot.WriteString(string(p.DisplayName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.displayName (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:displayName: ", p), err)
	}
	return err
}

func (p *Profile) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phoneticName", thrift.STRING, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:phoneticName: ", p), err)
	}
	if err := oprot.WriteString(string(p.PhoneticName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phoneticName (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:phoneticName: ", p), err)
	}
	return err
}

func (p *Profile) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pictureStatus", thrift.STRING, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:pictureStatus: ", p), err)
	}
	if err := oprot.WriteString(string(p.PictureStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:pictureStatus: ", p), err)
	}
	return err
}

func (p *Profile) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thumbnailUrl", thrift.STRING, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:thumbnailUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.ThumbnailUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thumbnailUrl (23) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:thumbnailUrl: ", p), err)
	}
	return err
}

func (p *Profile) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("statusMessage", thrift.STRING, 24); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:statusMessage: ", p), err)
	}
	if err := oprot.WriteString(string(p.StatusMessage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.statusMessage (24) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 24:statusMessage: ", p), err)
	}
	return err
}

func (p *Profile) writeField31(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("allowSearchByUserid", thrift.BOOL, 31); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:allowSearchByUserid: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.AllowSearchByUserid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.allowSearchByUserid (31) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 31:allowSearchByUserid: ", p), err)
	}
	return err
}

func (p *Profile) writeField32(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("allowSearchByEmail", thrift.BOOL, 32); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:allowSearchByEmail: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.AllowSearchByEmail)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.allowSearchByEmail (32) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 32:allowSearchByEmail: ", p), err)
	}
	return err
}

func (p *Profile) writeField33(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 33); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:picturePath: ", p), err)
	}
	if err := oprot.WriteString(string(p.PicturePath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.picturePath (33) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 33:picturePath: ", p), err)
	}
	return err
}

func (p *Profile) writeField34(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("musicProfile", thrift.STRING, 34); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:musicProfile: ", p), err)
	}
	if err := oprot.WriteString(string(p.MusicProfile)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.musicProfile (34) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 34:musicProfile: ", p), err)
	}
	return err
}

func (p *Profile) writeField35(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("videoProfile", thrift.STRING, 35); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:videoProfile: ", p), err)
	}
	if err := oprot.WriteString(string(p.VideoProfile)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.videoProfile (35) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 35:videoProfile: ", p), err)
	}
	return err
}

func (p *Profile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Profile(%+v)", *p)
}

// Attributes:
//  - Users
//  - Buddies
//  - EndOfResult_
type ProximityMatchCandidateResult_ struct {
	Users   []*Contact `thrift:"users,1" json:"users"`
	Buddies []*Contact `thrift:"buddies,2" json:"buddies"`
	// unused fields # 3 to 90
	EndOfResult_ bool `thrift:"endOfResult,91" json:"endOfResult"`
}

func NewProximityMatchCandidateResult_() *ProximityMatchCandidateResult_ {
	return &ProximityMatchCandidateResult_{}
}

func (p *ProximityMatchCandidateResult_) GetUsers() []*Contact {
	return p.Users
}

func (p *ProximityMatchCandidateResult_) GetBuddies() []*Contact {
	return p.Buddies
}

func (p *ProximityMatchCandidateResult_) GetEndOfResult_() bool {
	return p.EndOfResult_
}
func (p *ProximityMatchCandidateResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 91:
			if err := p.readField91(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProximityMatchCandidateResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Users = tSlice
	for i := 0; i < size; i++ {
		_elem36 := &Contact{}
		if err := _elem36.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem36), err)
		}
		p.Users = append(p.Users, _elem36)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ProximityMatchCandidateResult_) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Buddies = tSlice
	for i := 0; i < size; i++ {
		_elem37 := &Contact{}
		if err := _elem37.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem37), err)
		}
		p.Buddies = append(p.Buddies, _elem37)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ProximityMatchCandidateResult_) readField91(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 91: ", err)
	} else {
		p.EndOfResult_ = v
	}
	return nil
}

func (p *ProximityMatchCandidateResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ProximityMatchCandidateResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField91(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProximityMatchCandidateResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("users", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:users: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Users)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Users {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:users: ", p), err)
	}
	return err
}

func (p *ProximityMatchCandidateResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("buddies", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:buddies: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Buddies)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Buddies {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:buddies: ", p), err)
	}
	return err
}

func (p *ProximityMatchCandidateResult_) writeField91(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endOfResult", thrift.BOOL, 91); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 91:endOfResult: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.EndOfResult_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endOfResult (91) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 91:endOfResult: ", p), err)
	}
	return err
}

func (p *ProximityMatchCandidateResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProximityMatchCandidateResult_(%+v)", *p)
}

// Attributes:
//  - AuthToken
//  - UserCreated
type RegisterWithSnsIdResult_ struct {
	AuthToken   string `thrift:"authToken,1" json:"authToken"`
	UserCreated bool   `thrift:"userCreated,2" json:"userCreated"`
}

func NewRegisterWithSnsIdResult_() *RegisterWithSnsIdResult_ {
	return &RegisterWithSnsIdResult_{}
}

func (p *RegisterWithSnsIdResult_) GetAuthToken() string {
	return p.AuthToken
}

func (p *RegisterWithSnsIdResult_) GetUserCreated() bool {
	return p.UserCreated
}
func (p *RegisterWithSnsIdResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RegisterWithSnsIdResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthToken = v
	}
	return nil
}

func (p *RegisterWithSnsIdResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserCreated = v
	}
	return nil
}

func (p *RegisterWithSnsIdResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RegisterWithSnsIdResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegisterWithSnsIdResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err)
	}
	return err
}

func (p *RegisterWithSnsIdResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userCreated", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userCreated: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.UserCreated)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userCreated (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userCreated: ", p), err)
	}
	return err
}

func (p *RegisterWithSnsIdResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterWithSnsIdResult_(%+v)", *p)
}

// Attributes:
//  - RequestToken
//  - ReturnUrl
type RequestTokenResponse struct {
	RequestToken string `thrift:"requestToken,1" json:"requestToken"`
	ReturnUrl    string `thrift:"returnUrl,2" json:"returnUrl"`
}

func NewRequestTokenResponse() *RequestTokenResponse {
	return &RequestTokenResponse{}
}

func (p *RequestTokenResponse) GetRequestToken() string {
	return p.RequestToken
}

func (p *RequestTokenResponse) GetReturnUrl() string {
	return p.ReturnUrl
}
func (p *RequestTokenResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RequestTokenResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RequestToken = v
	}
	return nil
}

func (p *RequestTokenResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ReturnUrl = v
	}
	return nil
}

func (p *RequestTokenResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RequestTokenResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RequestTokenResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestToken: ", p), err)
	}
	return err
}

func (p *RequestTokenResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("returnUrl", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:returnUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.ReturnUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.returnUrl (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:returnUrl: ", p), err)
	}
	return err
}

func (p *RequestTokenResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestTokenResponse(%+v)", *p)
}

// Attributes:
//  - Mid
//  - CreatedTime
//  - Contacts
//  - NotificationDisabled
//  - MemberMids
type Room struct {
	Mid         string `thrift:"mid,1" json:"mid"`
	CreatedTime int64  `thrift:"createdTime,2" json:"createdTime"`
	// unused fields # 3 to 9
	Contacts []*Contact `thrift:"contacts,10" json:"contacts"`
	// unused fields # 11 to 30
	NotificationDisabled bool `thrift:"notificationDisabled,31" json:"notificationDisabled"`
	// unused fields # 32 to 39
	MemberMids []string `thrift:"memberMids,40" json:"memberMids"`
}

func NewRoom() *Room {
	return &Room{}
}

func (p *Room) GetMid() string {
	return p.Mid
}

func (p *Room) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Room) GetContacts() []*Contact {
	return p.Contacts
}

func (p *Room) GetNotificationDisabled() bool {
	return p.NotificationDisabled
}

func (p *Room) GetMemberMids() []string {
	return p.MemberMids
}
func (p *Room) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 31:
			if err := p.readField31(iprot); err != nil {
				return err
			}
		case 40:
			if err := p.readField40(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Room) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *Room) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Room) readField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Contacts = tSlice
	for i := 0; i < size; i++ {
		_elem38 := &Contact{}
		if err := _elem38.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem38), err)
		}
		p.Contacts = append(p.Contacts, _elem38)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Room) readField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 31: ", err)
	} else {
		p.NotificationDisabled = v
	}
	return nil
}

func (p *Room) readField40(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.MemberMids = tSlice
	for i := 0; i < size; i++ {
		var _elem39 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem39 = v
		}
		p.MemberMids = append(p.MemberMids, _elem39)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Room) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Room"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField31(oprot); err != nil {
		return err
	}
	if err := p.writeField40(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Room) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err)
	}
	return err
}

func (p *Room) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err)
	}
	return err
}

func (p *Room) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contacts", thrift.LIST, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:contacts: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Contacts)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Contacts {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:contacts: ", p), err)
	}
	return err
}

func (p *Room) writeField31(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationDisabled", thrift.BOOL, 31); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:notificationDisabled: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationDisabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationDisabled (31) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 31:notificationDisabled: ", p), err)
	}
	return err
}

func (p *Room) writeField40(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberMids", thrift.LIST, 40); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:memberMids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.MemberMids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MemberMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 40:memberMids: ", p), err)
	}
	return err
}

func (p *Room) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Room(%+v)", *p)
}

// Attributes:
//  - Keynm
//  - Nvalue
//  - Evalue
//  - SessionKey
type RSAKey struct {
	Keynm      string `thrift:"keynm,1" json:"keynm"`
	Nvalue     string `thrift:"nvalue,2" json:"nvalue"`
	Evalue     string `thrift:"evalue,3" json:"evalue"`
	SessionKey string `thrift:"sessionKey,4" json:"sessionKey"`
}

func NewRSAKey() *RSAKey {
	return &RSAKey{}
}

func (p *RSAKey) GetKeynm() string {
	return p.Keynm
}

func (p *RSAKey) GetNvalue() string {
	return p.Nvalue
}

func (p *RSAKey) GetEvalue() string {
	return p.Evalue
}

func (p *RSAKey) GetSessionKey() string {
	return p.SessionKey
}
func (p *RSAKey) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RSAKey) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Keynm = v
	}
	return nil
}

func (p *RSAKey) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Nvalue = v
	}
	return nil
}

func (p *RSAKey) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Evalue = v
	}
	return nil
}

func (p *RSAKey) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SessionKey = v
	}
	return nil
}

func (p *RSAKey) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RSAKey"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RSAKey) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keynm", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keynm: ", p), err)
	}
	if err := oprot.WriteString(string(p.Keynm)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.keynm (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keynm: ", p), err)
	}
	return err
}

func (p *RSAKey) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nvalue", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nvalue: ", p), err)
	}
	if err := oprot.WriteString(string(p.Nvalue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nvalue (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nvalue: ", p), err)
	}
	return err
}

func (p *RSAKey) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("evalue", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:evalue: ", p), err)
	}
	if err := oprot.WriteString(string(p.Evalue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.evalue (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:evalue: ", p), err)
	}
	return err
}

func (p *RSAKey) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionKey", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sessionKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.SessionKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionKey (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sessionKey: ", p), err)
	}
	return err
}

func (p *RSAKey) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RSAKey(%+v)", *p)
}

// Attributes:
//  - NotificationEnable
//  - NotificationMuteExpiration
//  - NotificationNewMessage
//  - NotificationGroupInvitation
//  - NotificationShowMessage
//  - NotificationIncomingCall
//  - NotificationSoundMessage
//  - NotificationSoundGroup
//  - NotificationDisabledWithSub
//  - NotificationPayment
//  - PrivacySyncContacts
//  - PrivacySearchByPhoneNumber
//  - PrivacySearchByUserid
//  - PrivacySearchByEmail
//  - PrivacyAllowSecondaryDeviceLogin
//  - PrivacyProfileImagePostToMyhome
//  - PrivacyReceiveMessagesFromNotFriend
//  - PrivacyAgreeUseLineCoinToPaidCall
//  - PrivacyAgreeUsePaidCall
//  - PrivacyAllowFriendRequest
//  - ContactMyTicket
//  - IdentityProvider
//  - IdentityIdentifier
//  - SnsAccounts
//  - PhoneRegistration
//  - EmailConfirmationStatus
//  - AccountMigrationPincodeType
//  - EnforcedInputAccountMigrationPincode
//  - SecurityCenterSettingsType
//  - AllowUnregistrationSecondaryDevice
//  - PreferenceLocale
//  - CustomModes
//  - E2eeEnable
//  - HitokotoBackupRequested
//  - PrivacyProfileMusicPostToMyhome
//  - PrivacyAllowNearby
//  - GreementNearbyTime
//  - AgreementSquareTime
//  - NotificationMention
type Settings struct {
	// unused fields # 1 to 9
	NotificationEnable                  int64  `thrift:"notificationEnable,10" json:"notificationEnable"`
	NotificationMuteExpiration          string `thrift:"notificationMuteExpiration,11" json:"notificationMuteExpiration"`
	NotificationNewMessage              bool   `thrift:"notificationNewMessage,12" json:"notificationNewMessage"`
	NotificationGroupInvitation         bool   `thrift:"notificationGroupInvitation,13" json:"notificationGroupInvitation"`
	NotificationShowMessage             bool   `thrift:"notificationShowMessage,14" json:"notificationShowMessage"`
	NotificationIncomingCall            bool   `thrift:"notificationIncomingCall,15" json:"notificationIncomingCall"`
	NotificationSoundMessage            string `thrift:"notificationSoundMessage,16" json:"notificationSoundMessage"`
	NotificationSoundGroup              string `thrift:"notificationSoundGroup,17" json:"notificationSoundGroup"`
	NotificationDisabledWithSub         bool   `thrift:"notificationDisabledWithSub,18" json:"notificationDisabledWithSub"`
	NotificationPayment                 bool   `thrift:"notificationPayment,19" json:"notificationPayment"`
	PrivacySyncContacts                 bool   `thrift:"privacySyncContacts,20" json:"privacySyncContacts"`
	PrivacySearchByPhoneNumber          bool   `thrift:"privacySearchByPhoneNumber,21" json:"privacySearchByPhoneNumber"`
	PrivacySearchByUserid               bool   `thrift:"privacySearchByUserid,22" json:"privacySearchByUserid"`
	PrivacySearchByEmail                bool   `thrift:"privacySearchByEmail,23" json:"privacySearchByEmail"`
	PrivacyAllowSecondaryDeviceLogin    bool   `thrift:"privacyAllowSecondaryDeviceLogin,24" json:"privacyAllowSecondaryDeviceLogin"`
	PrivacyProfileImagePostToMyhome     bool   `thrift:"privacyProfileImagePostToMyhome,25" json:"privacyProfileImagePostToMyhome"`
	PrivacyReceiveMessagesFromNotFriend bool   `thrift:"privacyReceiveMessagesFromNotFriend,26" json:"privacyReceiveMessagesFromNotFriend"`
	PrivacyAgreeUseLineCoinToPaidCall   bool   `thrift:"privacyAgreeUseLineCoinToPaidCall,27" json:"privacyAgreeUseLineCoinToPaidCall"`
	PrivacyAgreeUsePaidCall             bool   `thrift:"privacyAgreeUsePaidCall,28" json:"privacyAgreeUsePaidCall"`
	PrivacyAllowFriendRequest           bool   `thrift:"privacyAllowFriendRequest,29" json:"privacyAllowFriendRequest"`
	ContactMyTicket                     string `thrift:"contactMyTicket,30" json:"contactMyTicket"`
	// unused fields # 31 to 39
	IdentityProvider                     IdentityProvider        `thrift:"identityProvider,40" json:"identityProvider"`
	IdentityIdentifier                   string                  `thrift:"identityIdentifier,41" json:"identityIdentifier"`
	SnsAccounts                          map[SnsIdType]string    `thrift:"snsAccounts,42" json:"snsAccounts"`
	PhoneRegistration                    bool                    `thrift:"phoneRegistration,43" json:"phoneRegistration"`
	EmailConfirmationStatus              EmailConfirmationStatus `thrift:"emailConfirmationStatus,44" json:"emailConfirmationStatus"`
	AccountMigrationPincodeType          CenterSettingsType      `thrift:"accountMigrationPincodeType,45" json:"accountMigrationPincodeType"`
	EnforcedInputAccountMigrationPincode bool                    `thrift:"enforcedInputAccountMigrationPincode,46" json:"enforcedInputAccountMigrationPincode"`
	SecurityCenterSettingsType           CenterSettingsType      `thrift:"securityCenterSettingsType,47" json:"securityCenterSettingsType"`
	AllowUnregistrationSecondaryDevice   bool                    `thrift:"allowUnregistrationSecondaryDevice,48" json:"allowUnregistrationSecondaryDevice"`
	// unused field # 49
	PreferenceLocale string `thrift:"preferenceLocale,50" json:"preferenceLocale"`
	// unused fields # 51 to 59
	CustomModes                     map[CustomMode]string `thrift:"customModes,60" json:"customModes"`
	E2eeEnable                      bool                  `thrift:"e2eeEnable,61" json:"e2eeEnable"`
	HitokotoBackupRequested         bool                  `thrift:"hitokotoBackupRequested,62" json:"hitokotoBackupRequested"`
	PrivacyProfileMusicPostToMyhome bool                  `thrift:"privacyProfileMusicPostToMyhome,63" json:"privacyProfileMusicPostToMyhome"`
	// unused field # 64
	PrivacyAllowNearby  bool  `thrift:"privacyAllowNearby,65" json:"privacyAllowNearby"`
	GreementNearbyTime  int64 `thrift:"greementNearbyTime,66" json:"greementNearbyTime"`
	AgreementSquareTime int64 `thrift:"agreementSquareTime,67" json:"agreementSquareTime"`
	NotificationMention bool  `thrift:"notificationMention,68" json:"notificationMention"`
}

func NewSettings() *Settings {
	return &Settings{}
}

func (p *Settings) GetNotificationEnable() int64 {
	return p.NotificationEnable
}

func (p *Settings) GetNotificationMuteExpiration() string {
	return p.NotificationMuteExpiration
}

func (p *Settings) GetNotificationNewMessage() bool {
	return p.NotificationNewMessage
}

func (p *Settings) GetNotificationGroupInvitation() bool {
	return p.NotificationGroupInvitation
}

func (p *Settings) GetNotificationShowMessage() bool {
	return p.NotificationShowMessage
}

func (p *Settings) GetNotificationIncomingCall() bool {
	return p.NotificationIncomingCall
}

func (p *Settings) GetNotificationSoundMessage() string {
	return p.NotificationSoundMessage
}

func (p *Settings) GetNotificationSoundGroup() string {
	return p.NotificationSoundGroup
}

func (p *Settings) GetNotificationDisabledWithSub() bool {
	return p.NotificationDisabledWithSub
}

func (p *Settings) GetNotificationPayment() bool {
	return p.NotificationPayment
}

func (p *Settings) GetPrivacySyncContacts() bool {
	return p.PrivacySyncContacts
}

func (p *Settings) GetPrivacySearchByPhoneNumber() bool {
	return p.PrivacySearchByPhoneNumber
}

func (p *Settings) GetPrivacySearchByUserid() bool {
	return p.PrivacySearchByUserid
}

func (p *Settings) GetPrivacySearchByEmail() bool {
	return p.PrivacySearchByEmail
}

func (p *Settings) GetPrivacyAllowSecondaryDeviceLogin() bool {
	return p.PrivacyAllowSecondaryDeviceLogin
}

func (p *Settings) GetPrivacyProfileImagePostToMyhome() bool {
	return p.PrivacyProfileImagePostToMyhome
}

func (p *Settings) GetPrivacyReceiveMessagesFromNotFriend() bool {
	return p.PrivacyReceiveMessagesFromNotFriend
}

func (p *Settings) GetPrivacyAgreeUseLineCoinToPaidCall() bool {
	return p.PrivacyAgreeUseLineCoinToPaidCall
}

func (p *Settings) GetPrivacyAgreeUsePaidCall() bool {
	return p.PrivacyAgreeUsePaidCall
}

func (p *Settings) GetPrivacyAllowFriendRequest() bool {
	return p.PrivacyAllowFriendRequest
}

func (p *Settings) GetContactMyTicket() string {
	return p.ContactMyTicket
}

func (p *Settings) GetIdentityProvider() IdentityProvider {
	return p.IdentityProvider
}

func (p *Settings) GetIdentityIdentifier() string {
	return p.IdentityIdentifier
}

func (p *Settings) GetSnsAccounts() map[SnsIdType]string {
	return p.SnsAccounts
}

func (p *Settings) GetPhoneRegistration() bool {
	return p.PhoneRegistration
}

func (p *Settings) GetEmailConfirmationStatus() EmailConfirmationStatus {
	return p.EmailConfirmationStatus
}

func (p *Settings) GetAccountMigrationPincodeType() CenterSettingsType {
	return p.AccountMigrationPincodeType
}

func (p *Settings) GetEnforcedInputAccountMigrationPincode() bool {
	return p.EnforcedInputAccountMigrationPincode
}

func (p *Settings) GetSecurityCenterSettingsType() CenterSettingsType {
	return p.SecurityCenterSettingsType
}

func (p *Settings) GetAllowUnregistrationSecondaryDevice() bool {
	return p.AllowUnregistrationSecondaryDevice
}

func (p *Settings) GetPreferenceLocale() string {
	return p.PreferenceLocale
}

func (p *Settings) GetCustomModes() map[CustomMode]string {
	return p.CustomModes
}

func (p *Settings) GetE2eeEnable() bool {
	return p.E2eeEnable
}

func (p *Settings) GetHitokotoBackupRequested() bool {
	return p.HitokotoBackupRequested
}

func (p *Settings) GetPrivacyProfileMusicPostToMyhome() bool {
	return p.PrivacyProfileMusicPostToMyhome
}

func (p *Settings) GetPrivacyAllowNearby() bool {
	return p.PrivacyAllowNearby
}

func (p *Settings) GetGreementNearbyTime() int64 {
	return p.GreementNearbyTime
}

func (p *Settings) GetAgreementSquareTime() int64 {
	return p.AgreementSquareTime
}

func (p *Settings) GetNotificationMention() bool {
	return p.NotificationMention
}
func (p *Settings) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.readField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.readField26(iprot); err != nil {
				return err
			}
		case 27:
			if err := p.readField27(iprot); err != nil {
				return err
			}
		case 28:
			if err := p.readField28(iprot); err != nil {
				return err
			}
		case 29:
			if err := p.readField29(iprot); err != nil {
				return err
			}
		case 30:
			if err := p.readField30(iprot); err != nil {
				return err
			}
		case 40:
			if err := p.readField40(iprot); err != nil {
				return err
			}
		case 41:
			if err := p.readField41(iprot); err != nil {
				return err
			}
		case 42:
			if err := p.readField42(iprot); err != nil {
				return err
			}
		case 43:
			if err := p.readField43(iprot); err != nil {
				return err
			}
		case 44:
			if err := p.readField44(iprot); err != nil {
				return err
			}
		case 45:
			if err := p.readField45(iprot); err != nil {
				return err
			}
		case 46:
			if err := p.readField46(iprot); err != nil {
				return err
			}
		case 47:
			if err := p.readField47(iprot); err != nil {
				return err
			}
		case 48:
			if err := p.readField48(iprot); err != nil {
				return err
			}
		case 50:
			if err := p.readField50(iprot); err != nil {
				return err
			}
		case 60:
			if err := p.readField60(iprot); err != nil {
				return err
			}
		case 61:
			if err := p.readField61(iprot); err != nil {
				return err
			}
		case 62:
			if err := p.readField62(iprot); err != nil {
				return err
			}
		case 63:
			if err := p.readField63(iprot); err != nil {
				return err
			}
		case 65:
			if err := p.readField65(iprot); err != nil {
				return err
			}
		case 66:
			if err := p.readField66(iprot); err != nil {
				return err
			}
		case 67:
			if err := p.readField67(iprot); err != nil {
				return err
			}
		case 68:
			if err := p.readField68(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Settings) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.NotificationEnable = v
	}
	return nil
}

func (p *Settings) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.NotificationMuteExpiration = v
	}
	return nil
}

func (p *Settings) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.NotificationNewMessage = v
	}
	return nil
}

func (p *Settings) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.NotificationGroupInvitation = v
	}
	return nil
}

func (p *Settings) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.NotificationShowMessage = v
	}
	return nil
}

func (p *Settings) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.NotificationIncomingCall = v
	}
	return nil
}

func (p *Settings) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.NotificationSoundMessage = v
	}
	return nil
}

func (p *Settings) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.NotificationSoundGroup = v
	}
	return nil
}

func (p *Settings) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.NotificationDisabledWithSub = v
	}
	return nil
}

func (p *Settings) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.NotificationPayment = v
	}
	return nil
}

func (p *Settings) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.PrivacySyncContacts = v
	}
	return nil
}

func (p *Settings) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.PrivacySearchByPhoneNumber = v
	}
	return nil
}

func (p *Settings) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.PrivacySearchByUserid = v
	}
	return nil
}

func (p *Settings) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.PrivacySearchByEmail = v
	}
	return nil
}

func (p *Settings) readField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.PrivacyAllowSecondaryDeviceLogin = v
	}
	return nil
}

func (p *Settings) readField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.PrivacyProfileImagePostToMyhome = v
	}
	return nil
}

func (p *Settings) readField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 26: ", err)
	} else {
		p.PrivacyReceiveMessagesFromNotFriend = v
	}
	return nil
}

func (p *Settings) readField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 27: ", err)
	} else {
		p.PrivacyAgreeUseLineCoinToPaidCall = v
	}
	return nil
}

func (p *Settings) readField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 28: ", err)
	} else {
		p.PrivacyAgreeUsePaidCall = v
	}
	return nil
}

func (p *Settings) readField29(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 29: ", err)
	} else {
		p.PrivacyAllowFriendRequest = v
	}
	return nil
}

func (p *Settings) readField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.ContactMyTicket = v
	}
	return nil
}

func (p *Settings) readField40(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 40: ", err)
	} else {
		temp := IdentityProvider(v)
		p.IdentityProvider = temp
	}
	return nil
}

func (p *Settings) readField41(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 41: ", err)
	} else {
		p.IdentityIdentifier = v
	}
	return nil
}

func (p *Settings) readField42(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[SnsIdType]string, size)
	p.SnsAccounts = tMap
	for i := 0; i < size; i++ {
		var _key40 SnsIdType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := SnsIdType(v)
			_key40 = temp
		}
		var _val41 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val41 = v
		}
		p.SnsAccounts[_key40] = _val41
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Settings) readField43(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 43: ", err)
	} else {
		p.PhoneRegistration = v
	}
	return nil
}

func (p *Settings) readField44(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 44: ", err)
	} else {
		temp := EmailConfirmationStatus(v)
		p.EmailConfirmationStatus = temp
	}
	return nil
}

func (p *Settings) readField45(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 45: ", err)
	} else {
		temp := CenterSettingsType(v)
		p.AccountMigrationPincodeType = temp
	}
	return nil
}

func (p *Settings) readField46(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 46: ", err)
	} else {
		p.EnforcedInputAccountMigrationPincode = v
	}
	return nil
}

func (p *Settings) readField47(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 47: ", err)
	} else {
		temp := CenterSettingsType(v)
		p.SecurityCenterSettingsType = temp
	}
	return nil
}

func (p *Settings) readField48(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 48: ", err)
	} else {
		p.AllowUnregistrationSecondaryDevice = v
	}
	return nil
}

func (p *Settings) readField50(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 50: ", err)
	} else {
		p.PreferenceLocale = v
	}
	return nil
}

func (p *Settings) readField60(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[CustomMode]string, size)
	p.CustomModes = tMap
	for i := 0; i < size; i++ {
		var _key42 CustomMode
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := CustomMode(v)
			_key42 = temp
		}
		var _val43 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val43 = v
		}
		p.CustomModes[_key42] = _val43
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Settings) readField61(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 61: ", err)
	} else {
		p.E2eeEnable = v
	}
	return nil
}

func (p *Settings) readField62(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 62: ", err)
	} else {
		p.HitokotoBackupRequested = v
	}
	return nil
}

func (p *Settings) readField63(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 63: ", err)
	} else {
		p.PrivacyProfileMusicPostToMyhome = v
	}
	return nil
}

func (p *Settings) readField65(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 65: ", err)
	} else {
		p.PrivacyAllowNearby = v
	}
	return nil
}

func (p *Settings) readField66(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 66: ", err)
	} else {
		p.GreementNearbyTime = v
	}
	return nil
}

func (p *Settings) readField67(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 67: ", err)
	} else {
		p.AgreementSquareTime = v
	}
	return nil
}

func (p *Settings) readField68(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 68: ", err)
	} else {
		p.NotificationMention = v
	}
	return nil
}

func (p *Settings) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Settings"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField27(oprot); err != nil {
		return err
	}
	if err := p.writeField28(oprot); err != nil {
		return err
	}
	if err := p.writeField29(oprot); err != nil {
		return err
	}
	if err := p.writeField30(oprot); err != nil {
		return err
	}
	if err := p.writeField40(oprot); err != nil {
		return err
	}
	if err := p.writeField41(oprot); err != nil {
		return err
	}
	if err := p.writeField42(oprot); err != nil {
		return err
	}
	if err := p.writeField43(oprot); err != nil {
		return err
	}
	if err := p.writeField44(oprot); err != nil {
		return err
	}
	if err := p.writeField45(oprot); err != nil {
		return err
	}
	if err := p.writeField46(oprot); err != nil {
		return err
	}
	if err := p.writeField47(oprot); err != nil {
		return err
	}
	if err := p.writeField48(oprot); err != nil {
		return err
	}
	if err := p.writeField50(oprot); err != nil {
		return err
	}
	if err := p.writeField60(oprot); err != nil {
		return err
	}
	if err := p.writeField61(oprot); err != nil {
		return err
	}
	if err := p.writeField62(oprot); err != nil {
		return err
	}
	if err := p.writeField63(oprot); err != nil {
		return err
	}
	if err := p.writeField65(oprot); err != nil {
		return err
	}
	if err := p.writeField66(oprot); err != nil {
		return err
	}
	if err := p.writeField67(oprot); err != nil {
		return err
	}
	if err := p.writeField68(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Settings) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationEnable", thrift.I64, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:notificationEnable: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NotificationEnable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationEnable (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:notificationEnable: ", p), err)
	}
	return err
}

func (p *Settings) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationMuteExpiration", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:notificationMuteExpiration: ", p), err)
	}
	if err := oprot.WriteString(string(p.NotificationMuteExpiration)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationMuteExpiration (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:notificationMuteExpiration: ", p), err)
	}
	return err
}

func (p *Settings) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationNewMessage", thrift.BOOL, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:notificationNewMessage: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationNewMessage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationNewMessage (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:notificationNewMessage: ", p), err)
	}
	return err
}

func (p *Settings) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationGroupInvitation", thrift.BOOL, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:notificationGroupInvitation: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationGroupInvitation)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationGroupInvitation (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:notificationGroupInvitation: ", p), err)
	}
	return err
}

func (p *Settings) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationShowMessage", thrift.BOOL, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:notificationShowMessage: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationShowMessage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationShowMessage (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:notificationShowMessage: ", p), err)
	}
	return err
}

func (p *Settings) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationIncomingCall", thrift.BOOL, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:notificationIncomingCall: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationIncomingCall)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationIncomingCall (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:notificationIncomingCall: ", p), err)
	}
	return err
}

func (p *Settings) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationSoundMessage", thrift.STRING, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:notificationSoundMessage: ", p), err)
	}
	if err := oprot.WriteString(string(p.NotificationSoundMessage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationSoundMessage (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:notificationSoundMessage: ", p), err)
	}
	return err
}

func (p *Settings) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationSoundGroup", thrift.STRING, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:notificationSoundGroup: ", p), err)
	}
	if err := oprot.WriteString(string(p.NotificationSoundGroup)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationSoundGroup (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:notificationSoundGroup: ", p), err)
	}
	return err
}

func (p *Settings) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationDisabledWithSub", thrift.BOOL, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:notificationDisabledWithSub: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationDisabledWithSub)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationDisabledWithSub (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:notificationDisabledWithSub: ", p), err)
	}
	return err
}

func (p *Settings) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationPayment", thrift.BOOL, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:notificationPayment: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationPayment)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationPayment (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:notificationPayment: ", p), err)
	}
	return err
}

func (p *Settings) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacySyncContacts", thrift.BOOL, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:privacySyncContacts: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacySyncContacts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacySyncContacts (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:privacySyncContacts: ", p), err)
	}
	return err
}

func (p *Settings) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacySearchByPhoneNumber", thrift.BOOL, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:privacySearchByPhoneNumber: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacySearchByPhoneNumber)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacySearchByPhoneNumber (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:privacySearchByPhoneNumber: ", p), err)
	}
	return err
}

func (p *Settings) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacySearchByUserid", thrift.BOOL, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:privacySearchByUserid: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacySearchByUserid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacySearchByUserid (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:privacySearchByUserid: ", p), err)
	}
	return err
}

func (p *Settings) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacySearchByEmail", thrift.BOOL, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:privacySearchByEmail: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacySearchByEmail)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacySearchByEmail (23) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:privacySearchByEmail: ", p), err)
	}
	return err
}

func (p *Settings) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyAllowSecondaryDeviceLogin", thrift.BOOL, 24); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:privacyAllowSecondaryDeviceLogin: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyAllowSecondaryDeviceLogin)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyAllowSecondaryDeviceLogin (24) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 24:privacyAllowSecondaryDeviceLogin: ", p), err)
	}
	return err
}

func (p *Settings) writeField25(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyProfileImagePostToMyhome", thrift.BOOL, 25); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:privacyProfileImagePostToMyhome: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyProfileImagePostToMyhome)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyProfileImagePostToMyhome (25) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 25:privacyProfileImagePostToMyhome: ", p), err)
	}
	return err
}

func (p *Settings) writeField26(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyReceiveMessagesFromNotFriend", thrift.BOOL, 26); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:privacyReceiveMessagesFromNotFriend: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyReceiveMessagesFromNotFriend)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyReceiveMessagesFromNotFriend (26) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 26:privacyReceiveMessagesFromNotFriend: ", p), err)
	}
	return err
}

func (p *Settings) writeField27(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyAgreeUseLineCoinToPaidCall", thrift.BOOL, 27); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:privacyAgreeUseLineCoinToPaidCall: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyAgreeUseLineCoinToPaidCall)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyAgreeUseLineCoinToPaidCall (27) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 27:privacyAgreeUseLineCoinToPaidCall: ", p), err)
	}
	return err
}

func (p *Settings) writeField28(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyAgreeUsePaidCall", thrift.BOOL, 28); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:privacyAgreeUsePaidCall: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyAgreeUsePaidCall)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyAgreeUsePaidCall (28) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 28:privacyAgreeUsePaidCall: ", p), err)
	}
	return err
}

func (p *Settings) writeField29(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyAllowFriendRequest", thrift.BOOL, 29); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:privacyAllowFriendRequest: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyAllowFriendRequest)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyAllowFriendRequest (29) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 29:privacyAllowFriendRequest: ", p), err)
	}
	return err
}

func (p *Settings) writeField30(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactMyTicket", thrift.STRING, 30); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:contactMyTicket: ", p), err)
	}
	if err := oprot.WriteString(string(p.ContactMyTicket)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.contactMyTicket (30) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 30:contactMyTicket: ", p), err)
	}
	return err
}

func (p *Settings) writeField40(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityProvider", thrift.I32, 40); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:identityProvider: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IdentityProvider)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.identityProvider (40) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 40:identityProvider: ", p), err)
	}
	return err
}

func (p *Settings) writeField41(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityIdentifier", thrift.STRING, 41); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:identityIdentifier: ", p), err)
	}
	if err := oprot.WriteString(string(p.IdentityIdentifier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.identityIdentifier (41) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 41:identityIdentifier: ", p), err)
	}
	return err
}

func (p *Settings) writeField42(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsAccounts", thrift.MAP, 42); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:snsAccounts: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.SnsAccounts)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.SnsAccounts {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 42:snsAccounts: ", p), err)
	}
	return err
}

func (p *Settings) writeField43(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phoneRegistration", thrift.BOOL, 43); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:phoneRegistration: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PhoneRegistration)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phoneRegistration (43) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 43:phoneRegistration: ", p), err)
	}
	return err
}

func (p *Settings) writeField44(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("emailConfirmationStatus", thrift.I32, 44); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:emailConfirmationStatus: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EmailConfirmationStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.emailConfirmationStatus (44) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 44:emailConfirmationStatus: ", p), err)
	}
	return err
}

func (p *Settings) writeField45(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accountMigrationPincodeType", thrift.I32, 45); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 45:accountMigrationPincodeType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AccountMigrationPincodeType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.accountMigrationPincodeType (45) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 45:accountMigrationPincodeType: ", p), err)
	}
	return err
}

func (p *Settings) writeField46(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("enforcedInputAccountMigrationPincode", thrift.BOOL, 46); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 46:enforcedInputAccountMigrationPincode: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.EnforcedInputAccountMigrationPincode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.enforcedInputAccountMigrationPincode (46) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 46:enforcedInputAccountMigrationPincode: ", p), err)
	}
	return err
}

func (p *Settings) writeField47(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("securityCenterSettingsType", thrift.I32, 47); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 47:securityCenterSettingsType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SecurityCenterSettingsType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.securityCenterSettingsType (47) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 47:securityCenterSettingsType: ", p), err)
	}
	return err
}

func (p *Settings) writeField48(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("allowUnregistrationSecondaryDevice", thrift.BOOL, 48); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 48:allowUnregistrationSecondaryDevice: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.AllowUnregistrationSecondaryDevice)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.allowUnregistrationSecondaryDevice (48) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 48:allowUnregistrationSecondaryDevice: ", p), err)
	}
	return err
}

func (p *Settings) writeField50(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("preferenceLocale", thrift.STRING, 50); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:preferenceLocale: ", p), err)
	}
	if err := oprot.WriteString(string(p.PreferenceLocale)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.preferenceLocale (50) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 50:preferenceLocale: ", p), err)
	}
	return err
}

func (p *Settings) writeField60(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("customModes", thrift.MAP, 60); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:customModes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.CustomModes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.CustomModes {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 60:customModes: ", p), err)
	}
	return err
}

func (p *Settings) writeField61(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("e2eeEnable", thrift.BOOL, 61); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 61:e2eeEnable: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.E2eeEnable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.e2eeEnable (61) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 61:e2eeEnable: ", p), err)
	}
	return err
}

func (p *Settings) writeField62(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hitokotoBackupRequested", thrift.BOOL, 62); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 62:hitokotoBackupRequested: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.HitokotoBackupRequested)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hitokotoBackupRequested (62) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 62:hitokotoBackupRequested: ", p), err)
	}
	return err
}

func (p *Settings) writeField63(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyProfileMusicPostToMyhome", thrift.BOOL, 63); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 63:privacyProfileMusicPostToMyhome: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyProfileMusicPostToMyhome)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyProfileMusicPostToMyhome (63) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 63:privacyProfileMusicPostToMyhome: ", p), err)
	}
	return err
}

func (p *Settings) writeField65(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyAllowNearby", thrift.BOOL, 65); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 65:privacyAllowNearby: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyAllowNearby)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privacyAllowNearby (65) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 65:privacyAllowNearby: ", p), err)
	}
	return err
}

func (p *Settings) writeField66(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("greementNearbyTime", thrift.I64, 66); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 66:greementNearbyTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.GreementNearbyTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.greementNearbyTime (66) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 66:greementNearbyTime: ", p), err)
	}
	return err
}

func (p *Settings) writeField67(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agreementSquareTime", thrift.I64, 67); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 67:agreementSquareTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AgreementSquareTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agreementSquareTime (67) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 67:agreementSquareTime: ", p), err)
	}
	return err
}

func (p *Settings) writeField68(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationMention", thrift.BOOL, 68); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 68:notificationMention: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotificationMention)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationMention (68) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 68:notificationMention: ", p), err)
	}
	return err
}

func (p *Settings) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Settings(%+v)", *p)
}

// Attributes:
//  - MessageId
//  - URL
//  - ChatMid
//  - OriginMid
type SendPostbackRequest struct {
	MessageId string `thrift:"messageId,1" json:"messageId"`
	URL       string `thrift:"url,2" json:"url"`
	ChatMid   string `thrift:"chatMid,3" json:"chatMid"`
	OriginMid string `thrift:"originMid,4" json:"originMid"`
}

func NewSendPostbackRequest() *SendPostbackRequest {
	return &SendPostbackRequest{}
}

func (p *SendPostbackRequest) GetMessageId() string {
	return p.MessageId
}

func (p *SendPostbackRequest) GetURL() string {
	return p.URL
}

func (p *SendPostbackRequest) GetChatMid() string {
	return p.ChatMid
}

func (p *SendPostbackRequest) GetOriginMid() string {
	return p.OriginMid
}
func (p *SendPostbackRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SendPostbackRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MessageId = v
	}
	return nil
}

func (p *SendPostbackRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.URL = v
	}
	return nil
}

func (p *SendPostbackRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *SendPostbackRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.OriginMid = v
	}
	return nil
}

func (p *SendPostbackRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SendPostbackRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SendPostbackRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:messageId: ", p), err)
	}
	if err := oprot.WriteString(string(p.MessageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.messageId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:messageId: ", p), err)
	}
	return err
}

func (p *SendPostbackRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("url", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:url: ", p), err)
	}
	if err := oprot.WriteString(string(p.URL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.url (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:url: ", p), err)
	}
	return err
}

func (p *SendPostbackRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chatMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chatMid: ", p), err)
	}
	return err
}

func (p *SendPostbackRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("originMid", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:originMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.OriginMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.originMid (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:originMid: ", p), err)
	}
	return err
}

func (p *SendPostbackRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendPostbackRequest(%+v)", *p)
}

// Attributes:
//  - ApplicationType
//  - ApplicationVersion
//  - Locale
type SimpleChannelClient struct {
	ApplicationType    string `thrift:"applicationType,1" json:"applicationType"`
	ApplicationVersion string `thrift:"applicationVersion,2" json:"applicationVersion"`
	Locale             string `thrift:"locale,3" json:"locale"`
}

func NewSimpleChannelClient() *SimpleChannelClient {
	return &SimpleChannelClient{}
}

func (p *SimpleChannelClient) GetApplicationType() string {
	return p.ApplicationType
}

func (p *SimpleChannelClient) GetApplicationVersion() string {
	return p.ApplicationVersion
}

func (p *SimpleChannelClient) GetLocale() string {
	return p.Locale
}
func (p *SimpleChannelClient) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SimpleChannelClient) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ApplicationType = v
	}
	return nil
}

func (p *SimpleChannelClient) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ApplicationVersion = v
	}
	return nil
}

func (p *SimpleChannelClient) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Locale = v
	}
	return nil
}

func (p *SimpleChannelClient) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SimpleChannelClient"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SimpleChannelClient) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("applicationType", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:applicationType: ", p), err)
	}
	if err := oprot.WriteString(string(p.ApplicationType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.applicationType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:applicationType: ", p), err)
	}
	return err
}

func (p *SimpleChannelClient) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("applicationVersion", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:applicationVersion: ", p), err)
	}
	if err := oprot.WriteString(string(p.ApplicationVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.applicationVersion (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:applicationVersion: ", p), err)
	}
	return err
}

func (p *SimpleChannelClient) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("locale", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:locale: ", p), err)
	}
	if err := oprot.WriteString(string(p.Locale)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.locale (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:locale: ", p), err)
	}
	return err
}

func (p *SimpleChannelClient) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SimpleChannelClient(%+v)", *p)
}

// Attributes:
//  - Mid
//  - DisplayName
//  - PictureStatus
//  - PicturePath
//  - StatusMessage
type SimpleChannelContact struct {
	Mid           string `thrift:"mid,1" json:"mid"`
	DisplayName   string `thrift:"displayName,2" json:"displayName"`
	PictureStatus string `thrift:"pictureStatus,3" json:"pictureStatus"`
	PicturePath   string `thrift:"picturePath,4" json:"picturePath"`
	StatusMessage string `thrift:"statusMessage,5" json:"statusMessage"`
}

func NewSimpleChannelContact() *SimpleChannelContact {
	return &SimpleChannelContact{}
}

func (p *SimpleChannelContact) GetMid() string {
	return p.Mid
}

func (p *SimpleChannelContact) GetDisplayName() string {
	return p.DisplayName
}

func (p *SimpleChannelContact) GetPictureStatus() string {
	return p.PictureStatus
}

func (p *SimpleChannelContact) GetPicturePath() string {
	return p.PicturePath
}

func (p *SimpleChannelContact) GetStatusMessage() string {
	return p.StatusMessage
}
func (p *SimpleChannelContact) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SimpleChannelContact) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *SimpleChannelContact) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DisplayName = v
	}
	return nil
}

func (p *SimpleChannelContact) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PictureStatus = v
	}
	return nil
}

func (p *SimpleChannelContact) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PicturePath = v
	}
	return nil
}

func (p *SimpleChannelContact) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.StatusMessage = v
	}
	return nil
}

func (p *SimpleChannelContact) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SimpleChannelContact"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SimpleChannelContact) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err)
	}
	return err
}

func (p *SimpleChannelContact) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:displayName: ", p), err)
	}
	if err := oprot.WriteString(string(p.DisplayName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.displayName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:displayName: ", p), err)
	}
	return err
}

func (p *SimpleChannelContact) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pictureStatus", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pictureStatus: ", p), err)
	}
	if err := oprot.WriteString(string(p.PictureStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pictureStatus: ", p), err)
	}
	return err
}

func (p *SimpleChannelContact) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:picturePath: ", p), err)
	}
	if err := oprot.WriteString(string(p.PicturePath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.picturePath (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:picturePath: ", p), err)
	}
	return err
}

func (p *SimpleChannelContact) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("statusMessage", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:statusMessage: ", p), err)
	}
	if err := oprot.WriteString(string(p.StatusMessage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.statusMessage (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:statusMessage: ", p), err)
	}
	return err
}

func (p *SimpleChannelContact) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SimpleChannelContact(%+v)", *p)
}

// Attributes:
//  - Code
//  - Reason
//  - ParameterMap
type TalkException struct {
	Code         ErrorCode         `thrift:"code,1" json:"code"`
	Reason       string            `thrift:"reason,2" json:"reason"`
	ParameterMap map[string]string `thrift:"parameterMap,3" json:"parameterMap"`
}

func NewTalkException() *TalkException {
	return &TalkException{}
}

func (p *TalkException) GetCode() ErrorCode {
	return p.Code
}

func (p *TalkException) GetReason() string {
	return p.Reason
}

func (p *TalkException) GetParameterMap() map[string]string {
	return p.ParameterMap
}
func (p *TalkException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ErrorCode(v)
		p.Code = temp
	}
	return nil
}

func (p *TalkException) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Reason = v
	}
	return nil
}

func (p *TalkException) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ParameterMap = tMap
	for i := 0; i < size; i++ {
		var _key44 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key44 = v
		}
		var _val45 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val45 = v
		}
		p.ParameterMap[_key44] = _val45
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TalkException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TalkException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *TalkException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reason", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reason: ", p), err)
	}
	if err := oprot.WriteString(string(p.Reason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reason (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reason: ", p), err)
	}
	return err
}

func (p *TalkException) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parameterMap", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parameterMap: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ParameterMap)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.ParameterMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parameterMap: ", p), err)
	}
	return err
}

func (p *TalkException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkException(%+v)", *p)
}

func (p *TalkException) Error() string {
	return p.String()
}

// Attributes:
//  - Code
//  - Reason
//  - ParameterMap
type CallException struct {
	Code         ErrorCode         `thrift:"code,1" json:"code"`
	Reason       string            `thrift:"reason,2" json:"reason"`
	ParameterMap map[string]string `thrift:"parameterMap,3" json:"parameterMap"`
}

func NewCallException() *CallException {
	return &CallException{}
}

func (p *CallException) GetCode() ErrorCode {
	return p.Code
}

func (p *CallException) GetReason() string {
	return p.Reason
}

func (p *CallException) GetParameterMap() map[string]string {
	return p.ParameterMap
}
func (p *CallException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CallException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ErrorCode(v)
		p.Code = temp
	}
	return nil
}

func (p *CallException) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Reason = v
	}
	return nil
}

func (p *CallException) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ParameterMap = tMap
	for i := 0; i < size; i++ {
		var _key46 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key46 = v
		}
		var _val47 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val47 = v
		}
		p.ParameterMap[_key46] = _val47
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *CallException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CallException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CallException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *CallException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reason", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reason: ", p), err)
	}
	if err := oprot.WriteString(string(p.Reason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reason (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reason: ", p), err)
	}
	return err
}

func (p *CallException) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parameterMap", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parameterMap: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ParameterMap)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.ParameterMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parameterMap: ", p), err)
	}
	return err
}

func (p *CallException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CallException(%+v)", *p)
}

func (p *CallException) Error() string {
	return p.String()
}

// Attributes:
//  - ID
//  - ExpirationTime
//  - MaxUseCount
type Ticket struct {
	ID string `thrift:"id,1" json:"id"`
	// unused fields # 2 to 9
	ExpirationTime int64 `thrift:"expirationTime,10" json:"expirationTime"`
	// unused fields # 11 to 20
	MaxUseCount int32 `thrift:"maxUseCount,21" json:"maxUseCount"`
}

func NewTicket() *Ticket {
	return &Ticket{}
}

func (p *Ticket) GetID() string {
	return p.ID
}

func (p *Ticket) GetExpirationTime() int64 {
	return p.ExpirationTime
}

func (p *Ticket) GetMaxUseCount() int32 {
	return p.MaxUseCount
}
func (p *Ticket) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Ticket) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Ticket) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.ExpirationTime = v
	}
	return nil
}

func (p *Ticket) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.MaxUseCount = v
	}
	return nil
}

func (p *Ticket) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Ticket"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Ticket) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Ticket) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expirationTime", thrift.I64, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:expirationTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ExpirationTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.expirationTime (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:expirationTime: ", p), err)
	}
	return err
}

func (p *Ticket) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxUseCount", thrift.I32, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:maxUseCount: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxUseCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxUseCount (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:maxUseCount: ", p), err)
	}
	return err
}

func (p *Ticket) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Ticket(%+v)", *p)
}

// Attributes:
//  - ID
//  - ChannelId
//  - LastSeq
//  - UnreadCount
//  - LastModifiedTime
//  - Status
//  - MidType
//  - LastMessages
type TMessageBox struct {
	ID        string `thrift:"id,1" json:"id"`
	ChannelId string `thrift:"channelId,2" json:"channelId"`
	// unused fields # 3 to 4
	LastSeq          int64      `thrift:"lastSeq,5" json:"lastSeq"`
	UnreadCount      int64      `thrift:"unreadCount,6" json:"unreadCount"`
	LastModifiedTime int64      `thrift:"lastModifiedTime,7" json:"lastModifiedTime"`
	Status           int32      `thrift:"status,8" json:"status"`
	MidType          MIDType    `thrift:"midType,9" json:"midType"`
	LastMessages     []*Message `thrift:"lastMessages,10" json:"lastMessages"`
}

func NewTMessageBox() *TMessageBox {
	return &TMessageBox{}
}

func (p *TMessageBox) GetID() string {
	return p.ID
}

func (p *TMessageBox) GetChannelId() string {
	return p.ChannelId
}

func (p *TMessageBox) GetLastSeq() int64 {
	return p.LastSeq
}

func (p *TMessageBox) GetUnreadCount() int64 {
	return p.UnreadCount
}

func (p *TMessageBox) GetLastModifiedTime() int64 {
	return p.LastModifiedTime
}

func (p *TMessageBox) GetStatus() int32 {
	return p.Status
}

func (p *TMessageBox) GetMidType() MIDType {
	return p.MidType
}

func (p *TMessageBox) GetLastMessages() []*Message {
	return p.LastMessages
}
func (p *TMessageBox) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMessageBox) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TMessageBox) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *TMessageBox) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.LastSeq = v
	}
	return nil
}

func (p *TMessageBox) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.UnreadCount = v
	}
	return nil
}

func (p *TMessageBox) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.LastModifiedTime = v
	}
	return nil
}

func (p *TMessageBox) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *TMessageBox) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		temp := MIDType(v)
		p.MidType = temp
	}
	return nil
}

func (p *TMessageBox) readField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Message, 0, size)
	p.LastMessages = tSlice
	for i := 0; i < size; i++ {
		_elem48 := &Message{}
		if err := _elem48.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem48), err)
		}
		p.LastMessages = append(p.LastMessages, _elem48)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMessageBox) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMessageBox"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMessageBox) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *TMessageBox) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:channelId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.channelId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:channelId: ", p), err)
	}
	return err
}

func (p *TMessageBox) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastSeq", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lastSeq: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LastSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastSeq (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lastSeq: ", p), err)
	}
	return err
}

func (p *TMessageBox) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unreadCount", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:unreadCount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UnreadCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.unreadCount (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:unreadCount: ", p), err)
	}
	return err
}

func (p *TMessageBox) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastModifiedTime", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:lastModifiedTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LastModifiedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastModifiedTime (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:lastModifiedTime: ", p), err)
	}
	return err
}

func (p *TMessageBox) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:status: ", p), err)
	}
	return err
}

func (p *TMessageBox) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("midType", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:midType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MidType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.midType (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:midType: ", p), err)
	}
	return err
}

func (p *TMessageBox) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastMessages", thrift.LIST, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:lastMessages: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LastMessages)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.LastMessages {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:lastMessages: ", p), err)
	}
	return err
}

func (p *TMessageBox) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMessageBox(%+v)", *p)
}

// Attributes:
//  - MessageBox
//  - Name
//  - Contacts
//  - PictureRevision
type TMessageBoxWrapUp struct {
	MessageBox      *TMessageBox `thrift:"messageBox,1" json:"messageBox"`
	Name            string       `thrift:"name,2" json:"name"`
	Contacts        []*Contact   `thrift:"contacts,3" json:"contacts"`
	PictureRevision string       `thrift:"pictureRevision,4" json:"pictureRevision"`
}

func NewTMessageBoxWrapUp() *TMessageBoxWrapUp {
	return &TMessageBoxWrapUp{}
}

var TMessageBoxWrapUp_MessageBox_DEFAULT *TMessageBox

func (p *TMessageBoxWrapUp) GetMessageBox() *TMessageBox {
	if !p.IsSetMessageBox() {
		return TMessageBoxWrapUp_MessageBox_DEFAULT
	}
	return p.MessageBox
}

func (p *TMessageBoxWrapUp) GetName() string {
	return p.Name
}

func (p *TMessageBoxWrapUp) GetContacts() []*Contact {
	return p.Contacts
}

func (p *TMessageBoxWrapUp) GetPictureRevision() string {
	return p.PictureRevision
}
func (p *TMessageBoxWrapUp) IsSetMessageBox() bool {
	return p.MessageBox != nil
}

func (p *TMessageBoxWrapUp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMessageBoxWrapUp) readField1(iprot thrift.TProtocol) error {
	p.MessageBox = &TMessageBox{}
	if err := p.MessageBox.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MessageBox), err)
	}
	return nil
}

func (p *TMessageBoxWrapUp) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TMessageBoxWrapUp) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Contacts = tSlice
	for i := 0; i < size; i++ {
		_elem49 := &Contact{}
		if err := _elem49.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem49), err)
		}
		p.Contacts = append(p.Contacts, _elem49)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMessageBoxWrapUp) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PictureRevision = v
	}
	return nil
}

func (p *TMessageBoxWrapUp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMessageBoxWrapUp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMessageBoxWrapUp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBox", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:messageBox: ", p), err)
	}
	if err := p.MessageBox.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MessageBox), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:messageBox: ", p), err)
	}
	return err
}

func (p *TMessageBoxWrapUp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *TMessageBoxWrapUp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contacts", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contacts: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Contacts)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Contacts {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contacts: ", p), err)
	}
	return err
}

func (p *TMessageBoxWrapUp) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pictureRevision", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pictureRevision: ", p), err)
	}
	if err := oprot.WriteString(string(p.PictureRevision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pictureRevision (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pictureRevision: ", p), err)
	}
	return err
}

func (p *TMessageBoxWrapUp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMessageBoxWrapUp(%+v)", *p)
}

// Attributes:
//  - MessageBoxWrapUpList
//  - TotalSize
type TMessageBoxWrapUpResponse struct {
	MessageBoxWrapUpList []*TMessageBoxWrapUp `thrift:"messageBoxWrapUpList,1" json:"messageBoxWrapUpList"`
	TotalSize            int32                `thrift:"totalSize,2" json:"totalSize"`
}

func NewTMessageBoxWrapUpResponse() *TMessageBoxWrapUpResponse {
	return &TMessageBoxWrapUpResponse{}
}

func (p *TMessageBoxWrapUpResponse) GetMessageBoxWrapUpList() []*TMessageBoxWrapUp {
	return p.MessageBoxWrapUpList
}

func (p *TMessageBoxWrapUpResponse) GetTotalSize() int32 {
	return p.TotalSize
}
func (p *TMessageBoxWrapUpResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMessageBoxWrapUpResponse) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TMessageBoxWrapUp, 0, size)
	p.MessageBoxWrapUpList = tSlice
	for i := 0; i < size; i++ {
		_elem50 := &TMessageBoxWrapUp{}
		if err := _elem50.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem50), err)
		}
		p.MessageBoxWrapUpList = append(p.MessageBoxWrapUpList, _elem50)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMessageBoxWrapUpResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TotalSize = v
	}
	return nil
}

func (p *TMessageBoxWrapUpResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMessageBoxWrapUpResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMessageBoxWrapUpResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBoxWrapUpList", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:messageBoxWrapUpList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MessageBoxWrapUpList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MessageBoxWrapUpList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:messageBoxWrapUpList: ", p), err)
	}
	return err
}

func (p *TMessageBoxWrapUpResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalSize", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:totalSize: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalSize (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:totalSize: ", p), err)
	}
	return err
}

func (p *TMessageBoxWrapUpResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMessageBoxWrapUpResponse(%+v)", *p)
}

// Attributes:
//  - Code
//  - Reason
//  - ParameterMap
type UniversalNotificationServiceException struct {
	Code         UniversalNotificationServiceErrorCode `thrift:"code,1" json:"code"`
	Reason       string                                `thrift:"reason,2" json:"reason"`
	ParameterMap map[string]string                     `thrift:"parameterMap,3" json:"parameterMap"`
}

func NewUniversalNotificationServiceException() *UniversalNotificationServiceException {
	return &UniversalNotificationServiceException{}
}

func (p *UniversalNotificationServiceException) GetCode() UniversalNotificationServiceErrorCode {
	return p.Code
}

func (p *UniversalNotificationServiceException) GetReason() string {
	return p.Reason
}

func (p *UniversalNotificationServiceException) GetParameterMap() map[string]string {
	return p.ParameterMap
}
func (p *UniversalNotificationServiceException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UniversalNotificationServiceException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := UniversalNotificationServiceErrorCode(v)
		p.Code = temp
	}
	return nil
}

func (p *UniversalNotificationServiceException) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Reason = v
	}
	return nil
}

func (p *UniversalNotificationServiceException) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ParameterMap = tMap
	for i := 0; i < size; i++ {
		var _key51 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key51 = v
		}
		var _val52 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val52 = v
		}
		p.ParameterMap[_key51] = _val52
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UniversalNotificationServiceException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UniversalNotificationServiceException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UniversalNotificationServiceException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *UniversalNotificationServiceException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reason", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reason: ", p), err)
	}
	if err := oprot.WriteString(string(p.Reason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reason (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reason: ", p), err)
	}
	return err
}

func (p *UniversalNotificationServiceException) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parameterMap", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parameterMap: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ParameterMap)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.ParameterMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parameterMap: ", p), err)
	}
	return err
}

func (p *UniversalNotificationServiceException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UniversalNotificationServiceException(%+v)", *p)
}

func (p *UniversalNotificationServiceException) Error() string {
	return p.String()
}

// Attributes:
//  - PhoneNumberRegistered
//  - RegisteredSnsIdTypes
type UserAuthStatus struct {
	PhoneNumberRegistered bool        `thrift:"phoneNumberRegistered,1" json:"phoneNumberRegistered"`
	RegisteredSnsIdTypes  []SnsIdType `thrift:"registeredSnsIdTypes,2" json:"registeredSnsIdTypes"`
}

func NewUserAuthStatus() *UserAuthStatus {
	return &UserAuthStatus{}
}

func (p *UserAuthStatus) GetPhoneNumberRegistered() bool {
	return p.PhoneNumberRegistered
}

func (p *UserAuthStatus) GetRegisteredSnsIdTypes() []SnsIdType {
	return p.RegisteredSnsIdTypes
}
func (p *UserAuthStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAuthStatus) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PhoneNumberRegistered = v
	}
	return nil
}

func (p *UserAuthStatus) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]SnsIdType, 0, size)
	p.RegisteredSnsIdTypes = tSlice
	for i := 0; i < size; i++ {
		var _elem53 SnsIdType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := SnsIdType(v)
			_elem53 = temp
		}
		p.RegisteredSnsIdTypes = append(p.RegisteredSnsIdTypes, _elem53)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserAuthStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserAuthStatus"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAuthStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phoneNumberRegistered", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:phoneNumberRegistered: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PhoneNumberRegistered)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phoneNumberRegistered (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:phoneNumberRegistered: ", p), err)
	}
	return err
}

func (p *UserAuthStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("registeredSnsIdTypes", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:registeredSnsIdTypes: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.RegisteredSnsIdTypes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RegisteredSnsIdTypes {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:registeredSnsIdTypes: ", p), err)
	}
	return err
}

func (p *UserAuthStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAuthStatus(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Method
//  - Callback
//  - NormalizedPhone
//  - CountryCode
//  - NationalSignificantNumber
//  - AvailableVerificationMethods
type VerificationSessionData struct {
	SessionId                    string               `thrift:"sessionId,1" json:"sessionId"`
	Method                       VerificationMethod   `thrift:"method,2" json:"method"`
	Callback                     string               `thrift:"callback,3" json:"callback"`
	NormalizedPhone              string               `thrift:"normalizedPhone,4" json:"normalizedPhone"`
	CountryCode                  string               `thrift:"countryCode,5" json:"countryCode"`
	NationalSignificantNumber    string               `thrift:"nationalSignificantNumber,6" json:"nationalSignificantNumber"`
	AvailableVerificationMethods []VerificationMethod `thrift:"availableVerificationMethods,7" json:"availableVerificationMethods"`
}

func NewVerificationSessionData() *VerificationSessionData {
	return &VerificationSessionData{}
}

func (p *VerificationSessionData) GetSessionId() string {
	return p.SessionId
}

func (p *VerificationSessionData) GetMethod() VerificationMethod {
	return p.Method
}

func (p *VerificationSessionData) GetCallback() string {
	return p.Callback
}

func (p *VerificationSessionData) GetNormalizedPhone() string {
	return p.NormalizedPhone
}

func (p *VerificationSessionData) GetCountryCode() string {
	return p.CountryCode
}

func (p *VerificationSessionData) GetNationalSignificantNumber() string {
	return p.NationalSignificantNumber
}

func (p *VerificationSessionData) GetAvailableVerificationMethods() []VerificationMethod {
	return p.AvailableVerificationMethods
}
func (p *VerificationSessionData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VerificationSessionData) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *VerificationSessionData) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := VerificationMethod(v)
		p.Method = temp
	}
	return nil
}

func (p *VerificationSessionData) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Callback = v
	}
	return nil
}

func (p *VerificationSessionData) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NormalizedPhone = v
	}
	return nil
}

func (p *VerificationSessionData) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.CountryCode = v
	}
	return nil
}

func (p *VerificationSessionData) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.NationalSignificantNumber = v
	}
	return nil
}

func (p *VerificationSessionData) readField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]VerificationMethod, 0, size)
	p.AvailableVerificationMethods = tSlice
	for i := 0; i < size; i++ {
		var _elem54 VerificationMethod
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := VerificationMethod(v)
			_elem54 = temp
		}
		p.AvailableVerificationMethods = append(p.AvailableVerificationMethods, _elem54)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *VerificationSessionData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VerificationSessionData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VerificationSessionData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *VerificationSessionData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("method", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:method: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Method)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.method (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:method: ", p), err)
	}
	return err
}

func (p *VerificationSessionData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("callback", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:callback: ", p), err)
	}
	if err := oprot.WriteString(string(p.Callback)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.callback (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:callback: ", p), err)
	}
	return err
}

func (p *VerificationSessionData) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("normalizedPhone", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:normalizedPhone: ", p), err)
	}
	if err := oprot.WriteString(string(p.NormalizedPhone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.normalizedPhone (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:normalizedPhone: ", p), err)
	}
	return err
}

func (p *VerificationSessionData) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("countryCode", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:countryCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.CountryCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.countryCode (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:countryCode: ", p), err)
	}
	return err
}

func (p *VerificationSessionData) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nationalSignificantNumber", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nationalSignificantNumber: ", p), err)
	}
	if err := oprot.WriteString(string(p.NationalSignificantNumber)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nationalSignificantNumber (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nationalSignificantNumber: ", p), err)
	}
	return err
}

func (p *VerificationSessionData) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("availableVerificationMethods", thrift.LIST, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:availableVerificationMethods: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.AvailableVerificationMethods)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.AvailableVerificationMethods {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:availableVerificationMethods: ", p), err)
	}
	return err
}

func (p *VerificationSessionData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerificationSessionData(%+v)", *p)
}

// Attributes:
//  - Type
//  - InviteeEmail
//  - InviterMid
//  - RoomMid
type WapInvitation struct {
	Type WapInvitationType `thrift:"type,1" json:"type"`
	// unused fields # 2 to 9
	InviteeEmail string `thrift:"inviteeEmail,10" json:"inviteeEmail"`
	InviterMid   string `thrift:"inviterMid,11" json:"inviterMid"`
	RoomMid      string `thrift:"roomMid,12" json:"roomMid"`
}

func NewWapInvitation() *WapInvitation {
	return &WapInvitation{}
}

func (p *WapInvitation) GetType() WapInvitationType {
	return p.Type
}

func (p *WapInvitation) GetInviteeEmail() string {
	return p.InviteeEmail
}

func (p *WapInvitation) GetInviterMid() string {
	return p.InviterMid
}

func (p *WapInvitation) GetRoomMid() string {
	return p.RoomMid
}
func (p *WapInvitation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WapInvitation) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := WapInvitationType(v)
		p.Type = temp
	}
	return nil
}

func (p *WapInvitation) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.InviteeEmail = v
	}
	return nil
}

func (p *WapInvitation) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.InviterMid = v
	}
	return nil
}

func (p *WapInvitation) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.RoomMid = v
	}
	return nil
}

func (p *WapInvitation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("WapInvitation"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WapInvitation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *WapInvitation) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inviteeEmail", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:inviteeEmail: ", p), err)
	}
	if err := oprot.WriteString(string(p.InviteeEmail)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.inviteeEmail (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:inviteeEmail: ", p), err)
	}
	return err
}

func (p *WapInvitation) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inviterMid", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:inviterMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.InviterMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.inviterMid (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:inviterMid: ", p), err)
	}
	return err
}

func (p *WapInvitation) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roomMid", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:roomMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoomMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roomMid (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:roomMid: ", p), err)
	}
	return err
}

func (p *WapInvitation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WapInvitation(%+v)", *p)
}
