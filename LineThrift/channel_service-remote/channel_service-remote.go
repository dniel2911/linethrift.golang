// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"LineThrift"
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  ChannelToken approveChannelAndIssueChannelToken(string channelId)")
	fmt.Fprintln(os.Stderr, "  ApprovedChannelInfos getApprovedChannels(i64 lastSynced, string locale)")
	fmt.Fprintln(os.Stderr, "  ChannelInfo getChannelInfo(string channelId, string locale)")
	fmt.Fprintln(os.Stderr, "  ChannelNotificationSetting getChannelNotificationSetting(string channelId, string locale)")
	fmt.Fprintln(os.Stderr, "   getChannelNotificationSettings(string locale)")
	fmt.Fprintln(os.Stderr, "  ChannelSettings getChannelSettings()")
	fmt.Fprintln(os.Stderr, "  ChannelDomains getCommonDomains(i64 lastSynced)")
	fmt.Fprintln(os.Stderr, "  FriendChannelMatricesResponse getFriendChannelMatrices( channelIds)")
	fmt.Fprintln(os.Stderr, "  string getUpdatedChannelIds( channelIds)")
	fmt.Fprintln(os.Stderr, "  ChannelToken issueChannelToken(string channelId)")
	fmt.Fprintln(os.Stderr, "  string issueRequestToken()")
	fmt.Fprintln(os.Stderr, "  string issueRequestTokenForAutoLogin(string channelId, string otpId, string redirectUrl)")
	fmt.Fprintln(os.Stderr, "  RequestTokenResponse issueRequestTokenWithAuthScheme(string channelId, string otpId,  authScheme, string returnUrl)")
	fmt.Fprintln(os.Stderr, "  void revokeChannel(string channelId)")
	fmt.Fprintln(os.Stderr, "  bool updateChannelSettings(ChannelSettings channelSettings)")
	fmt.Fprintln(os.Stderr, "  void updateChannelNotificationSetting( setting)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := LineThrift.NewChannelServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "approveChannelAndIssueChannelToken":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ApproveChannelAndIssueChannelToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ApproveChannelAndIssueChannelToken(value0))
		fmt.Print("\n")
		break
	case "getApprovedChannels":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetApprovedChannels requires 2 args")
			flag.Usage()
		}
		argvalue0, err623 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err623 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetApprovedChannels(value0, value1))
		fmt.Print("\n")
		break
	case "getChannelInfo":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetChannelInfo requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetChannelInfo(value0, value1))
		fmt.Print("\n")
		break
	case "getChannelNotificationSetting":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetChannelNotificationSetting requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetChannelNotificationSetting(value0, value1))
		fmt.Print("\n")
		break
	case "getChannelNotificationSettings":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetChannelNotificationSettings requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetChannelNotificationSettings(value0))
		fmt.Print("\n")
		break
	case "getChannelSettings":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetChannelSettings requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetChannelSettings())
		fmt.Print("\n")
		break
	case "getCommonDomains":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCommonDomains requires 1 args")
			flag.Usage()
		}
		argvalue0, err630 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err630 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetCommonDomains(value0))
		fmt.Print("\n")
		break
	case "getFriendChannelMatrices":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetFriendChannelMatrices requires 1 args")
			flag.Usage()
		}
		arg631 := flag.Arg(1)
		mbTrans632 := thrift.NewTMemoryBufferLen(len(arg631))
		defer mbTrans632.Close()
		_, err633 := mbTrans632.WriteString(arg631)
		if err633 != nil {
			Usage()
			return
		}
		factory634 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt635 := factory634.GetProtocol(mbTrans632)
		containerStruct0 := LineThrift.NewChannelServiceGetFriendChannelMatricesArgs()
		err636 := containerStruct0.ReadField1(jsProt635)
		if err636 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.ChannelIds
		value0 := argvalue0
		fmt.Print(client.GetFriendChannelMatrices(value0))
		fmt.Print("\n")
		break
	case "getUpdatedChannelIds":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUpdatedChannelIds requires 1 args")
			flag.Usage()
		}
		arg637 := flag.Arg(1)
		mbTrans638 := thrift.NewTMemoryBufferLen(len(arg637))
		defer mbTrans638.Close()
		_, err639 := mbTrans638.WriteString(arg637)
		if err639 != nil {
			Usage()
			return
		}
		factory640 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt641 := factory640.GetProtocol(mbTrans638)
		containerStruct0 := LineThrift.NewChannelServiceGetUpdatedChannelIdsArgs()
		err642 := containerStruct0.ReadField1(jsProt641)
		if err642 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.ChannelIds
		value0 := argvalue0
		fmt.Print(client.GetUpdatedChannelIds(value0))
		fmt.Print("\n")
		break
	case "issueChannelToken":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "IssueChannelToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.IssueChannelToken(value0))
		fmt.Print("\n")
		break
	case "issueRequestToken":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "IssueRequestToken requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.IssueRequestToken())
		fmt.Print("\n")
		break
	case "issueRequestTokenForAutoLogin":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "IssueRequestTokenForAutoLogin requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.IssueRequestTokenForAutoLogin(value0, value1, value2))
		fmt.Print("\n")
		break
	case "issueRequestTokenWithAuthScheme":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "IssueRequestTokenWithAuthScheme requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg649 := flag.Arg(3)
		mbTrans650 := thrift.NewTMemoryBufferLen(len(arg649))
		defer mbTrans650.Close()
		_, err651 := mbTrans650.WriteString(arg649)
		if err651 != nil {
			Usage()
			return
		}
		factory652 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt653 := factory652.GetProtocol(mbTrans650)
		containerStruct2 := LineThrift.NewChannelServiceIssueRequestTokenWithAuthSchemeArgs()
		err654 := containerStruct2.ReadField3(jsProt653)
		if err654 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.AuthScheme
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.IssueRequestTokenWithAuthScheme(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "revokeChannel":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RevokeChannel requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.RevokeChannel(value0))
		fmt.Print("\n")
		break
	case "updateChannelSettings":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateChannelSettings requires 1 args")
			flag.Usage()
		}
		arg657 := flag.Arg(1)
		mbTrans658 := thrift.NewTMemoryBufferLen(len(arg657))
		defer mbTrans658.Close()
		_, err659 := mbTrans658.WriteString(arg657)
		if err659 != nil {
			Usage()
			return
		}
		factory660 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt661 := factory660.GetProtocol(mbTrans658)
		argvalue0 := LineThrift.NewChannelSettings()
		err662 := argvalue0.Read(jsProt661)
		if err662 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateChannelSettings(value0))
		fmt.Print("\n")
		break
	case "updateChannelNotificationSetting":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateChannelNotificationSetting requires 1 args")
			flag.Usage()
		}
		arg663 := flag.Arg(1)
		mbTrans664 := thrift.NewTMemoryBufferLen(len(arg663))
		defer mbTrans664.Close()
		_, err665 := mbTrans664.WriteString(arg663)
		if err665 != nil {
			Usage()
			return
		}
		factory666 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt667 := factory666.GetProtocol(mbTrans664)
		containerStruct0 := LineThrift.NewChannelServiceUpdateChannelNotificationSettingArgs()
		err668 := containerStruct0.ReadField1(jsProt667)
		if err668 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Setting
		value0 := argvalue0
		fmt.Print(client.UpdateChannelNotificationSetting(value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
