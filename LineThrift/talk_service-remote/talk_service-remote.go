// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"LineThrift"
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  void acceptGroupInvitation(i32 reqSeq, string groupId)")
	fmt.Fprintln(os.Stderr, "  void acceptGroupInvitationByTicket(i32 reqSeq, string groupId, string ticketId)")
	fmt.Fprintln(os.Stderr, "  void acceptProximityMatches(string sessionId,  ids)")
	fmt.Fprintln(os.Stderr, "   acquireCallRoute(string to)")
	fmt.Fprintln(os.Stderr, "  string acquireCallTicket(string to)")
	fmt.Fprintln(os.Stderr, "  string acquireEncryptedAccessToken(FeatureType featureType)")
	fmt.Fprintln(os.Stderr, "  void blockContact(i32 reqSeq, string id)")
	fmt.Fprintln(os.Stderr, "  void blockRecommendation(i32 reqSeq, string id)")
	fmt.Fprintln(os.Stderr, "  void cancelGroupInvitation(i32 reqSeq, string groupId,  contactIds)")
	fmt.Fprintln(os.Stderr, "  VerificationSessionData changeVerificationMethod(string sessionId, VerificationMethod method)")
	fmt.Fprintln(os.Stderr, "  void clearIdentityCredential()")
	fmt.Fprintln(os.Stderr, "  void clearMessageBox(string channelId, string messageBoxId)")
	fmt.Fprintln(os.Stderr, "  void closeProximityMatch(string sessionId)")
	fmt.Fprintln(os.Stderr, "  void confirmEmail(string verifier, string pinCode)")
	fmt.Fprintln(os.Stderr, "   createAccountMigrationPincodeSession()")
	fmt.Fprintln(os.Stderr, "  Group createGroup(i32 seq, string name,  contactIds)")
	fmt.Fprintln(os.Stderr, "  string createQrcodeBase64Image(string url, string characterSet, i32 imageSize, i32 x, i32 y, i32 width, i32 height)")
	fmt.Fprintln(os.Stderr, "  Room createRoom(i32 reqSeq,  contactIds)")
	fmt.Fprintln(os.Stderr, "  void disableNearby()")
	fmt.Fprintln(os.Stderr, "   fetchOperations(i64 localRev, i32 count)")
	fmt.Fprintln(os.Stderr, "   fetchOps(i64 localRev, i32 count, i64 globalRev, i64 individualRev)")
	fmt.Fprintln(os.Stderr, "   findContactsByEmail( emails)")
	fmt.Fprintln(os.Stderr, "   findContactsByPhone( phones)")
	fmt.Fprintln(os.Stderr, "   findAndAddContactsByEmail(i32 reqSeq,  emails)")
	fmt.Fprintln(os.Stderr, "   findAndAddContactsByMid(i32 reqSeq, string mid)")
	fmt.Fprintln(os.Stderr, "   findAndAddContactsByPhone(i32 reqSeq,  phones)")
	fmt.Fprintln(os.Stderr, "   findAndAddContactsByUserid(i32 reqSeq, string userid)")
	fmt.Fprintln(os.Stderr, "  Contact findContactByMetaTag(string userid, string reference)")
	fmt.Fprintln(os.Stderr, "  Contact findContactByUserTicket(string ticketId)")
	fmt.Fprintln(os.Stderr, "  Group findGroupByTicket(string ticketId)")
	fmt.Fprintln(os.Stderr, "  void finishUpdateVerification(string sessionId)")
	fmt.Fprintln(os.Stderr, "  Ticket generateUserTicket(i64 expirationTime, i32 maxUseCount)")
	fmt.Fprintln(os.Stderr, "   getAcceptedProximityMatches(string sessionId)")
	fmt.Fprintln(os.Stderr, "   getAllContactIds()")
	fmt.Fprintln(os.Stderr, "  AnalyticsInfo getAnalyticsInfo()")
	fmt.Fprintln(os.Stderr, "  AuthQrcode getAuthQrcode(bool keepLoggedIn, string systemName)")
	fmt.Fprintln(os.Stderr, "   getBlockedContactIds()")
	fmt.Fprintln(os.Stderr, "   getBlockedContactIdsByRange(i32 start, i32 count)")
	fmt.Fprintln(os.Stderr, "   getBlockedRecommendationIds()")
	fmt.Fprintln(os.Stderr, "  Group getCompactGroup(string groupId)")
	fmt.Fprintln(os.Stderr, "  Configurations getConfigurations(i64 revision, string regionOfUsim, string regionOfTelephone, string regionOfLocale, string carrier)")
	fmt.Fprintln(os.Stderr, "  Contact getContact(string id)")
	fmt.Fprintln(os.Stderr, "  ContactRegistration getContactRegistration(string id, ContactType type)")
	fmt.Fprintln(os.Stderr, "   getContacts( ids)")
	fmt.Fprintln(os.Stderr, "  string getCountryWithRequestIp()")
	fmt.Fprintln(os.Stderr, "   getFavoriteMids()")
	fmt.Fprintln(os.Stderr, "   getFriendRequests()")
	fmt.Fprintln(os.Stderr, "  ExtendedProfile getExtendedProfile()")
	fmt.Fprintln(os.Stderr, "  FriendRequestsInfo getRecentFriendRequests()")
	fmt.Fprintln(os.Stderr, "  Group getGroup(string groupId)")
	fmt.Fprintln(os.Stderr, "   getGroupIdsInvited()")
	fmt.Fprintln(os.Stderr, "   getGroupIdsJoined()")
	fmt.Fprintln(os.Stderr, "   getGroups( groupIds)")
	fmt.Fprintln(os.Stderr, "  Group getGroupWithoutMembers(string groupId)")
	fmt.Fprintln(os.Stderr, "  i64 getLastOpRevision()")
	fmt.Fprintln(os.Stderr, "  Profile getProfile()")
	fmt.Fprintln(os.Stderr, "  ProximityMatchCandidateResult getProximityMatchCandidateList(string sessionId)")
	fmt.Fprintln(os.Stderr, "  RSAKey getRSAKeyInfo(IdentityProvider provider)")
	fmt.Fprintln(os.Stderr, "  RingbackTone getRingbackTone()")
	fmt.Fprintln(os.Stderr, "  Room getRoom(string roomId)")
	fmt.Fprintln(os.Stderr, "  i64 getServerTime()")
	fmt.Fprintln(os.Stderr, "   getSessions()")
	fmt.Fprintln(os.Stderr, "  Settings getSettings()")
	fmt.Fprintln(os.Stderr, "  Settings getSettingsAttributes(i32 attrBitset)")
	fmt.Fprintln(os.Stderr, "  Settings getSettingsAttributes2(i32 attrBitset)")
	fmt.Fprintln(os.Stderr, "  void inviteIntoGroup(i32 reqSeq, string groupId,  contactIds)")
	fmt.Fprintln(os.Stderr, "  void inviteIntoRoom(i32 reqSeq, string roomId,  contactIds)")
	fmt.Fprintln(os.Stderr, "  bool isUseridAvailable(string userid)")
	fmt.Fprintln(os.Stderr, "  void kickoutFromGroup(i32 reqSeq, string groupId,  contactIds)")
	fmt.Fprintln(os.Stderr, "  void leaveGroup(i32 reqSeq, string groupId)")
	fmt.Fprintln(os.Stderr, "  void leaveRoom(i32 reqSeq, string roomId)")
	fmt.Fprintln(os.Stderr, "  string loginWithIdentityCredential(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)")
	fmt.Fprintln(os.Stderr, "  LoginResult loginWithIdentityCredentialForCertificate(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)")
	fmt.Fprintln(os.Stderr, "  string loginWithVerifier(string verifier)")
	fmt.Fprintln(os.Stderr, "  LoginResult loginWithVerifierForCerificate(string verifier)")
	fmt.Fprintln(os.Stderr, "  LoginResult loginWithVerifierForCertificate(string verifier)")
	fmt.Fprintln(os.Stderr, "  void logout()")
	fmt.Fprintln(os.Stderr, "  void logoutSession(string tokenKey)")
	fmt.Fprintln(os.Stderr, "  void noop()")
	fmt.Fprintln(os.Stderr, "  bool registerUserid(i32 reqSeq, string userid)")
	fmt.Fprintln(os.Stderr, "  string reissueUserTicket(i64 expirationTime, i32 maxUseCount)")
	fmt.Fprintln(os.Stderr, "  string reissueGroupTicket(string groupId)")
	fmt.Fprintln(os.Stderr, "  void rejectGroupInvitation(i32 reqSeq, string groupId)")
	fmt.Fprintln(os.Stderr, "  void releaseSession()")
	fmt.Fprintln(os.Stderr, "  void removeAllMessages(i32 seq, string lastMessageId)")
	fmt.Fprintln(os.Stderr, "  void removeFriendRequest(DirectionType direction, string midOrEMid)")
	fmt.Fprintln(os.Stderr, "  void sendChatChecked(i32 seq, string consumer, string lastMessageId, double sessionId)")
	fmt.Fprintln(os.Stderr, "  void sendChatRemoved(i32 seq, string consumer, string lastMessageId, double sessionId)")
	fmt.Fprintln(os.Stderr, "  void sendContentReceipt(i32 seq, string consumer, string messageId)")
	fmt.Fprintln(os.Stderr, "  void sendEchoPush(string text)")
	fmt.Fprintln(os.Stderr, "  Message sendMessage(i32 seq, Message message)")
	fmt.Fprintln(os.Stderr, "  Message sendMessageToMyHome()")
	fmt.Fprintln(os.Stderr, "  void sendPostback(SendPostbackRequest requests)")
	fmt.Fprintln(os.Stderr, "  void unblockContact(i32 reqSeq, string id)")
	fmt.Fprintln(os.Stderr, "  void unblockRecommendation(i32 reqSeq, string id)")
	fmt.Fprintln(os.Stderr, "  void updateContactSetting(i32 reqSeq, string mid, ContactSetting flag, string value)")
	fmt.Fprintln(os.Stderr, "  void updateExtendedProfileAttribute(i32 reqSeq, ExtendAttr attr, ExtendedProfile extendedProfile)")
	fmt.Fprintln(os.Stderr, "  void updateGroup(i32 reqSeq, Group group)")
	fmt.Fprintln(os.Stderr, "  void updateGroupPreferenceAttribute(i32 reqSeq, string groupMid,  updatedAttrs)")
	fmt.Fprintln(os.Stderr, "  void updateNotificationToken(string token, NotificationType type)")
	fmt.Fprintln(os.Stderr, "  void updateProfile(i32 reqSeq, Profile profile)")
	fmt.Fprintln(os.Stderr, "  void updateProfileAttribute(i32 reqSeq, ProfileAttribute attr, string value)")
	fmt.Fprintln(os.Stderr, "  void updateSettings(i32 reqSeq, Settings settings)")
	fmt.Fprintln(os.Stderr, "  i32 updateSettings2(i32 reqSeq, Settings settings)")
	fmt.Fprintln(os.Stderr, "  void updateSettingsAttribute(i32 reqSeq, SettingsAttribute attr, string value)")
	fmt.Fprintln(os.Stderr, "  i32 updateSettingsAttributes(i32 reqSeq, i32 attrBitset, Settings settings)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := LineThrift.NewTalkServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "acceptGroupInvitation":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AcceptGroupInvitation requires 2 args")
			flag.Usage()
		}
		tmp0, err312 := (strconv.Atoi(flag.Arg(1)))
		if err312 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AcceptGroupInvitation(value0, value1))
		fmt.Print("\n")
		break
	case "acceptGroupInvitationByTicket":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AcceptGroupInvitationByTicket requires 3 args")
			flag.Usage()
		}
		tmp0, err314 := (strconv.Atoi(flag.Arg(1)))
		if err314 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.AcceptGroupInvitationByTicket(value0, value1, value2))
		fmt.Print("\n")
		break
	case "acceptProximityMatches":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AcceptProximityMatches requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg318 := flag.Arg(2)
		mbTrans319 := thrift.NewTMemoryBufferLen(len(arg318))
		defer mbTrans319.Close()
		_, err320 := mbTrans319.WriteString(arg318)
		if err320 != nil {
			Usage()
			return
		}
		factory321 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt322 := factory321.GetProtocol(mbTrans319)
		containerStruct1 := LineThrift.NewTalkServiceAcceptProximityMatchesArgs()
		err323 := containerStruct1.ReadField2(jsProt322)
		if err323 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Ids
		value1 := argvalue1
		fmt.Print(client.AcceptProximityMatches(value0, value1))
		fmt.Print("\n")
		break
	case "acquireCallRoute":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AcquireCallRoute requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.AcquireCallRoute(value0))
		fmt.Print("\n")
		break
	case "acquireCallTicket":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AcquireCallTicket requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.AcquireCallTicket(value0))
		fmt.Print("\n")
		break
	case "acquireEncryptedAccessToken":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AcquireEncryptedAccessToken requires 1 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := LineThrift.FeatureType(tmp0)
		value0 := argvalue0
		fmt.Print(client.AcquireEncryptedAccessToken(value0))
		fmt.Print("\n")
		break
	case "blockContact":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "BlockContact requires 2 args")
			flag.Usage()
		}
		tmp0, err326 := (strconv.Atoi(flag.Arg(1)))
		if err326 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.BlockContact(value0, value1))
		fmt.Print("\n")
		break
	case "blockRecommendation":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "BlockRecommendation requires 2 args")
			flag.Usage()
		}
		tmp0, err328 := (strconv.Atoi(flag.Arg(1)))
		if err328 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.BlockRecommendation(value0, value1))
		fmt.Print("\n")
		break
	case "cancelGroupInvitation":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "CancelGroupInvitation requires 3 args")
			flag.Usage()
		}
		tmp0, err330 := (strconv.Atoi(flag.Arg(1)))
		if err330 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg332 := flag.Arg(3)
		mbTrans333 := thrift.NewTMemoryBufferLen(len(arg332))
		defer mbTrans333.Close()
		_, err334 := mbTrans333.WriteString(arg332)
		if err334 != nil {
			Usage()
			return
		}
		factory335 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt336 := factory335.GetProtocol(mbTrans333)
		containerStruct2 := LineThrift.NewTalkServiceCancelGroupInvitationArgs()
		err337 := containerStruct2.ReadField3(jsProt336)
		if err337 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.ContactIds
		value2 := argvalue2
		fmt.Print(client.CancelGroupInvitation(value0, value1, value2))
		fmt.Print("\n")
		break
	case "changeVerificationMethod":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ChangeVerificationMethod requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := LineThrift.VerificationMethod(tmp1)
		value1 := argvalue1
		fmt.Print(client.ChangeVerificationMethod(value0, value1))
		fmt.Print("\n")
		break
	case "clearIdentityCredential":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "ClearIdentityCredential requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.ClearIdentityCredential())
		fmt.Print("\n")
		break
	case "clearMessageBox":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ClearMessageBox requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.ClearMessageBox(value0, value1))
		fmt.Print("\n")
		break
	case "closeProximityMatch":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CloseProximityMatch requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.CloseProximityMatch(value0))
		fmt.Print("\n")
		break
	case "confirmEmail":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ConfirmEmail requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.ConfirmEmail(value0, value1))
		fmt.Print("\n")
		break
	case "createAccountMigrationPincodeSession":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "CreateAccountMigrationPincodeSession requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.CreateAccountMigrationPincodeSession())
		fmt.Print("\n")
		break
	case "createGroup":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "CreateGroup requires 3 args")
			flag.Usage()
		}
		tmp0, err344 := (strconv.Atoi(flag.Arg(1)))
		if err344 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg346 := flag.Arg(3)
		mbTrans347 := thrift.NewTMemoryBufferLen(len(arg346))
		defer mbTrans347.Close()
		_, err348 := mbTrans347.WriteString(arg346)
		if err348 != nil {
			Usage()
			return
		}
		factory349 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt350 := factory349.GetProtocol(mbTrans347)
		containerStruct2 := LineThrift.NewTalkServiceCreateGroupArgs()
		err351 := containerStruct2.ReadField3(jsProt350)
		if err351 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.ContactIds
		value2 := argvalue2
		fmt.Print(client.CreateGroup(value0, value1, value2))
		fmt.Print("\n")
		break
	case "createQrcodeBase64Image":
		if flag.NArg()-1 != 7 {
			fmt.Fprintln(os.Stderr, "CreateQrcodeBase64Image requires 7 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err354 := (strconv.Atoi(flag.Arg(3)))
		if err354 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		tmp3, err355 := (strconv.Atoi(flag.Arg(4)))
		if err355 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		tmp4, err356 := (strconv.Atoi(flag.Arg(5)))
		if err356 != nil {
			Usage()
			return
		}
		argvalue4 := int32(tmp4)
		value4 := argvalue4
		tmp5, err357 := (strconv.Atoi(flag.Arg(6)))
		if err357 != nil {
			Usage()
			return
		}
		argvalue5 := int32(tmp5)
		value5 := argvalue5
		tmp6, err358 := (strconv.Atoi(flag.Arg(7)))
		if err358 != nil {
			Usage()
			return
		}
		argvalue6 := int32(tmp6)
		value6 := argvalue6
		fmt.Print(client.CreateQrcodeBase64Image(value0, value1, value2, value3, value4, value5, value6))
		fmt.Print("\n")
		break
	case "createRoom":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateRoom requires 2 args")
			flag.Usage()
		}
		tmp0, err359 := (strconv.Atoi(flag.Arg(1)))
		if err359 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg360 := flag.Arg(2)
		mbTrans361 := thrift.NewTMemoryBufferLen(len(arg360))
		defer mbTrans361.Close()
		_, err362 := mbTrans361.WriteString(arg360)
		if err362 != nil {
			Usage()
			return
		}
		factory363 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt364 := factory363.GetProtocol(mbTrans361)
		containerStruct1 := LineThrift.NewTalkServiceCreateRoomArgs()
		err365 := containerStruct1.ReadField2(jsProt364)
		if err365 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.ContactIds
		value1 := argvalue1
		fmt.Print(client.CreateRoom(value0, value1))
		fmt.Print("\n")
		break
	case "disableNearby":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "DisableNearby requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.DisableNearby())
		fmt.Print("\n")
		break
	case "fetchOperations":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "FetchOperations requires 2 args")
			flag.Usage()
		}
		argvalue0, err366 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err366 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err367 := (strconv.Atoi(flag.Arg(2)))
		if err367 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.FetchOperations(value0, value1))
		fmt.Print("\n")
		break
	case "fetchOps":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "FetchOps requires 4 args")
			flag.Usage()
		}
		argvalue0, err368 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err368 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err369 := (strconv.Atoi(flag.Arg(2)))
		if err369 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		argvalue2, err370 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err370 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		argvalue3, err371 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err371 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.FetchOps(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "findContactsByEmail":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FindContactsByEmail requires 1 args")
			flag.Usage()
		}
		arg372 := flag.Arg(1)
		mbTrans373 := thrift.NewTMemoryBufferLen(len(arg372))
		defer mbTrans373.Close()
		_, err374 := mbTrans373.WriteString(arg372)
		if err374 != nil {
			Usage()
			return
		}
		factory375 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt376 := factory375.GetProtocol(mbTrans373)
		containerStruct0 := LineThrift.NewTalkServiceFindContactsByEmailArgs()
		err377 := containerStruct0.ReadField1(jsProt376)
		if err377 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Emails
		value0 := argvalue0
		fmt.Print(client.FindContactsByEmail(value0))
		fmt.Print("\n")
		break
	case "findContactsByPhone":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FindContactsByPhone requires 1 args")
			flag.Usage()
		}
		arg378 := flag.Arg(1)
		mbTrans379 := thrift.NewTMemoryBufferLen(len(arg378))
		defer mbTrans379.Close()
		_, err380 := mbTrans379.WriteString(arg378)
		if err380 != nil {
			Usage()
			return
		}
		factory381 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt382 := factory381.GetProtocol(mbTrans379)
		containerStruct0 := LineThrift.NewTalkServiceFindContactsByPhoneArgs()
		err383 := containerStruct0.ReadField1(jsProt382)
		if err383 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Phones
		value0 := argvalue0
		fmt.Print(client.FindContactsByPhone(value0))
		fmt.Print("\n")
		break
	case "findAndAddContactsByEmail":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "FindAndAddContactsByEmail requires 2 args")
			flag.Usage()
		}
		tmp0, err384 := (strconv.Atoi(flag.Arg(1)))
		if err384 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg385 := flag.Arg(2)
		mbTrans386 := thrift.NewTMemoryBufferLen(len(arg385))
		defer mbTrans386.Close()
		_, err387 := mbTrans386.WriteString(arg385)
		if err387 != nil {
			Usage()
			return
		}
		factory388 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt389 := factory388.GetProtocol(mbTrans386)
		containerStruct1 := LineThrift.NewTalkServiceFindAndAddContactsByEmailArgs()
		err390 := containerStruct1.ReadField2(jsProt389)
		if err390 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Emails
		value1 := argvalue1
		fmt.Print(client.FindAndAddContactsByEmail(value0, value1))
		fmt.Print("\n")
		break
	case "findAndAddContactsByMid":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "FindAndAddContactsByMid requires 2 args")
			flag.Usage()
		}
		tmp0, err391 := (strconv.Atoi(flag.Arg(1)))
		if err391 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.FindAndAddContactsByMid(value0, value1))
		fmt.Print("\n")
		break
	case "findAndAddContactsByPhone":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "FindAndAddContactsByPhone requires 2 args")
			flag.Usage()
		}
		tmp0, err393 := (strconv.Atoi(flag.Arg(1)))
		if err393 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg394 := flag.Arg(2)
		mbTrans395 := thrift.NewTMemoryBufferLen(len(arg394))
		defer mbTrans395.Close()
		_, err396 := mbTrans395.WriteString(arg394)
		if err396 != nil {
			Usage()
			return
		}
		factory397 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt398 := factory397.GetProtocol(mbTrans395)
		containerStruct1 := LineThrift.NewTalkServiceFindAndAddContactsByPhoneArgs()
		err399 := containerStruct1.ReadField2(jsProt398)
		if err399 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Phones
		value1 := argvalue1
		fmt.Print(client.FindAndAddContactsByPhone(value0, value1))
		fmt.Print("\n")
		break
	case "findAndAddContactsByUserid":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "FindAndAddContactsByUserid requires 2 args")
			flag.Usage()
		}
		tmp0, err400 := (strconv.Atoi(flag.Arg(1)))
		if err400 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.FindAndAddContactsByUserid(value0, value1))
		fmt.Print("\n")
		break
	case "findContactByMetaTag":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "FindContactByMetaTag requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.FindContactByMetaTag(value0, value1))
		fmt.Print("\n")
		break
	case "findContactByUserTicket":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FindContactByUserTicket requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.FindContactByUserTicket(value0))
		fmt.Print("\n")
		break
	case "findGroupByTicket":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FindGroupByTicket requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.FindGroupByTicket(value0))
		fmt.Print("\n")
		break
	case "finishUpdateVerification":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FinishUpdateVerification requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.FinishUpdateVerification(value0))
		fmt.Print("\n")
		break
	case "generateUserTicket":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GenerateUserTicket requires 2 args")
			flag.Usage()
		}
		argvalue0, err407 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err407 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err408 := (strconv.Atoi(flag.Arg(2)))
		if err408 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.GenerateUserTicket(value0, value1))
		fmt.Print("\n")
		break
	case "getAcceptedProximityMatches":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAcceptedProximityMatches requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetAcceptedProximityMatches(value0))
		fmt.Print("\n")
		break
	case "getAllContactIds":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllContactIds requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllContactIds())
		fmt.Print("\n")
		break
	case "getAnalyticsInfo":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAnalyticsInfo requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAnalyticsInfo())
		fmt.Print("\n")
		break
	case "getAuthQrcode":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetAuthQrcode requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1) == "true"
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetAuthQrcode(value0, value1))
		fmt.Print("\n")
		break
	case "getBlockedContactIds":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetBlockedContactIds requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetBlockedContactIds())
		fmt.Print("\n")
		break
	case "getBlockedContactIdsByRange":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetBlockedContactIdsByRange requires 2 args")
			flag.Usage()
		}
		tmp0, err412 := (strconv.Atoi(flag.Arg(1)))
		if err412 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err413 := (strconv.Atoi(flag.Arg(2)))
		if err413 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetBlockedContactIdsByRange(value0, value1))
		fmt.Print("\n")
		break
	case "getBlockedRecommendationIds":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetBlockedRecommendationIds requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetBlockedRecommendationIds())
		fmt.Print("\n")
		break
	case "getCompactGroup":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCompactGroup requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetCompactGroup(value0))
		fmt.Print("\n")
		break
	case "getConfigurations":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetConfigurations requires 5 args")
			flag.Usage()
		}
		argvalue0, err415 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err415 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		fmt.Print(client.GetConfigurations(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "getContact":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetContact requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetContact(value0))
		fmt.Print("\n")
		break
	case "getContactRegistration":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetContactRegistration requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := LineThrift.ContactType(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetContactRegistration(value0, value1))
		fmt.Print("\n")
		break
	case "getContacts":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetContacts requires 1 args")
			flag.Usage()
		}
		arg422 := flag.Arg(1)
		mbTrans423 := thrift.NewTMemoryBufferLen(len(arg422))
		defer mbTrans423.Close()
		_, err424 := mbTrans423.WriteString(arg422)
		if err424 != nil {
			Usage()
			return
		}
		factory425 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt426 := factory425.GetProtocol(mbTrans423)
		containerStruct0 := LineThrift.NewTalkServiceGetContactsArgs()
		err427 := containerStruct0.ReadField1(jsProt426)
		if err427 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Ids
		value0 := argvalue0
		fmt.Print(client.GetContacts(value0))
		fmt.Print("\n")
		break
	case "getCountryWithRequestIp":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetCountryWithRequestIp requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetCountryWithRequestIp())
		fmt.Print("\n")
		break
	case "getFavoriteMids":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetFavoriteMids requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetFavoriteMids())
		fmt.Print("\n")
		break
	case "getFriendRequests":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetFriendRequests requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetFriendRequests())
		fmt.Print("\n")
		break
	case "getExtendedProfile":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetExtendedProfile requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetExtendedProfile())
		fmt.Print("\n")
		break
	case "getRecentFriendRequests":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetRecentFriendRequests requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetRecentFriendRequests())
		fmt.Print("\n")
		break
	case "getGroup":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetGroup requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetGroup(value0))
		fmt.Print("\n")
		break
	case "getGroupIdsInvited":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetGroupIdsInvited requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetGroupIdsInvited())
		fmt.Print("\n")
		break
	case "getGroupIdsJoined":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetGroupIdsJoined requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetGroupIdsJoined())
		fmt.Print("\n")
		break
	case "getGroups":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetGroups requires 1 args")
			flag.Usage()
		}
		arg429 := flag.Arg(1)
		mbTrans430 := thrift.NewTMemoryBufferLen(len(arg429))
		defer mbTrans430.Close()
		_, err431 := mbTrans430.WriteString(arg429)
		if err431 != nil {
			Usage()
			return
		}
		factory432 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt433 := factory432.GetProtocol(mbTrans430)
		containerStruct0 := LineThrift.NewTalkServiceGetGroupsArgs()
		err434 := containerStruct0.ReadField1(jsProt433)
		if err434 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.GroupIds
		value0 := argvalue0
		fmt.Print(client.GetGroups(value0))
		fmt.Print("\n")
		break
	case "getGroupWithoutMembers":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetGroupWithoutMembers requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetGroupWithoutMembers(value0))
		fmt.Print("\n")
		break
	case "getLastOpRevision":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetLastOpRevision requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetLastOpRevision())
		fmt.Print("\n")
		break
	case "getProfile":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetProfile requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetProfile())
		fmt.Print("\n")
		break
	case "getProximityMatchCandidateList":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetProximityMatchCandidateList requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetProximityMatchCandidateList(value0))
		fmt.Print("\n")
		break
	case "getRSAKeyInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetRSAKeyInfo requires 1 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := LineThrift.IdentityProvider(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetRSAKeyInfo(value0))
		fmt.Print("\n")
		break
	case "getRingbackTone":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetRingbackTone requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetRingbackTone())
		fmt.Print("\n")
		break
	case "getRoom":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetRoom requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetRoom(value0))
		fmt.Print("\n")
		break
	case "getServerTime":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetServerTime requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetServerTime())
		fmt.Print("\n")
		break
	case "getSessions":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetSessions requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetSessions())
		fmt.Print("\n")
		break
	case "getSettings":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetSettings requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetSettings())
		fmt.Print("\n")
		break
	case "getSettingsAttributes":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSettingsAttributes requires 1 args")
			flag.Usage()
		}
		tmp0, err438 := (strconv.Atoi(flag.Arg(1)))
		if err438 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetSettingsAttributes(value0))
		fmt.Print("\n")
		break
	case "getSettingsAttributes2":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSettingsAttributes2 requires 1 args")
			flag.Usage()
		}
		tmp0, err439 := (strconv.Atoi(flag.Arg(1)))
		if err439 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetSettingsAttributes2(value0))
		fmt.Print("\n")
		break
	case "inviteIntoGroup":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "InviteIntoGroup requires 3 args")
			flag.Usage()
		}
		tmp0, err440 := (strconv.Atoi(flag.Arg(1)))
		if err440 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg442 := flag.Arg(3)
		mbTrans443 := thrift.NewTMemoryBufferLen(len(arg442))
		defer mbTrans443.Close()
		_, err444 := mbTrans443.WriteString(arg442)
		if err444 != nil {
			Usage()
			return
		}
		factory445 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt446 := factory445.GetProtocol(mbTrans443)
		containerStruct2 := LineThrift.NewTalkServiceInviteIntoGroupArgs()
		err447 := containerStruct2.ReadField3(jsProt446)
		if err447 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.ContactIds
		value2 := argvalue2
		fmt.Print(client.InviteIntoGroup(value0, value1, value2))
		fmt.Print("\n")
		break
	case "inviteIntoRoom":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "InviteIntoRoom requires 3 args")
			flag.Usage()
		}
		tmp0, err448 := (strconv.Atoi(flag.Arg(1)))
		if err448 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg450 := flag.Arg(3)
		mbTrans451 := thrift.NewTMemoryBufferLen(len(arg450))
		defer mbTrans451.Close()
		_, err452 := mbTrans451.WriteString(arg450)
		if err452 != nil {
			Usage()
			return
		}
		factory453 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt454 := factory453.GetProtocol(mbTrans451)
		containerStruct2 := LineThrift.NewTalkServiceInviteIntoRoomArgs()
		err455 := containerStruct2.ReadField3(jsProt454)
		if err455 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.ContactIds
		value2 := argvalue2
		fmt.Print(client.InviteIntoRoom(value0, value1, value2))
		fmt.Print("\n")
		break
	case "isUseridAvailable":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "IsUseridAvailable requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.IsUseridAvailable(value0))
		fmt.Print("\n")
		break
	case "kickoutFromGroup":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "KickoutFromGroup requires 3 args")
			flag.Usage()
		}
		tmp0, err457 := (strconv.Atoi(flag.Arg(1)))
		if err457 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg459 := flag.Arg(3)
		mbTrans460 := thrift.NewTMemoryBufferLen(len(arg459))
		defer mbTrans460.Close()
		_, err461 := mbTrans460.WriteString(arg459)
		if err461 != nil {
			Usage()
			return
		}
		factory462 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt463 := factory462.GetProtocol(mbTrans460)
		containerStruct2 := LineThrift.NewTalkServiceKickoutFromGroupArgs()
		err464 := containerStruct2.ReadField3(jsProt463)
		if err464 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.ContactIds
		value2 := argvalue2
		fmt.Print(client.KickoutFromGroup(value0, value1, value2))
		fmt.Print("\n")
		break
	case "leaveGroup":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "LeaveGroup requires 2 args")
			flag.Usage()
		}
		tmp0, err465 := (strconv.Atoi(flag.Arg(1)))
		if err465 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.LeaveGroup(value0, value1))
		fmt.Print("\n")
		break
	case "leaveRoom":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "LeaveRoom requires 2 args")
			flag.Usage()
		}
		tmp0, err467 := (strconv.Atoi(flag.Arg(1)))
		if err467 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.LeaveRoom(value0, value1))
		fmt.Print("\n")
		break
	case "loginWithIdentityCredential":
		if flag.NArg()-1 != 7 {
			fmt.Fprintln(os.Stderr, "LoginWithIdentityCredential requires 7 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := LineThrift.IdentityProvider(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		argvalue5 := flag.Arg(6)
		value5 := argvalue5
		argvalue6 := flag.Arg(7)
		value6 := argvalue6
		fmt.Print(client.LoginWithIdentityCredential(value0, value1, value2, value3, value4, value5, value6))
		fmt.Print("\n")
		break
	case "loginWithIdentityCredentialForCertificate":
		if flag.NArg()-1 != 7 {
			fmt.Fprintln(os.Stderr, "LoginWithIdentityCredentialForCertificate requires 7 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := LineThrift.IdentityProvider(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		argvalue5 := flag.Arg(6)
		value5 := argvalue5
		argvalue6 := flag.Arg(7)
		value6 := argvalue6
		fmt.Print(client.LoginWithIdentityCredentialForCertificate(value0, value1, value2, value3, value4, value5, value6))
		fmt.Print("\n")
		break
	case "loginWithVerifier":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "LoginWithVerifier requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.LoginWithVerifier(value0))
		fmt.Print("\n")
		break
	case "loginWithVerifierForCerificate":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "LoginWithVerifierForCerificate requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.LoginWithVerifierForCerificate(value0))
		fmt.Print("\n")
		break
	case "loginWithVerifierForCertificate":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "LoginWithVerifierForCertificate requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.LoginWithVerifierForCertificate(value0))
		fmt.Print("\n")
		break
	case "logout":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Logout requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Logout())
		fmt.Print("\n")
		break
	case "logoutSession":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "LogoutSession requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.LogoutSession(value0))
		fmt.Print("\n")
		break
	case "noop":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Noop requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Noop())
		fmt.Print("\n")
		break
	case "registerUserid":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RegisterUserid requires 2 args")
			flag.Usage()
		}
		tmp0, err485 := (strconv.Atoi(flag.Arg(1)))
		if err485 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.RegisterUserid(value0, value1))
		fmt.Print("\n")
		break
	case "reissueUserTicket":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ReissueUserTicket requires 2 args")
			flag.Usage()
		}
		argvalue0, err487 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err487 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err488 := (strconv.Atoi(flag.Arg(2)))
		if err488 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.ReissueUserTicket(value0, value1))
		fmt.Print("\n")
		break
	case "reissueGroupTicket":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ReissueGroupTicket requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ReissueGroupTicket(value0))
		fmt.Print("\n")
		break
	case "rejectGroupInvitation":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RejectGroupInvitation requires 2 args")
			flag.Usage()
		}
		tmp0, err490 := (strconv.Atoi(flag.Arg(1)))
		if err490 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.RejectGroupInvitation(value0, value1))
		fmt.Print("\n")
		break
	case "releaseSession":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "ReleaseSession requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.ReleaseSession())
		fmt.Print("\n")
		break
	case "removeAllMessages":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RemoveAllMessages requires 2 args")
			flag.Usage()
		}
		tmp0, err492 := (strconv.Atoi(flag.Arg(1)))
		if err492 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.RemoveAllMessages(value0, value1))
		fmt.Print("\n")
		break
	case "removeFriendRequest":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RemoveFriendRequest requires 2 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := LineThrift.DirectionType(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.RemoveFriendRequest(value0, value1))
		fmt.Print("\n")
		break
	case "sendChatChecked":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "SendChatChecked requires 4 args")
			flag.Usage()
		}
		tmp0, err495 := (strconv.Atoi(flag.Arg(1)))
		if err495 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3, err498 := (strconv.ParseFloat(flag.Arg(4), 64))
		if err498 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.SendChatChecked(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "sendChatRemoved":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "SendChatRemoved requires 4 args")
			flag.Usage()
		}
		tmp0, err499 := (strconv.Atoi(flag.Arg(1)))
		if err499 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3, err502 := (strconv.ParseFloat(flag.Arg(4), 64))
		if err502 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.SendChatRemoved(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "sendContentReceipt":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "SendContentReceipt requires 3 args")
			flag.Usage()
		}
		tmp0, err503 := (strconv.Atoi(flag.Arg(1)))
		if err503 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.SendContentReceipt(value0, value1, value2))
		fmt.Print("\n")
		break
	case "sendEchoPush":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SendEchoPush requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.SendEchoPush(value0))
		fmt.Print("\n")
		break
	case "sendMessage":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SendMessage requires 2 args")
			flag.Usage()
		}
		tmp0, err507 := (strconv.Atoi(flag.Arg(1)))
		if err507 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg508 := flag.Arg(2)
		mbTrans509 := thrift.NewTMemoryBufferLen(len(arg508))
		defer mbTrans509.Close()
		_, err510 := mbTrans509.WriteString(arg508)
		if err510 != nil {
			Usage()
			return
		}
		factory511 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt512 := factory511.GetProtocol(mbTrans509)
		argvalue1 := LineThrift.NewMessage()
		err513 := argvalue1.Read(jsProt512)
		if err513 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.SendMessage(value0, value1))
		fmt.Print("\n")
		break
	case "sendMessageToMyHome":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "SendMessageToMyHome requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.SendMessageToMyHome())
		fmt.Print("\n")
		break
	case "sendPostback":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SendPostback requires 1 args")
			flag.Usage()
		}
		arg514 := flag.Arg(1)
		mbTrans515 := thrift.NewTMemoryBufferLen(len(arg514))
		defer mbTrans515.Close()
		_, err516 := mbTrans515.WriteString(arg514)
		if err516 != nil {
			Usage()
			return
		}
		factory517 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt518 := factory517.GetProtocol(mbTrans515)
		argvalue0 := LineThrift.NewSendPostbackRequest()
		err519 := argvalue0.Read(jsProt518)
		if err519 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SendPostback(value0))
		fmt.Print("\n")
		break
	case "unblockContact":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UnblockContact requires 2 args")
			flag.Usage()
		}
		tmp0, err520 := (strconv.Atoi(flag.Arg(1)))
		if err520 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.UnblockContact(value0, value1))
		fmt.Print("\n")
		break
	case "unblockRecommendation":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UnblockRecommendation requires 2 args")
			flag.Usage()
		}
		tmp0, err522 := (strconv.Atoi(flag.Arg(1)))
		if err522 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.UnblockRecommendation(value0, value1))
		fmt.Print("\n")
		break
	case "updateContactSetting":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "UpdateContactSetting requires 4 args")
			flag.Usage()
		}
		tmp0, err524 := (strconv.Atoi(flag.Arg(1)))
		if err524 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := LineThrift.ContactSetting(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.UpdateContactSetting(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "updateExtendedProfileAttribute":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "UpdateExtendedProfileAttribute requires 3 args")
			flag.Usage()
		}
		tmp0, err527 := (strconv.Atoi(flag.Arg(1)))
		if err527 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := LineThrift.ExtendAttr(tmp1)
		value1 := argvalue1
		arg528 := flag.Arg(3)
		mbTrans529 := thrift.NewTMemoryBufferLen(len(arg528))
		defer mbTrans529.Close()
		_, err530 := mbTrans529.WriteString(arg528)
		if err530 != nil {
			Usage()
			return
		}
		factory531 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt532 := factory531.GetProtocol(mbTrans529)
		argvalue2 := LineThrift.NewExtendedProfile()
		err533 := argvalue2.Read(jsProt532)
		if err533 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.UpdateExtendedProfileAttribute(value0, value1, value2))
		fmt.Print("\n")
		break
	case "updateGroup":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateGroup requires 2 args")
			flag.Usage()
		}
		tmp0, err534 := (strconv.Atoi(flag.Arg(1)))
		if err534 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg535 := flag.Arg(2)
		mbTrans536 := thrift.NewTMemoryBufferLen(len(arg535))
		defer mbTrans536.Close()
		_, err537 := mbTrans536.WriteString(arg535)
		if err537 != nil {
			Usage()
			return
		}
		factory538 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt539 := factory538.GetProtocol(mbTrans536)
		argvalue1 := LineThrift.NewGroup()
		err540 := argvalue1.Read(jsProt539)
		if err540 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateGroup(value0, value1))
		fmt.Print("\n")
		break
	case "updateGroupPreferenceAttribute":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "UpdateGroupPreferenceAttribute requires 3 args")
			flag.Usage()
		}
		tmp0, err541 := (strconv.Atoi(flag.Arg(1)))
		if err541 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg543 := flag.Arg(3)
		mbTrans544 := thrift.NewTMemoryBufferLen(len(arg543))
		defer mbTrans544.Close()
		_, err545 := mbTrans544.WriteString(arg543)
		if err545 != nil {
			Usage()
			return
		}
		factory546 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt547 := factory546.GetProtocol(mbTrans544)
		containerStruct2 := LineThrift.NewTalkServiceUpdateGroupPreferenceAttributeArgs()
		err548 := containerStruct2.ReadField3(jsProt547)
		if err548 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.UpdatedAttrs
		value2 := argvalue2
		fmt.Print(client.UpdateGroupPreferenceAttribute(value0, value1, value2))
		fmt.Print("\n")
		break
	case "updateNotificationToken":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateNotificationToken requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := LineThrift.NotificationType(tmp1)
		value1 := argvalue1
		fmt.Print(client.UpdateNotificationToken(value0, value1))
		fmt.Print("\n")
		break
	case "updateProfile":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateProfile requires 2 args")
			flag.Usage()
		}
		tmp0, err550 := (strconv.Atoi(flag.Arg(1)))
		if err550 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg551 := flag.Arg(2)
		mbTrans552 := thrift.NewTMemoryBufferLen(len(arg551))
		defer mbTrans552.Close()
		_, err553 := mbTrans552.WriteString(arg551)
		if err553 != nil {
			Usage()
			return
		}
		factory554 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt555 := factory554.GetProtocol(mbTrans552)
		argvalue1 := LineThrift.NewProfile()
		err556 := argvalue1.Read(jsProt555)
		if err556 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateProfile(value0, value1))
		fmt.Print("\n")
		break
	case "updateProfileAttribute":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "UpdateProfileAttribute requires 3 args")
			flag.Usage()
		}
		tmp0, err557 := (strconv.Atoi(flag.Arg(1)))
		if err557 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := LineThrift.ProfileAttribute(tmp1)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.UpdateProfileAttribute(value0, value1, value2))
		fmt.Print("\n")
		break
	case "updateSettings":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateSettings requires 2 args")
			flag.Usage()
		}
		tmp0, err559 := (strconv.Atoi(flag.Arg(1)))
		if err559 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg560 := flag.Arg(2)
		mbTrans561 := thrift.NewTMemoryBufferLen(len(arg560))
		defer mbTrans561.Close()
		_, err562 := mbTrans561.WriteString(arg560)
		if err562 != nil {
			Usage()
			return
		}
		factory563 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt564 := factory563.GetProtocol(mbTrans561)
		argvalue1 := LineThrift.NewSettings()
		err565 := argvalue1.Read(jsProt564)
		if err565 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateSettings(value0, value1))
		fmt.Print("\n")
		break
	case "updateSettings2":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateSettings2 requires 2 args")
			flag.Usage()
		}
		tmp0, err566 := (strconv.Atoi(flag.Arg(1)))
		if err566 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg567 := flag.Arg(2)
		mbTrans568 := thrift.NewTMemoryBufferLen(len(arg567))
		defer mbTrans568.Close()
		_, err569 := mbTrans568.WriteString(arg567)
		if err569 != nil {
			Usage()
			return
		}
		factory570 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt571 := factory570.GetProtocol(mbTrans568)
		argvalue1 := LineThrift.NewSettings()
		err572 := argvalue1.Read(jsProt571)
		if err572 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateSettings2(value0, value1))
		fmt.Print("\n")
		break
	case "updateSettingsAttribute":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "UpdateSettingsAttribute requires 3 args")
			flag.Usage()
		}
		tmp0, err573 := (strconv.Atoi(flag.Arg(1)))
		if err573 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := LineThrift.SettingsAttribute(tmp1)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.UpdateSettingsAttribute(value0, value1, value2))
		fmt.Print("\n")
		break
	case "updateSettingsAttributes":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "UpdateSettingsAttributes requires 3 args")
			flag.Usage()
		}
		tmp0, err575 := (strconv.Atoi(flag.Arg(1)))
		if err575 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err576 := (strconv.Atoi(flag.Arg(2)))
		if err576 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		arg577 := flag.Arg(3)
		mbTrans578 := thrift.NewTMemoryBufferLen(len(arg577))
		defer mbTrans578.Close()
		_, err579 := mbTrans578.WriteString(arg577)
		if err579 != nil {
			Usage()
			return
		}
		factory580 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt581 := factory580.GetProtocol(mbTrans578)
		argvalue2 := LineThrift.NewSettings()
		err582 := argvalue2.Read(jsProt581)
		if err582 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.UpdateSettingsAttributes(value0, value1, value2))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
