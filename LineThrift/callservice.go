// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package LineThrift

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type CallService interface {
	// Parameters:
	//  - To
	AcquireCallRoute(to string) (r []string, err error)
	// Parameters:
	//  - GroupId
	//  - MediaType
	AcquireGroupCallRoute(groupId string, mediaType MediaType) (r *GroupCallRoute, err error)
	AcquireTestCallRoute() (r *TestCallRoute, err error)
	// Parameters:
	//  - GroupId
	//  - ContactIds
	//  - MediaType
	InviteIntoGroupCall(groupId string, contactIds []string, mediaType MediaType) (err error)
	// Parameters:
	//  - ChatMid
	GetGroupCall(chatMid string) (r *GroupCall, err error)
}

type CallServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewCallServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CallServiceClient {
	return &CallServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewCallServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CallServiceClient {
	return &CallServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - To
func (p *CallServiceClient) AcquireCallRoute(to string) (r []string, err error) {
	if err = p.sendAcquireCallRoute(to); err != nil {
		return
	}
	return p.recvAcquireCallRoute()
}

func (p *CallServiceClient) sendAcquireCallRoute(to string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("acquireCallRoute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CallServiceAcquireCallRouteArgs{
		To: to,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *CallServiceClient) recvAcquireCallRoute() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "acquireCallRoute" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "acquireCallRoute failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "acquireCallRoute failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error669 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error670 error
		error670, err = error669.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error670
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "acquireCallRoute failed: invalid message type")
		return
	}
	result := CallServiceAcquireCallRouteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GroupId
//  - MediaType
func (p *CallServiceClient) AcquireGroupCallRoute(groupId string, mediaType MediaType) (r *GroupCallRoute, err error) {
	if err = p.sendAcquireGroupCallRoute(groupId, mediaType); err != nil {
		return
	}
	return p.recvAcquireGroupCallRoute()
}

func (p *CallServiceClient) sendAcquireGroupCallRoute(groupId string, mediaType MediaType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("acquireGroupCallRoute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CallServiceAcquireGroupCallRouteArgs{
		GroupId:   groupId,
		MediaType: mediaType,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *CallServiceClient) recvAcquireGroupCallRoute() (value *GroupCallRoute, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "acquireGroupCallRoute" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "acquireGroupCallRoute failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "acquireGroupCallRoute failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error671 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error672 error
		error672, err = error671.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error672
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "acquireGroupCallRoute failed: invalid message type")
		return
	}
	result := CallServiceAcquireGroupCallRouteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *CallServiceClient) AcquireTestCallRoute() (r *TestCallRoute, err error) {
	if err = p.sendAcquireTestCallRoute(); err != nil {
		return
	}
	return p.recvAcquireTestCallRoute()
}

func (p *CallServiceClient) sendAcquireTestCallRoute() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("acquireTestCallRoute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CallServiceAcquireTestCallRouteArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *CallServiceClient) recvAcquireTestCallRoute() (value *TestCallRoute, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "acquireTestCallRoute" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "acquireTestCallRoute failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "acquireTestCallRoute failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error673 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error674 error
		error674, err = error673.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error674
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "acquireTestCallRoute failed: invalid message type")
		return
	}
	result := CallServiceAcquireTestCallRouteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GroupId
//  - ContactIds
//  - MediaType
func (p *CallServiceClient) InviteIntoGroupCall(groupId string, contactIds []string, mediaType MediaType) (err error) {
	if err = p.sendInviteIntoGroupCall(groupId, contactIds, mediaType); err != nil {
		return
	}
	return p.recvInviteIntoGroupCall()
}

func (p *CallServiceClient) sendInviteIntoGroupCall(groupId string, contactIds []string, mediaType MediaType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("inviteIntoGroupCall", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CallServiceInviteIntoGroupCallArgs{
		GroupId:    groupId,
		ContactIds: contactIds,
		MediaType:  mediaType,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *CallServiceClient) recvInviteIntoGroupCall() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "inviteIntoGroupCall" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "inviteIntoGroupCall failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "inviteIntoGroupCall failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error675 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error676 error
		error676, err = error675.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error676
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "inviteIntoGroupCall failed: invalid message type")
		return
	}
	result := CallServiceInviteIntoGroupCallResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ChatMid
func (p *CallServiceClient) GetGroupCall(chatMid string) (r *GroupCall, err error) {
	if err = p.sendGetGroupCall(chatMid); err != nil {
		return
	}
	return p.recvGetGroupCall()
}

func (p *CallServiceClient) sendGetGroupCall(chatMid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getGroupCall", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CallServiceGetGroupCallArgs{
		ChatMid: chatMid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *CallServiceClient) recvGetGroupCall() (value *GroupCall, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getGroupCall" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getGroupCall failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getGroupCall failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error677 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error678 error
		error678, err = error677.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error678
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getGroupCall failed: invalid message type")
		return
	}
	result := CallServiceGetGroupCallResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

type CallServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      CallService
}

func (p *CallServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CallServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CallServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCallServiceProcessor(handler CallService) *CallServiceProcessor {

	self679 := &CallServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self679.processorMap["acquireCallRoute"] = &callServiceProcessorAcquireCallRoute{handler: handler}
	self679.processorMap["acquireGroupCallRoute"] = &callServiceProcessorAcquireGroupCallRoute{handler: handler}
	self679.processorMap["acquireTestCallRoute"] = &callServiceProcessorAcquireTestCallRoute{handler: handler}
	self679.processorMap["inviteIntoGroupCall"] = &callServiceProcessorInviteIntoGroupCall{handler: handler}
	self679.processorMap["getGroupCall"] = &callServiceProcessorGetGroupCall{handler: handler}
	return self679
}

func (p *CallServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x680 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x680.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x680

}

type callServiceProcessorAcquireCallRoute struct {
	handler CallService
}

func (p *callServiceProcessorAcquireCallRoute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CallServiceAcquireCallRouteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("acquireCallRoute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CallServiceAcquireCallRouteResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.AcquireCallRoute(args.To); err2 != nil {
		switch v := err2.(type) {
		case *CallException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acquireCallRoute: "+err2.Error())
			oprot.WriteMessageBegin("acquireCallRoute", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("acquireCallRoute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type callServiceProcessorAcquireGroupCallRoute struct {
	handler CallService
}

func (p *callServiceProcessorAcquireGroupCallRoute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CallServiceAcquireGroupCallRouteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("acquireGroupCallRoute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CallServiceAcquireGroupCallRouteResult{}
	var retval *GroupCallRoute
	var err2 error
	if retval, err2 = p.handler.AcquireGroupCallRoute(args.GroupId, args.MediaType); err2 != nil {
		switch v := err2.(type) {
		case *CallException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acquireGroupCallRoute: "+err2.Error())
			oprot.WriteMessageBegin("acquireGroupCallRoute", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("acquireGroupCallRoute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type callServiceProcessorAcquireTestCallRoute struct {
	handler CallService
}

func (p *callServiceProcessorAcquireTestCallRoute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CallServiceAcquireTestCallRouteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("acquireTestCallRoute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CallServiceAcquireTestCallRouteResult{}
	var retval *TestCallRoute
	var err2 error
	if retval, err2 = p.handler.AcquireTestCallRoute(); err2 != nil {
		switch v := err2.(type) {
		case *CallException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acquireTestCallRoute: "+err2.Error())
			oprot.WriteMessageBegin("acquireTestCallRoute", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("acquireTestCallRoute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type callServiceProcessorInviteIntoGroupCall struct {
	handler CallService
}

func (p *callServiceProcessorInviteIntoGroupCall) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CallServiceInviteIntoGroupCallArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("inviteIntoGroupCall", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CallServiceInviteIntoGroupCallResult{}
	var err2 error
	if err2 = p.handler.InviteIntoGroupCall(args.GroupId, args.ContactIds, args.MediaType); err2 != nil {
		switch v := err2.(type) {
		case *CallException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoGroupCall: "+err2.Error())
			oprot.WriteMessageBegin("inviteIntoGroupCall", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("inviteIntoGroupCall", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type callServiceProcessorGetGroupCall struct {
	handler CallService
}

func (p *callServiceProcessorGetGroupCall) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CallServiceGetGroupCallArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getGroupCall", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CallServiceGetGroupCallResult{}
	var retval *GroupCall
	var err2 error
	if retval, err2 = p.handler.GetGroupCall(args.ChatMid); err2 != nil {
		switch v := err2.(type) {
		case *CallException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupCall: "+err2.Error())
			oprot.WriteMessageBegin("getGroupCall", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getGroupCall", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - To
type CallServiceAcquireCallRouteArgs struct {
	// unused field # 1
	To string `thrift:"to,2" json:"to"`
}

func NewCallServiceAcquireCallRouteArgs() *CallServiceAcquireCallRouteArgs {
	return &CallServiceAcquireCallRouteArgs{}
}

func (p *CallServiceAcquireCallRouteArgs) GetTo() string {
	return p.To
}
func (p *CallServiceAcquireCallRouteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CallServiceAcquireCallRouteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.To = v
	}
	return nil
}

func (p *CallServiceAcquireCallRouteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireCallRoute_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CallServiceAcquireCallRouteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("to", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:to: ", p), err)
	}
	if err := oprot.WriteString(string(p.To)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.to (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:to: ", p), err)
	}
	return err
}

func (p *CallServiceAcquireCallRouteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CallServiceAcquireCallRouteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type CallServiceAcquireCallRouteResult struct {
	Success []string       `thrift:"success,0" json:"success,omitempty"`
	E       *CallException `thrift:"e,1" json:"e,omitempty"`
}

func NewCallServiceAcquireCallRouteResult() *CallServiceAcquireCallRouteResult {
	return &CallServiceAcquireCallRouteResult{}
}

var CallServiceAcquireCallRouteResult_Success_DEFAULT []string

func (p *CallServiceAcquireCallRouteResult) GetSuccess() []string {
	return p.Success
}

var CallServiceAcquireCallRouteResult_E_DEFAULT *CallException

func (p *CallServiceAcquireCallRouteResult) GetE() *CallException {
	if !p.IsSetE() {
		return CallServiceAcquireCallRouteResult_E_DEFAULT
	}
	return p.E
}
func (p *CallServiceAcquireCallRouteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CallServiceAcquireCallRouteResult) IsSetE() bool {
	return p.E != nil
}

func (p *CallServiceAcquireCallRouteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CallServiceAcquireCallRouteResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem681 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem681 = v
		}
		p.Success = append(p.Success, _elem681)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *CallServiceAcquireCallRouteResult) readField1(iprot thrift.TProtocol) error {
	p.E = &CallException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *CallServiceAcquireCallRouteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireCallRoute_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CallServiceAcquireCallRouteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *CallServiceAcquireCallRouteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *CallServiceAcquireCallRouteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CallServiceAcquireCallRouteResult(%+v)", *p)
}

// Attributes:
//  - GroupId
//  - MediaType
type CallServiceAcquireGroupCallRouteArgs struct {
	// unused field # 1
	GroupId   string    `thrift:"groupId,2" json:"groupId"`
	MediaType MediaType `thrift:"mediaType,3" json:"mediaType"`
}

func NewCallServiceAcquireGroupCallRouteArgs() *CallServiceAcquireGroupCallRouteArgs {
	return &CallServiceAcquireGroupCallRouteArgs{}
}

func (p *CallServiceAcquireGroupCallRouteArgs) GetGroupId() string {
	return p.GroupId
}

func (p *CallServiceAcquireGroupCallRouteArgs) GetMediaType() MediaType {
	return p.MediaType
}
func (p *CallServiceAcquireGroupCallRouteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CallServiceAcquireGroupCallRouteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *CallServiceAcquireGroupCallRouteArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := MediaType(v)
		p.MediaType = temp
	}
	return nil
}

func (p *CallServiceAcquireGroupCallRouteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireGroupCallRoute_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CallServiceAcquireGroupCallRouteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *CallServiceAcquireGroupCallRouteArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mediaType", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mediaType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MediaType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mediaType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mediaType: ", p), err)
	}
	return err
}

func (p *CallServiceAcquireGroupCallRouteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CallServiceAcquireGroupCallRouteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type CallServiceAcquireGroupCallRouteResult struct {
	Success *GroupCallRoute `thrift:"success,0" json:"success,omitempty"`
	E       *CallException  `thrift:"e,1" json:"e,omitempty"`
}

func NewCallServiceAcquireGroupCallRouteResult() *CallServiceAcquireGroupCallRouteResult {
	return &CallServiceAcquireGroupCallRouteResult{}
}

var CallServiceAcquireGroupCallRouteResult_Success_DEFAULT *GroupCallRoute

func (p *CallServiceAcquireGroupCallRouteResult) GetSuccess() *GroupCallRoute {
	if !p.IsSetSuccess() {
		return CallServiceAcquireGroupCallRouteResult_Success_DEFAULT
	}
	return p.Success
}

var CallServiceAcquireGroupCallRouteResult_E_DEFAULT *CallException

func (p *CallServiceAcquireGroupCallRouteResult) GetE() *CallException {
	if !p.IsSetE() {
		return CallServiceAcquireGroupCallRouteResult_E_DEFAULT
	}
	return p.E
}
func (p *CallServiceAcquireGroupCallRouteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CallServiceAcquireGroupCallRouteResult) IsSetE() bool {
	return p.E != nil
}

func (p *CallServiceAcquireGroupCallRouteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CallServiceAcquireGroupCallRouteResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &GroupCallRoute{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *CallServiceAcquireGroupCallRouteResult) readField1(iprot thrift.TProtocol) error {
	p.E = &CallException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *CallServiceAcquireGroupCallRouteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireGroupCallRoute_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CallServiceAcquireGroupCallRouteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *CallServiceAcquireGroupCallRouteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *CallServiceAcquireGroupCallRouteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CallServiceAcquireGroupCallRouteResult(%+v)", *p)
}

type CallServiceAcquireTestCallRouteArgs struct {
}

func NewCallServiceAcquireTestCallRouteArgs() *CallServiceAcquireTestCallRouteArgs {
	return &CallServiceAcquireTestCallRouteArgs{}
}

func (p *CallServiceAcquireTestCallRouteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CallServiceAcquireTestCallRouteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireTestCallRoute_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CallServiceAcquireTestCallRouteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CallServiceAcquireTestCallRouteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type CallServiceAcquireTestCallRouteResult struct {
	Success *TestCallRoute `thrift:"success,0" json:"success,omitempty"`
	E       *CallException `thrift:"e,1" json:"e,omitempty"`
}

func NewCallServiceAcquireTestCallRouteResult() *CallServiceAcquireTestCallRouteResult {
	return &CallServiceAcquireTestCallRouteResult{}
}

var CallServiceAcquireTestCallRouteResult_Success_DEFAULT *TestCallRoute

func (p *CallServiceAcquireTestCallRouteResult) GetSuccess() *TestCallRoute {
	if !p.IsSetSuccess() {
		return CallServiceAcquireTestCallRouteResult_Success_DEFAULT
	}
	return p.Success
}

var CallServiceAcquireTestCallRouteResult_E_DEFAULT *CallException

func (p *CallServiceAcquireTestCallRouteResult) GetE() *CallException {
	if !p.IsSetE() {
		return CallServiceAcquireTestCallRouteResult_E_DEFAULT
	}
	return p.E
}
func (p *CallServiceAcquireTestCallRouteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CallServiceAcquireTestCallRouteResult) IsSetE() bool {
	return p.E != nil
}

func (p *CallServiceAcquireTestCallRouteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CallServiceAcquireTestCallRouteResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TestCallRoute{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *CallServiceAcquireTestCallRouteResult) readField1(iprot thrift.TProtocol) error {
	p.E = &CallException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *CallServiceAcquireTestCallRouteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireTestCallRoute_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CallServiceAcquireTestCallRouteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *CallServiceAcquireTestCallRouteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *CallServiceAcquireTestCallRouteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CallServiceAcquireTestCallRouteResult(%+v)", *p)
}

// Attributes:
//  - GroupId
//  - ContactIds
//  - MediaType
type CallServiceInviteIntoGroupCallArgs struct {
	// unused field # 1
	GroupId    string    `thrift:"groupId,2" json:"groupId"`
	ContactIds []string  `thrift:"contactIds,3" json:"contactIds"`
	MediaType  MediaType `thrift:"mediaType,4" json:"mediaType"`
}

func NewCallServiceInviteIntoGroupCallArgs() *CallServiceInviteIntoGroupCallArgs {
	return &CallServiceInviteIntoGroupCallArgs{}
}

func (p *CallServiceInviteIntoGroupCallArgs) GetGroupId() string {
	return p.GroupId
}

func (p *CallServiceInviteIntoGroupCallArgs) GetContactIds() []string {
	return p.ContactIds
}

func (p *CallServiceInviteIntoGroupCallArgs) GetMediaType() MediaType {
	return p.MediaType
}
func (p *CallServiceInviteIntoGroupCallArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CallServiceInviteIntoGroupCallArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *CallServiceInviteIntoGroupCallArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ContactIds = tSlice
	for i := 0; i < size; i++ {
		var _elem682 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem682 = v
		}
		p.ContactIds = append(p.ContactIds, _elem682)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *CallServiceInviteIntoGroupCallArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := MediaType(v)
		p.MediaType = temp
	}
	return nil
}

func (p *CallServiceInviteIntoGroupCallArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteIntoGroupCall_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CallServiceInviteIntoGroupCallArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *CallServiceInviteIntoGroupCallArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ContactIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err)
	}
	return err
}

func (p *CallServiceInviteIntoGroupCallArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mediaType", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mediaType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MediaType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mediaType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mediaType: ", p), err)
	}
	return err
}

func (p *CallServiceInviteIntoGroupCallArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CallServiceInviteIntoGroupCallArgs(%+v)", *p)
}

// Attributes:
//  - E
type CallServiceInviteIntoGroupCallResult struct {
	E *CallException `thrift:"e,1" json:"e,omitempty"`
}

func NewCallServiceInviteIntoGroupCallResult() *CallServiceInviteIntoGroupCallResult {
	return &CallServiceInviteIntoGroupCallResult{}
}

var CallServiceInviteIntoGroupCallResult_E_DEFAULT *CallException

func (p *CallServiceInviteIntoGroupCallResult) GetE() *CallException {
	if !p.IsSetE() {
		return CallServiceInviteIntoGroupCallResult_E_DEFAULT
	}
	return p.E
}
func (p *CallServiceInviteIntoGroupCallResult) IsSetE() bool {
	return p.E != nil
}

func (p *CallServiceInviteIntoGroupCallResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CallServiceInviteIntoGroupCallResult) readField1(iprot thrift.TProtocol) error {
	p.E = &CallException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *CallServiceInviteIntoGroupCallResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteIntoGroupCall_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CallServiceInviteIntoGroupCallResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *CallServiceInviteIntoGroupCallResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CallServiceInviteIntoGroupCallResult(%+v)", *p)
}

// Attributes:
//  - ChatMid
type CallServiceGetGroupCallArgs struct {
	// unused field # 1
	ChatMid string `thrift:"chatMid,2" json:"chatMid"`
}

func NewCallServiceGetGroupCallArgs() *CallServiceGetGroupCallArgs {
	return &CallServiceGetGroupCallArgs{}
}

func (p *CallServiceGetGroupCallArgs) GetChatMid() string {
	return p.ChatMid
}
func (p *CallServiceGetGroupCallArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CallServiceGetGroupCallArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *CallServiceGetGroupCallArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupCall_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CallServiceGetGroupCallArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *CallServiceGetGroupCallArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CallServiceGetGroupCallArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type CallServiceGetGroupCallResult struct {
	Success *GroupCall     `thrift:"success,0" json:"success,omitempty"`
	E       *CallException `thrift:"e,1" json:"e,omitempty"`
}

func NewCallServiceGetGroupCallResult() *CallServiceGetGroupCallResult {
	return &CallServiceGetGroupCallResult{}
}

var CallServiceGetGroupCallResult_Success_DEFAULT *GroupCall

func (p *CallServiceGetGroupCallResult) GetSuccess() *GroupCall {
	if !p.IsSetSuccess() {
		return CallServiceGetGroupCallResult_Success_DEFAULT
	}
	return p.Success
}

var CallServiceGetGroupCallResult_E_DEFAULT *CallException

func (p *CallServiceGetGroupCallResult) GetE() *CallException {
	if !p.IsSetE() {
		return CallServiceGetGroupCallResult_E_DEFAULT
	}
	return p.E
}
func (p *CallServiceGetGroupCallResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CallServiceGetGroupCallResult) IsSetE() bool {
	return p.E != nil
}

func (p *CallServiceGetGroupCallResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CallServiceGetGroupCallResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &GroupCall{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *CallServiceGetGroupCallResult) readField1(iprot thrift.TProtocol) error {
	p.E = &CallException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *CallServiceGetGroupCallResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupCall_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CallServiceGetGroupCallResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *CallServiceGetGroupCallResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *CallServiceGetGroupCallResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CallServiceGetGroupCallResult(%+v)", *p)
}
