// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package LineThrift

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type TalkService interface {
	// Parameters:
	//  - ReqSeq
	//  - GroupId
	AcceptGroupInvitation(reqSeq int32, groupId string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - GroupId
	//  - TicketId
	AcceptGroupInvitationByTicket(reqSeq int32, groupId string, ticketId string) (err error)
	// Parameters:
	//  - SessionId
	//  - Ids
	AcceptProximityMatches(sessionId string, ids map[string]bool) (err error)
	// Parameters:
	//  - To
	AcquireCallRoute(to string) (r []string, err error)
	// Parameters:
	//  - To
	AcquireCallTicket(to string) (r string, err error)
	// Parameters:
	//  - FeatureType
	AcquireEncryptedAccessToken(featureType FeatureType) (r string, err error)
	// Parameters:
	//  - ReqSeq
	//  - ID
	BlockContact(reqSeq int32, id string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - ID
	BlockRecommendation(reqSeq int32, id string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - GroupId
	//  - ContactIds
	CancelGroupInvitation(reqSeq int32, groupId string, contactIds []string) (err error)
	// Parameters:
	//  - SessionId
	//  - Method
	ChangeVerificationMethod(sessionId string, method VerificationMethod) (r *VerificationSessionData, err error)
	ClearIdentityCredential() (err error)
	// Parameters:
	//  - ChannelId
	//  - MessageBoxId
	ClearMessageBox(channelId string, messageBoxId string) (err error)
	// Parameters:
	//  - SessionId
	CloseProximityMatch(sessionId string) (err error)
	// Parameters:
	//  - Verifier
	//  - PinCode
	ConfirmEmail(verifier string, pinCode string) (err error)
	CreateAccountMigrationPincodeSession() (r []string, err error)
	// Parameters:
	//  - Seq
	//  - Name
	//  - ContactIds
	CreateGroup(seq int32, name string, contactIds []string) (r *Group, err error)
	// Parameters:
	//  - URL
	//  - CharacterSet
	//  - ImageSize
	//  - X
	//  - Y
	//  - Width
	//  - Height
	CreateQrcodeBase64Image(url string, characterSet string, imageSize int32, x int32, y int32, width int32, height int32) (r string, err error)
	// Parameters:
	//  - ReqSeq
	//  - ContactIds
	CreateRoom(reqSeq int32, contactIds []string) (r *Room, err error)
	DisableNearby() (err error)
	// Parameters:
	//  - LocalRev
	//  - Count
	FetchOperations(localRev int64, count int32) (r []*Operation, err error)
	// Parameters:
	//  - LocalRev
	//  - Count
	//  - GlobalRev
	//  - IndividualRev
	FetchOps(localRev int64, count int32, globalRev int64, individualRev int64) (r []*Operation, err error)
	// Parameters:
	//  - Emails
	FindContactsByEmail(emails map[string]bool) (r map[string]*Contact, err error)
	// Parameters:
	//  - Phones
	FindContactsByPhone(phones map[string]bool) (r map[string]*Contact, err error)
	// Parameters:
	//  - ReqSeq
	//  - Emails
	FindAndAddContactsByEmail(reqSeq int32, emails map[string]bool) (r map[string]*Contact, err error)
	// Parameters:
	//  - ReqSeq
	//  - Mid
	FindAndAddContactsByMid(reqSeq int32, mid string) (r map[string]*Contact, err error)
	// Parameters:
	//  - ReqSeq
	//  - Phones
	FindAndAddContactsByPhone(reqSeq int32, phones map[string]bool) (r map[string]*Contact, err error)
	// Parameters:
	//  - ReqSeq
	//  - Userid
	FindAndAddContactsByUserid(reqSeq int32, userid string) (r map[string]*Contact, err error)
	// Parameters:
	//  - Userid
	//  - Reference
	FindContactByMetaTag(userid string, reference string) (r *Contact, err error)
	// Parameters:
	//  - TicketId
	FindContactByUserTicket(ticketId string) (r *Contact, err error)
	// Parameters:
	//  - TicketId
	FindGroupByTicket(ticketId string) (r *Group, err error)
	// Parameters:
	//  - SessionId
	FinishUpdateVerification(sessionId string) (err error)
	// Parameters:
	//  - ExpirationTime
	//  - MaxUseCount
	GenerateUserTicket(expirationTime int64, maxUseCount int32) (r *Ticket, err error)
	// Parameters:
	//  - SessionId
	GetAcceptedProximityMatches(sessionId string) (r map[string]bool, err error)
	GetAllContactIds() (r []string, err error)
	GetAnalyticsInfo() (r *AnalyticsInfo, err error)
	// Parameters:
	//  - KeepLoggedIn
	//  - SystemName
	GetAuthQrcode(keepLoggedIn bool, systemName string) (r *AuthQrcode, err error)
	GetBlockedContactIds() (r []string, err error)
	// Parameters:
	//  - Start
	//  - Count
	GetBlockedContactIdsByRange(start int32, count int32) (r []string, err error)
	GetBlockedRecommendationIds() (r []string, err error)
	// Parameters:
	//  - GroupId
	GetCompactGroup(groupId string) (r *Group, err error)
	// Parameters:
	//  - Revision
	//  - RegionOfUsim
	//  - RegionOfTelephone
	//  - RegionOfLocale
	//  - Carrier
	GetConfigurations(revision int64, regionOfUsim string, regionOfTelephone string, regionOfLocale string, carrier string) (r *Configurations, err error)
	// Parameters:
	//  - ID
	GetContact(id string) (r *Contact, err error)
	// Parameters:
	//  - ID
	//  - Type
	GetContactRegistration(id string, type_a1 ContactType) (r *ContactRegistration, err error)
	// Parameters:
	//  - Ids
	GetContacts(ids []string) (r []*Contact, err error)
	GetCountryWithRequestIp() (r string, err error)
	GetFavoriteMids() (r []string, err error)
	GetFriendRequests() (r []*FriendRequest, err error)
	GetExtendedProfile() (r *ExtendedProfile, err error)
	GetRecentFriendRequests() (r *FriendRequestsInfo, err error)
	// Parameters:
	//  - GroupId
	GetGroup(groupId string) (r *Group, err error)
	GetGroupIdsInvited() (r []string, err error)
	GetGroupIdsJoined() (r []string, err error)
	// Parameters:
	//  - GroupIds
	GetGroups(groupIds []string) (r []*Group, err error)
	// Parameters:
	//  - GroupId
	GetGroupWithoutMembers(groupId string) (r *Group, err error)
	GetLastOpRevision() (r int64, err error)
	GetProfile() (r *Profile, err error)
	// Parameters:
	//  - SessionId
	GetProximityMatchCandidateList(sessionId string) (r *ProximityMatchCandidateResult_, err error)
	// Parameters:
	//  - Provider
	GetRSAKeyInfo(provider IdentityProvider) (r *RSAKey, err error)
	GetRingbackTone() (r *RingbackTone, err error)
	// Parameters:
	//  - RoomId
	GetRoom(roomId string) (r *Room, err error)
	GetServerTime() (r int64, err error)
	GetSessions() (r []*LoginSession, err error)
	GetSettings() (r *Settings, err error)
	// Parameters:
	//  - AttrBitset
	GetSettingsAttributes(attrBitset int32) (r *Settings, err error)
	// Parameters:
	//  - AttrBitset
	GetSettingsAttributes2(attrBitset int32) (r *Settings, err error)
	// Parameters:
	//  - ReqSeq
	//  - GroupId
	//  - ContactIds
	InviteIntoGroup(reqSeq int32, groupId string, contactIds []string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - RoomId
	//  - ContactIds
	InviteIntoRoom(reqSeq int32, roomId string, contactIds []string) (err error)
	// Parameters:
	//  - Userid
	IsUseridAvailable(userid string) (r bool, err error)
	// Parameters:
	//  - ReqSeq
	//  - GroupId
	//  - ContactIds
	KickoutFromGroup(reqSeq int32, groupId string, contactIds []string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - GroupId
	LeaveGroup(reqSeq int32, groupId string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - RoomId
	LeaveRoom(reqSeq int32, roomId string) (err error)
	// Parameters:
	//  - IdentityProvider
	//  - Identifier
	//  - Password
	//  - KeepLoggedIn
	//  - AccessLocation
	//  - SystemName
	//  - Certificate
	LoginWithIdentityCredential(identityProvider IdentityProvider, identifier string, password string, keepLoggedIn bool, accessLocation string, systemName string, certificate string) (r string, err error)
	// Parameters:
	//  - IdentityProvider
	//  - Identifier
	//  - Password
	//  - KeepLoggedIn
	//  - AccessLocation
	//  - SystemName
	//  - Certificate
	LoginWithIdentityCredentialForCertificate(identityProvider IdentityProvider, identifier string, password string, keepLoggedIn bool, accessLocation string, systemName string, certificate string) (r *LoginResult_, err error)
	// Parameters:
	//  - Verifier
	LoginWithVerifier(verifier string) (r string, err error)
	// Parameters:
	//  - Verifier
	LoginWithVerifierForCerificate(verifier string) (r *LoginResult_, err error)
	// Parameters:
	//  - Verifier
	LoginWithVerifierForCertificate(verifier string) (r *LoginResult_, err error)
	Logout() (err error)
	// Parameters:
	//  - TokenKey
	LogoutSession(tokenKey string) (err error)
	Noop() (err error)
	// Parameters:
	//  - ReqSeq
	//  - Userid
	RegisterUserid(reqSeq int32, userid string) (r bool, err error)
	// Parameters:
	//  - ExpirationTime
	//  - MaxUseCount
	ReissueUserTicket(expirationTime int64, maxUseCount int32) (r string, err error)
	// Parameters:
	//  - GroupId
	ReissueGroupTicket(groupId string) (r string, err error)
	// Parameters:
	//  - ReqSeq
	//  - GroupId
	RejectGroupInvitation(reqSeq int32, groupId string) (err error)
	ReleaseSession() (err error)
	// Parameters:
	//  - Seq
	//  - LastMessageId
	RemoveAllMessages(seq int32, lastMessageId string) (err error)
	// Parameters:
	//  - Direction
	//  - MidOrEMid
	RemoveFriendRequest(direction DirectionType, midOrEMid string) (err error)
	// Parameters:
	//  - Seq
	//  - Consumer
	//  - LastMessageId
	//  - SessionId
	SendChatChecked(seq int32, consumer string, lastMessageId string, sessionId float64) (err error)
	// Parameters:
	//  - Seq
	//  - Consumer
	//  - LastMessageId
	//  - SessionId
	SendChatRemoved(seq int32, consumer string, lastMessageId string, sessionId float64) (err error)
	// Parameters:
	//  - Seq
	//  - Consumer
	//  - MessageId
	SendContentReceipt(seq int32, consumer string, messageId string) (err error)
	// Parameters:
	//  - Text
	SendEchoPush(text string) (err error)
	// Parameters:
	//  - Seq
	//  - Message
	SendMessage(seq int32, message *Message) (r *Message, err error)
	SendMessageToMyHome() (r *Message, err error)
	// Parameters:
	//  - Requests
	SendPostback(requests *SendPostbackRequest) (err error)
	// Parameters:
	//  - ReqSeq
	//  - ID
	UnblockContact(reqSeq int32, id string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - ID
	UnblockRecommendation(reqSeq int32, id string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - Mid
	//  - Flag
	//  - Value
	UpdateContactSetting(reqSeq int32, mid string, flag ContactSetting, value string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - Attr
	//  - ExtendedProfile
	UpdateExtendedProfileAttribute(reqSeq int32, attr ExtendAttr, extendedProfile *ExtendedProfile) (err error)
	// Parameters:
	//  - ReqSeq
	//  - Group
	UpdateGroup(reqSeq int32, group *Group) (err error)
	// Parameters:
	//  - ReqSeq
	//  - GroupMid
	//  - UpdatedAttrs
	UpdateGroupPreferenceAttribute(reqSeq int32, groupMid string, updatedAttrs map[Preference]string) (err error)
	// Parameters:
	//  - Token
	//  - Type
	UpdateNotificationToken(token string, type_a1 NotificationType) (err error)
	// Parameters:
	//  - ReqSeq
	//  - Profile
	UpdateProfile(reqSeq int32, profile *Profile) (err error)
	// Parameters:
	//  - ReqSeq
	//  - Attr
	//  - Value
	UpdateProfileAttribute(reqSeq int32, attr ProfileAttribute, value string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - Settings
	UpdateSettings(reqSeq int32, settings *Settings) (err error)
	// Parameters:
	//  - ReqSeq
	//  - Settings
	UpdateSettings2(reqSeq int32, settings *Settings) (r int32, err error)
	// Parameters:
	//  - ReqSeq
	//  - Attr
	//  - Value
	UpdateSettingsAttribute(reqSeq int32, attr SettingsAttribute, value string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - AttrBitset
	//  - Settings
	UpdateSettingsAttributes(reqSeq int32, attrBitset int32, settings *Settings) (r int32, err error)
}

type TalkServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewTalkServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TalkServiceClient {
	return &TalkServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewTalkServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TalkServiceClient {
	return &TalkServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - ReqSeq
//  - GroupId
func (p *TalkServiceClient) AcceptGroupInvitation(reqSeq int32, groupId string) (err error) {
	if err = p.sendAcceptGroupInvitation(reqSeq, groupId); err != nil {
		return
	}
	return p.recvAcceptGroupInvitation()
}

func (p *TalkServiceClient) sendAcceptGroupInvitation(reqSeq int32, groupId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("acceptGroupInvitation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceAcceptGroupInvitationArgs{
		ReqSeq:  reqSeq,
		GroupId: groupId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvAcceptGroupInvitation() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "acceptGroupInvitation" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "acceptGroupInvitation failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "acceptGroupInvitation failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error55 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error56 error
		error56, err = error55.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error56
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "acceptGroupInvitation failed: invalid message type")
		return
	}
	result := TalkServiceAcceptGroupInvitationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - GroupId
//  - TicketId
func (p *TalkServiceClient) AcceptGroupInvitationByTicket(reqSeq int32, groupId string, ticketId string) (err error) {
	if err = p.sendAcceptGroupInvitationByTicket(reqSeq, groupId, ticketId); err != nil {
		return
	}
	return p.recvAcceptGroupInvitationByTicket()
}

func (p *TalkServiceClient) sendAcceptGroupInvitationByTicket(reqSeq int32, groupId string, ticketId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("acceptGroupInvitationByTicket", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceAcceptGroupInvitationByTicketArgs{
		ReqSeq:   reqSeq,
		GroupId:  groupId,
		TicketId: ticketId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvAcceptGroupInvitationByTicket() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "acceptGroupInvitationByTicket" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "acceptGroupInvitationByTicket failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "acceptGroupInvitationByTicket failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error57 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error58 error
		error58, err = error57.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error58
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "acceptGroupInvitationByTicket failed: invalid message type")
		return
	}
	result := TalkServiceAcceptGroupInvitationByTicketResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - SessionId
//  - Ids
func (p *TalkServiceClient) AcceptProximityMatches(sessionId string, ids map[string]bool) (err error) {
	if err = p.sendAcceptProximityMatches(sessionId, ids); err != nil {
		return
	}
	return p.recvAcceptProximityMatches()
}

func (p *TalkServiceClient) sendAcceptProximityMatches(sessionId string, ids map[string]bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("acceptProximityMatches", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceAcceptProximityMatchesArgs{
		SessionId: sessionId,
		Ids:       ids,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvAcceptProximityMatches() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "acceptProximityMatches" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "acceptProximityMatches failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "acceptProximityMatches failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error59 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error60 error
		error60, err = error59.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error60
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "acceptProximityMatches failed: invalid message type")
		return
	}
	result := TalkServiceAcceptProximityMatchesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - To
func (p *TalkServiceClient) AcquireCallRoute(to string) (r []string, err error) {
	if err = p.sendAcquireCallRoute(to); err != nil {
		return
	}
	return p.recvAcquireCallRoute()
}

func (p *TalkServiceClient) sendAcquireCallRoute(to string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("acquireCallRoute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceAcquireCallRouteArgs{
		To: to,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvAcquireCallRoute() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "acquireCallRoute" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "acquireCallRoute failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "acquireCallRoute failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error61 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error62 error
		error62, err = error61.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error62
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "acquireCallRoute failed: invalid message type")
		return
	}
	result := TalkServiceAcquireCallRouteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - To
func (p *TalkServiceClient) AcquireCallTicket(to string) (r string, err error) {
	if err = p.sendAcquireCallTicket(to); err != nil {
		return
	}
	return p.recvAcquireCallTicket()
}

func (p *TalkServiceClient) sendAcquireCallTicket(to string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("acquireCallTicket", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceAcquireCallTicketArgs{
		To: to,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvAcquireCallTicket() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "acquireCallTicket" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "acquireCallTicket failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "acquireCallTicket failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error63 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error64 error
		error64, err = error63.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error64
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "acquireCallTicket failed: invalid message type")
		return
	}
	result := TalkServiceAcquireCallTicketResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - FeatureType
func (p *TalkServiceClient) AcquireEncryptedAccessToken(featureType FeatureType) (r string, err error) {
	if err = p.sendAcquireEncryptedAccessToken(featureType); err != nil {
		return
	}
	return p.recvAcquireEncryptedAccessToken()
}

func (p *TalkServiceClient) sendAcquireEncryptedAccessToken(featureType FeatureType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("acquireEncryptedAccessToken", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceAcquireEncryptedAccessTokenArgs{
		FeatureType: featureType,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvAcquireEncryptedAccessToken() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "acquireEncryptedAccessToken" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "acquireEncryptedAccessToken failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "acquireEncryptedAccessToken failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error65 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error66 error
		error66, err = error65.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error66
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "acquireEncryptedAccessToken failed: invalid message type")
		return
	}
	result := TalkServiceAcquireEncryptedAccessTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - ID
func (p *TalkServiceClient) BlockContact(reqSeq int32, id string) (err error) {
	if err = p.sendBlockContact(reqSeq, id); err != nil {
		return
	}
	return p.recvBlockContact()
}

func (p *TalkServiceClient) sendBlockContact(reqSeq int32, id string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("blockContact", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceBlockContactArgs{
		ReqSeq: reqSeq,
		ID:     id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvBlockContact() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "blockContact" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "blockContact failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "blockContact failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error67 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error68 error
		error68, err = error67.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error68
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "blockContact failed: invalid message type")
		return
	}
	result := TalkServiceBlockContactResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - ID
func (p *TalkServiceClient) BlockRecommendation(reqSeq int32, id string) (err error) {
	if err = p.sendBlockRecommendation(reqSeq, id); err != nil {
		return
	}
	return p.recvBlockRecommendation()
}

func (p *TalkServiceClient) sendBlockRecommendation(reqSeq int32, id string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("blockRecommendation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceBlockRecommendationArgs{
		ReqSeq: reqSeq,
		ID:     id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvBlockRecommendation() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "blockRecommendation" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "blockRecommendation failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "blockRecommendation failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error69 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error70 error
		error70, err = error69.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error70
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "blockRecommendation failed: invalid message type")
		return
	}
	result := TalkServiceBlockRecommendationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - GroupId
//  - ContactIds
func (p *TalkServiceClient) CancelGroupInvitation(reqSeq int32, groupId string, contactIds []string) (err error) {
	if err = p.sendCancelGroupInvitation(reqSeq, groupId, contactIds); err != nil {
		return
	}
	return p.recvCancelGroupInvitation()
}

func (p *TalkServiceClient) sendCancelGroupInvitation(reqSeq int32, groupId string, contactIds []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("cancelGroupInvitation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceCancelGroupInvitationArgs{
		ReqSeq:     reqSeq,
		GroupId:    groupId,
		ContactIds: contactIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvCancelGroupInvitation() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "cancelGroupInvitation" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "cancelGroupInvitation failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "cancelGroupInvitation failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error71 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error72 error
		error72, err = error71.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error72
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "cancelGroupInvitation failed: invalid message type")
		return
	}
	result := TalkServiceCancelGroupInvitationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - SessionId
//  - Method
func (p *TalkServiceClient) ChangeVerificationMethod(sessionId string, method VerificationMethod) (r *VerificationSessionData, err error) {
	if err = p.sendChangeVerificationMethod(sessionId, method); err != nil {
		return
	}
	return p.recvChangeVerificationMethod()
}

func (p *TalkServiceClient) sendChangeVerificationMethod(sessionId string, method VerificationMethod) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("changeVerificationMethod", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceChangeVerificationMethodArgs{
		SessionId: sessionId,
		Method:    method,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvChangeVerificationMethod() (value *VerificationSessionData, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "changeVerificationMethod" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "changeVerificationMethod failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "changeVerificationMethod failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error73 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error74 error
		error74, err = error73.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error74
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "changeVerificationMethod failed: invalid message type")
		return
	}
	result := TalkServiceChangeVerificationMethodResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) ClearIdentityCredential() (err error) {
	if err = p.sendClearIdentityCredential(); err != nil {
		return
	}
	return p.recvClearIdentityCredential()
}

func (p *TalkServiceClient) sendClearIdentityCredential() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("clearIdentityCredential", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceClearIdentityCredentialArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvClearIdentityCredential() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "clearIdentityCredential" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "clearIdentityCredential failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "clearIdentityCredential failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error75 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error76 error
		error76, err = error75.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error76
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "clearIdentityCredential failed: invalid message type")
		return
	}
	result := TalkServiceClearIdentityCredentialResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ChannelId
//  - MessageBoxId
func (p *TalkServiceClient) ClearMessageBox(channelId string, messageBoxId string) (err error) {
	if err = p.sendClearMessageBox(channelId, messageBoxId); err != nil {
		return
	}
	return p.recvClearMessageBox()
}

func (p *TalkServiceClient) sendClearMessageBox(channelId string, messageBoxId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("clearMessageBox", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceClearMessageBoxArgs{
		ChannelId:    channelId,
		MessageBoxId: messageBoxId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvClearMessageBox() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "clearMessageBox" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "clearMessageBox failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "clearMessageBox failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error77 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error78 error
		error78, err = error77.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error78
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "clearMessageBox failed: invalid message type")
		return
	}
	result := TalkServiceClearMessageBoxResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) CloseProximityMatch(sessionId string) (err error) {
	if err = p.sendCloseProximityMatch(sessionId); err != nil {
		return
	}
	return p.recvCloseProximityMatch()
}

func (p *TalkServiceClient) sendCloseProximityMatch(sessionId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("closeProximityMatch", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceCloseProximityMatchArgs{
		SessionId: sessionId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvCloseProximityMatch() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "closeProximityMatch" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "closeProximityMatch failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "closeProximityMatch failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error79 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error80 error
		error80, err = error79.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error80
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "closeProximityMatch failed: invalid message type")
		return
	}
	result := TalkServiceCloseProximityMatchResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Verifier
//  - PinCode
func (p *TalkServiceClient) ConfirmEmail(verifier string, pinCode string) (err error) {
	if err = p.sendConfirmEmail(verifier, pinCode); err != nil {
		return
	}
	return p.recvConfirmEmail()
}

func (p *TalkServiceClient) sendConfirmEmail(verifier string, pinCode string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("confirmEmail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceConfirmEmailArgs{
		Verifier: verifier,
		PinCode:  pinCode,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvConfirmEmail() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "confirmEmail" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "confirmEmail failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "confirmEmail failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error81 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error82 error
		error82, err = error81.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error82
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "confirmEmail failed: invalid message type")
		return
	}
	result := TalkServiceConfirmEmailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

func (p *TalkServiceClient) CreateAccountMigrationPincodeSession() (r []string, err error) {
	if err = p.sendCreateAccountMigrationPincodeSession(); err != nil {
		return
	}
	return p.recvCreateAccountMigrationPincodeSession()
}

func (p *TalkServiceClient) sendCreateAccountMigrationPincodeSession() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createAccountMigrationPincodeSession", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceCreateAccountMigrationPincodeSessionArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvCreateAccountMigrationPincodeSession() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createAccountMigrationPincodeSession" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createAccountMigrationPincodeSession failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createAccountMigrationPincodeSession failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error83 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error84 error
		error84, err = error83.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error84
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createAccountMigrationPincodeSession failed: invalid message type")
		return
	}
	result := TalkServiceCreateAccountMigrationPincodeSessionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Seq
//  - Name
//  - ContactIds
func (p *TalkServiceClient) CreateGroup(seq int32, name string, contactIds []string) (r *Group, err error) {
	if err = p.sendCreateGroup(seq, name, contactIds); err != nil {
		return
	}
	return p.recvCreateGroup()
}

func (p *TalkServiceClient) sendCreateGroup(seq int32, name string, contactIds []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceCreateGroupArgs{
		Seq:        seq,
		Name:       name,
		ContactIds: contactIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvCreateGroup() (value *Group, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error85 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error86 error
		error86, err = error85.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error86
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createGroup failed: invalid message type")
		return
	}
	result := TalkServiceCreateGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - URL
//  - CharacterSet
//  - ImageSize
//  - X
//  - Y
//  - Width
//  - Height
func (p *TalkServiceClient) CreateQrcodeBase64Image(url string, characterSet string, imageSize int32, x int32, y int32, width int32, height int32) (r string, err error) {
	if err = p.sendCreateQrcodeBase64Image(url, characterSet, imageSize, x, y, width, height); err != nil {
		return
	}
	return p.recvCreateQrcodeBase64Image()
}

func (p *TalkServiceClient) sendCreateQrcodeBase64Image(url string, characterSet string, imageSize int32, x int32, y int32, width int32, height int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createQrcodeBase64Image", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceCreateQrcodeBase64ImageArgs{
		URL:          url,
		CharacterSet: characterSet,
		ImageSize:    imageSize,
		X:            x,
		Y:            y,
		Width:        width,
		Height:       height,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvCreateQrcodeBase64Image() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createQrcodeBase64Image" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createQrcodeBase64Image failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createQrcodeBase64Image failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error87 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error88 error
		error88, err = error87.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error88
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createQrcodeBase64Image failed: invalid message type")
		return
	}
	result := TalkServiceCreateQrcodeBase64ImageResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - ContactIds
func (p *TalkServiceClient) CreateRoom(reqSeq int32, contactIds []string) (r *Room, err error) {
	if err = p.sendCreateRoom(reqSeq, contactIds); err != nil {
		return
	}
	return p.recvCreateRoom()
}

func (p *TalkServiceClient) sendCreateRoom(reqSeq int32, contactIds []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createRoom", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceCreateRoomArgs{
		ReqSeq:     reqSeq,
		ContactIds: contactIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvCreateRoom() (value *Room, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createRoom" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createRoom failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createRoom failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error89 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error90 error
		error90, err = error89.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error90
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createRoom failed: invalid message type")
		return
	}
	result := TalkServiceCreateRoomResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) DisableNearby() (err error) {
	if err = p.sendDisableNearby(); err != nil {
		return
	}
	return p.recvDisableNearby()
}

func (p *TalkServiceClient) sendDisableNearby() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("disableNearby", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceDisableNearbyArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvDisableNearby() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "disableNearby" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "disableNearby failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "disableNearby failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error91 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error92 error
		error92, err = error91.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error92
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "disableNearby failed: invalid message type")
		return
	}
	result := TalkServiceDisableNearbyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - LocalRev
//  - Count
func (p *TalkServiceClient) FetchOperations(localRev int64, count int32) (r []*Operation, err error) {
	if err = p.sendFetchOperations(localRev, count); err != nil {
		return
	}
	return p.recvFetchOperations()
}

func (p *TalkServiceClient) sendFetchOperations(localRev int64, count int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("fetchOperations", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceFetchOperationsArgs{
		LocalRev: localRev,
		Count:    count,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFetchOperations() (value []*Operation, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "fetchOperations" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "fetchOperations failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "fetchOperations failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error93 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error94 error
		error94, err = error93.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error94
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "fetchOperations failed: invalid message type")
		return
	}
	result := TalkServiceFetchOperationsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - LocalRev
//  - Count
//  - GlobalRev
//  - IndividualRev
func (p *TalkServiceClient) FetchOps(localRev int64, count int32, globalRev int64, individualRev int64) (r []*Operation, err error) {
	if err = p.sendFetchOps(localRev, count, globalRev, individualRev); err != nil {
		return
	}
	return p.recvFetchOps()
}

func (p *TalkServiceClient) sendFetchOps(localRev int64, count int32, globalRev int64, individualRev int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("fetchOps", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceFetchOpsArgs{
		LocalRev:      localRev,
		Count:         count,
		GlobalRev:     globalRev,
		IndividualRev: individualRev,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFetchOps() (value []*Operation, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "fetchOps" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "fetchOps failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "fetchOps failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error95 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error96 error
		error96, err = error95.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error96
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "fetchOps failed: invalid message type")
		return
	}
	result := TalkServiceFetchOpsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Emails
func (p *TalkServiceClient) FindContactsByEmail(emails map[string]bool) (r map[string]*Contact, err error) {
	if err = p.sendFindContactsByEmail(emails); err != nil {
		return
	}
	return p.recvFindContactsByEmail()
}

func (p *TalkServiceClient) sendFindContactsByEmail(emails map[string]bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findContactsByEmail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceFindContactsByEmailArgs{
		Emails: emails,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFindContactsByEmail() (value map[string]*Contact, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "findContactsByEmail" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "findContactsByEmail failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findContactsByEmail failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error97 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error98 error
		error98, err = error97.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error98
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "findContactsByEmail failed: invalid message type")
		return
	}
	result := TalkServiceFindContactsByEmailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Phones
func (p *TalkServiceClient) FindContactsByPhone(phones map[string]bool) (r map[string]*Contact, err error) {
	if err = p.sendFindContactsByPhone(phones); err != nil {
		return
	}
	return p.recvFindContactsByPhone()
}

func (p *TalkServiceClient) sendFindContactsByPhone(phones map[string]bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findContactsByPhone", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceFindContactsByPhoneArgs{
		Phones: phones,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFindContactsByPhone() (value map[string]*Contact, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "findContactsByPhone" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "findContactsByPhone failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findContactsByPhone failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error99 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error100 error
		error100, err = error99.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error100
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "findContactsByPhone failed: invalid message type")
		return
	}
	result := TalkServiceFindContactsByPhoneResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - Emails
func (p *TalkServiceClient) FindAndAddContactsByEmail(reqSeq int32, emails map[string]bool) (r map[string]*Contact, err error) {
	if err = p.sendFindAndAddContactsByEmail(reqSeq, emails); err != nil {
		return
	}
	return p.recvFindAndAddContactsByEmail()
}

func (p *TalkServiceClient) sendFindAndAddContactsByEmail(reqSeq int32, emails map[string]bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findAndAddContactsByEmail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceFindAndAddContactsByEmailArgs{
		ReqSeq: reqSeq,
		Emails: emails,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFindAndAddContactsByEmail() (value map[string]*Contact, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "findAndAddContactsByEmail" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "findAndAddContactsByEmail failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findAndAddContactsByEmail failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error101 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error102 error
		error102, err = error101.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error102
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "findAndAddContactsByEmail failed: invalid message type")
		return
	}
	result := TalkServiceFindAndAddContactsByEmailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - Mid
func (p *TalkServiceClient) FindAndAddContactsByMid(reqSeq int32, mid string) (r map[string]*Contact, err error) {
	if err = p.sendFindAndAddContactsByMid(reqSeq, mid); err != nil {
		return
	}
	return p.recvFindAndAddContactsByMid()
}

func (p *TalkServiceClient) sendFindAndAddContactsByMid(reqSeq int32, mid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findAndAddContactsByMid", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceFindAndAddContactsByMidArgs{
		ReqSeq: reqSeq,
		Mid:    mid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFindAndAddContactsByMid() (value map[string]*Contact, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "findAndAddContactsByMid" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "findAndAddContactsByMid failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findAndAddContactsByMid failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error103 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error104 error
		error104, err = error103.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error104
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "findAndAddContactsByMid failed: invalid message type")
		return
	}
	result := TalkServiceFindAndAddContactsByMidResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - Phones
func (p *TalkServiceClient) FindAndAddContactsByPhone(reqSeq int32, phones map[string]bool) (r map[string]*Contact, err error) {
	if err = p.sendFindAndAddContactsByPhone(reqSeq, phones); err != nil {
		return
	}
	return p.recvFindAndAddContactsByPhone()
}

func (p *TalkServiceClient) sendFindAndAddContactsByPhone(reqSeq int32, phones map[string]bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findAndAddContactsByPhone", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceFindAndAddContactsByPhoneArgs{
		ReqSeq: reqSeq,
		Phones: phones,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFindAndAddContactsByPhone() (value map[string]*Contact, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "findAndAddContactsByPhone" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "findAndAddContactsByPhone failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findAndAddContactsByPhone failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error105 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error106 error
		error106, err = error105.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error106
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "findAndAddContactsByPhone failed: invalid message type")
		return
	}
	result := TalkServiceFindAndAddContactsByPhoneResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - Userid
func (p *TalkServiceClient) FindAndAddContactsByUserid(reqSeq int32, userid string) (r map[string]*Contact, err error) {
	if err = p.sendFindAndAddContactsByUserid(reqSeq, userid); err != nil {
		return
	}
	return p.recvFindAndAddContactsByUserid()
}

func (p *TalkServiceClient) sendFindAndAddContactsByUserid(reqSeq int32, userid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findAndAddContactsByUserid", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceFindAndAddContactsByUseridArgs{
		ReqSeq: reqSeq,
		Userid: userid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFindAndAddContactsByUserid() (value map[string]*Contact, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "findAndAddContactsByUserid" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "findAndAddContactsByUserid failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findAndAddContactsByUserid failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error107 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error108 error
		error108, err = error107.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error108
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "findAndAddContactsByUserid failed: invalid message type")
		return
	}
	result := TalkServiceFindAndAddContactsByUseridResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Userid
//  - Reference
func (p *TalkServiceClient) FindContactByMetaTag(userid string, reference string) (r *Contact, err error) {
	if err = p.sendFindContactByMetaTag(userid, reference); err != nil {
		return
	}
	return p.recvFindContactByMetaTag()
}

func (p *TalkServiceClient) sendFindContactByMetaTag(userid string, reference string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findContactByMetaTag", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceFindContactByMetaTagArgs{
		Userid:    userid,
		Reference: reference,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFindContactByMetaTag() (value *Contact, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "findContactByMetaTag" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "findContactByMetaTag failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findContactByMetaTag failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error109 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error110 error
		error110, err = error109.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error110
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "findContactByMetaTag failed: invalid message type")
		return
	}
	result := TalkServiceFindContactByMetaTagResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TicketId
func (p *TalkServiceClient) FindContactByUserTicket(ticketId string) (r *Contact, err error) {
	if err = p.sendFindContactByUserTicket(ticketId); err != nil {
		return
	}
	return p.recvFindContactByUserTicket()
}

func (p *TalkServiceClient) sendFindContactByUserTicket(ticketId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findContactByUserTicket", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceFindContactByUserTicketArgs{
		TicketId: ticketId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFindContactByUserTicket() (value *Contact, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "findContactByUserTicket" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "findContactByUserTicket failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findContactByUserTicket failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error111 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error112 error
		error112, err = error111.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error112
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "findContactByUserTicket failed: invalid message type")
		return
	}
	result := TalkServiceFindContactByUserTicketResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TicketId
func (p *TalkServiceClient) FindGroupByTicket(ticketId string) (r *Group, err error) {
	if err = p.sendFindGroupByTicket(ticketId); err != nil {
		return
	}
	return p.recvFindGroupByTicket()
}

func (p *TalkServiceClient) sendFindGroupByTicket(ticketId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findGroupByTicket", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceFindGroupByTicketArgs{
		TicketId: ticketId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFindGroupByTicket() (value *Group, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "findGroupByTicket" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "findGroupByTicket failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findGroupByTicket failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error113 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error114 error
		error114, err = error113.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error114
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "findGroupByTicket failed: invalid message type")
		return
	}
	result := TalkServiceFindGroupByTicketResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) FinishUpdateVerification(sessionId string) (err error) {
	if err = p.sendFinishUpdateVerification(sessionId); err != nil {
		return
	}
	return p.recvFinishUpdateVerification()
}

func (p *TalkServiceClient) sendFinishUpdateVerification(sessionId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("finishUpdateVerification", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceFinishUpdateVerificationArgs{
		SessionId: sessionId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFinishUpdateVerification() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "finishUpdateVerification" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "finishUpdateVerification failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "finishUpdateVerification failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error115 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error116 error
		error116, err = error115.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error116
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "finishUpdateVerification failed: invalid message type")
		return
	}
	result := TalkServiceFinishUpdateVerificationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ExpirationTime
//  - MaxUseCount
func (p *TalkServiceClient) GenerateUserTicket(expirationTime int64, maxUseCount int32) (r *Ticket, err error) {
	if err = p.sendGenerateUserTicket(expirationTime, maxUseCount); err != nil {
		return
	}
	return p.recvGenerateUserTicket()
}

func (p *TalkServiceClient) sendGenerateUserTicket(expirationTime int64, maxUseCount int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("generateUserTicket", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGenerateUserTicketArgs{
		ExpirationTime: expirationTime,
		MaxUseCount:    maxUseCount,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGenerateUserTicket() (value *Ticket, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "generateUserTicket" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "generateUserTicket failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "generateUserTicket failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error117 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error118 error
		error118, err = error117.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error118
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "generateUserTicket failed: invalid message type")
		return
	}
	result := TalkServiceGenerateUserTicketResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) GetAcceptedProximityMatches(sessionId string) (r map[string]bool, err error) {
	if err = p.sendGetAcceptedProximityMatches(sessionId); err != nil {
		return
	}
	return p.recvGetAcceptedProximityMatches()
}

func (p *TalkServiceClient) sendGetAcceptedProximityMatches(sessionId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getAcceptedProximityMatches", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetAcceptedProximityMatchesArgs{
		SessionId: sessionId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetAcceptedProximityMatches() (value map[string]bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getAcceptedProximityMatches" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAcceptedProximityMatches failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAcceptedProximityMatches failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error119 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error120 error
		error120, err = error119.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error120
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAcceptedProximityMatches failed: invalid message type")
		return
	}
	result := TalkServiceGetAcceptedProximityMatchesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetAllContactIds() (r []string, err error) {
	if err = p.sendGetAllContactIds(); err != nil {
		return
	}
	return p.recvGetAllContactIds()
}

func (p *TalkServiceClient) sendGetAllContactIds() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getAllContactIds", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetAllContactIdsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetAllContactIds() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getAllContactIds" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllContactIds failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllContactIds failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error121 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error122 error
		error122, err = error121.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error122
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllContactIds failed: invalid message type")
		return
	}
	result := TalkServiceGetAllContactIdsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetAnalyticsInfo() (r *AnalyticsInfo, err error) {
	if err = p.sendGetAnalyticsInfo(); err != nil {
		return
	}
	return p.recvGetAnalyticsInfo()
}

func (p *TalkServiceClient) sendGetAnalyticsInfo() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getAnalyticsInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetAnalyticsInfoArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetAnalyticsInfo() (value *AnalyticsInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getAnalyticsInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAnalyticsInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAnalyticsInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error123 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error124 error
		error124, err = error123.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error124
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAnalyticsInfo failed: invalid message type")
		return
	}
	result := TalkServiceGetAnalyticsInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - KeepLoggedIn
//  - SystemName
func (p *TalkServiceClient) GetAuthQrcode(keepLoggedIn bool, systemName string) (r *AuthQrcode, err error) {
	if err = p.sendGetAuthQrcode(keepLoggedIn, systemName); err != nil {
		return
	}
	return p.recvGetAuthQrcode()
}

func (p *TalkServiceClient) sendGetAuthQrcode(keepLoggedIn bool, systemName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getAuthQrcode", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetAuthQrcodeArgs{
		KeepLoggedIn: keepLoggedIn,
		SystemName:   systemName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetAuthQrcode() (value *AuthQrcode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getAuthQrcode" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAuthQrcode failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAuthQrcode failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error125 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error126 error
		error126, err = error125.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error126
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAuthQrcode failed: invalid message type")
		return
	}
	result := TalkServiceGetAuthQrcodeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetBlockedContactIds() (r []string, err error) {
	if err = p.sendGetBlockedContactIds(); err != nil {
		return
	}
	return p.recvGetBlockedContactIds()
}

func (p *TalkServiceClient) sendGetBlockedContactIds() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getBlockedContactIds", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetBlockedContactIdsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetBlockedContactIds() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getBlockedContactIds" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getBlockedContactIds failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getBlockedContactIds failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error127 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error128 error
		error128, err = error127.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error128
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getBlockedContactIds failed: invalid message type")
		return
	}
	result := TalkServiceGetBlockedContactIdsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Start
//  - Count
func (p *TalkServiceClient) GetBlockedContactIdsByRange(start int32, count int32) (r []string, err error) {
	if err = p.sendGetBlockedContactIdsByRange(start, count); err != nil {
		return
	}
	return p.recvGetBlockedContactIdsByRange()
}

func (p *TalkServiceClient) sendGetBlockedContactIdsByRange(start int32, count int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getBlockedContactIdsByRange", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetBlockedContactIdsByRangeArgs{
		Start: start,
		Count: count,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetBlockedContactIdsByRange() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getBlockedContactIdsByRange" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getBlockedContactIdsByRange failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getBlockedContactIdsByRange failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error129 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error130 error
		error130, err = error129.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error130
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getBlockedContactIdsByRange failed: invalid message type")
		return
	}
	result := TalkServiceGetBlockedContactIdsByRangeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetBlockedRecommendationIds() (r []string, err error) {
	if err = p.sendGetBlockedRecommendationIds(); err != nil {
		return
	}
	return p.recvGetBlockedRecommendationIds()
}

func (p *TalkServiceClient) sendGetBlockedRecommendationIds() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getBlockedRecommendationIds", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetBlockedRecommendationIdsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetBlockedRecommendationIds() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getBlockedRecommendationIds" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getBlockedRecommendationIds failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getBlockedRecommendationIds failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error131 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error132 error
		error132, err = error131.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error132
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getBlockedRecommendationIds failed: invalid message type")
		return
	}
	result := TalkServiceGetBlockedRecommendationIdsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GroupId
func (p *TalkServiceClient) GetCompactGroup(groupId string) (r *Group, err error) {
	if err = p.sendGetCompactGroup(groupId); err != nil {
		return
	}
	return p.recvGetCompactGroup()
}

func (p *TalkServiceClient) sendGetCompactGroup(groupId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getCompactGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetCompactGroupArgs{
		GroupId: groupId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetCompactGroup() (value *Group, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getCompactGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCompactGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCompactGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error133 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error134 error
		error134, err = error133.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error134
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCompactGroup failed: invalid message type")
		return
	}
	result := TalkServiceGetCompactGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Revision
//  - RegionOfUsim
//  - RegionOfTelephone
//  - RegionOfLocale
//  - Carrier
func (p *TalkServiceClient) GetConfigurations(revision int64, regionOfUsim string, regionOfTelephone string, regionOfLocale string, carrier string) (r *Configurations, err error) {
	if err = p.sendGetConfigurations(revision, regionOfUsim, regionOfTelephone, regionOfLocale, carrier); err != nil {
		return
	}
	return p.recvGetConfigurations()
}

func (p *TalkServiceClient) sendGetConfigurations(revision int64, regionOfUsim string, regionOfTelephone string, regionOfLocale string, carrier string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getConfigurations", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetConfigurationsArgs{
		Revision:          revision,
		RegionOfUsim:      regionOfUsim,
		RegionOfTelephone: regionOfTelephone,
		RegionOfLocale:    regionOfLocale,
		Carrier:           carrier,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetConfigurations() (value *Configurations, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getConfigurations" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getConfigurations failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getConfigurations failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error135 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error136 error
		error136, err = error135.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error136
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getConfigurations failed: invalid message type")
		return
	}
	result := TalkServiceGetConfigurationsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
func (p *TalkServiceClient) GetContact(id string) (r *Contact, err error) {
	if err = p.sendGetContact(id); err != nil {
		return
	}
	return p.recvGetContact()
}

func (p *TalkServiceClient) sendGetContact(id string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getContact", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetContactArgs{
		ID: id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetContact() (value *Contact, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getContact" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getContact failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getContact failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error137 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error138 error
		error138, err = error137.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error138
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getContact failed: invalid message type")
		return
	}
	result := TalkServiceGetContactResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
//  - Type
func (p *TalkServiceClient) GetContactRegistration(id string, type_a1 ContactType) (r *ContactRegistration, err error) {
	if err = p.sendGetContactRegistration(id, type_a1); err != nil {
		return
	}
	return p.recvGetContactRegistration()
}

func (p *TalkServiceClient) sendGetContactRegistration(id string, type_a1 ContactType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getContactRegistration", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetContactRegistrationArgs{
		ID:   id,
		Type: type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetContactRegistration() (value *ContactRegistration, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getContactRegistration" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getContactRegistration failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getContactRegistration failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error139 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error140 error
		error140, err = error139.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error140
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getContactRegistration failed: invalid message type")
		return
	}
	result := TalkServiceGetContactRegistrationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Ids
func (p *TalkServiceClient) GetContacts(ids []string) (r []*Contact, err error) {
	if err = p.sendGetContacts(ids); err != nil {
		return
	}
	return p.recvGetContacts()
}

func (p *TalkServiceClient) sendGetContacts(ids []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getContacts", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetContactsArgs{
		Ids: ids,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetContacts() (value []*Contact, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getContacts" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getContacts failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getContacts failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error141 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error142 error
		error142, err = error141.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error142
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getContacts failed: invalid message type")
		return
	}
	result := TalkServiceGetContactsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetCountryWithRequestIp() (r string, err error) {
	if err = p.sendGetCountryWithRequestIp(); err != nil {
		return
	}
	return p.recvGetCountryWithRequestIp()
}

func (p *TalkServiceClient) sendGetCountryWithRequestIp() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getCountryWithRequestIp", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetCountryWithRequestIpArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetCountryWithRequestIp() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getCountryWithRequestIp" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCountryWithRequestIp failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCountryWithRequestIp failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error143 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error144 error
		error144, err = error143.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error144
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCountryWithRequestIp failed: invalid message type")
		return
	}
	result := TalkServiceGetCountryWithRequestIpResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetFavoriteMids() (r []string, err error) {
	if err = p.sendGetFavoriteMids(); err != nil {
		return
	}
	return p.recvGetFavoriteMids()
}

func (p *TalkServiceClient) sendGetFavoriteMids() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getFavoriteMids", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetFavoriteMidsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetFavoriteMids() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getFavoriteMids" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getFavoriteMids failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getFavoriteMids failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error145 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error146 error
		error146, err = error145.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error146
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getFavoriteMids failed: invalid message type")
		return
	}
	result := TalkServiceGetFavoriteMidsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetFriendRequests() (r []*FriendRequest, err error) {
	if err = p.sendGetFriendRequests(); err != nil {
		return
	}
	return p.recvGetFriendRequests()
}

func (p *TalkServiceClient) sendGetFriendRequests() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getFriendRequests", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetFriendRequestsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetFriendRequests() (value []*FriendRequest, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getFriendRequests" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getFriendRequests failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getFriendRequests failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error147 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error148 error
		error148, err = error147.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error148
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getFriendRequests failed: invalid message type")
		return
	}
	result := TalkServiceGetFriendRequestsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetExtendedProfile() (r *ExtendedProfile, err error) {
	if err = p.sendGetExtendedProfile(); err != nil {
		return
	}
	return p.recvGetExtendedProfile()
}

func (p *TalkServiceClient) sendGetExtendedProfile() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getExtendedProfile", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetExtendedProfileArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetExtendedProfile() (value *ExtendedProfile, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getExtendedProfile" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getExtendedProfile failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getExtendedProfile failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error149 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error150 error
		error150, err = error149.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error150
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getExtendedProfile failed: invalid message type")
		return
	}
	result := TalkServiceGetExtendedProfileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetRecentFriendRequests() (r *FriendRequestsInfo, err error) {
	if err = p.sendGetRecentFriendRequests(); err != nil {
		return
	}
	return p.recvGetRecentFriendRequests()
}

func (p *TalkServiceClient) sendGetRecentFriendRequests() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getRecentFriendRequests", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetRecentFriendRequestsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetRecentFriendRequests() (value *FriendRequestsInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getRecentFriendRequests" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getRecentFriendRequests failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getRecentFriendRequests failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error151 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error152 error
		error152, err = error151.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error152
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getRecentFriendRequests failed: invalid message type")
		return
	}
	result := TalkServiceGetRecentFriendRequestsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GroupId
func (p *TalkServiceClient) GetGroup(groupId string) (r *Group, err error) {
	if err = p.sendGetGroup(groupId); err != nil {
		return
	}
	return p.recvGetGroup()
}

func (p *TalkServiceClient) sendGetGroup(groupId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetGroupArgs{
		GroupId: groupId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetGroup() (value *Group, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error153 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error154 error
		error154, err = error153.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error154
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getGroup failed: invalid message type")
		return
	}
	result := TalkServiceGetGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetGroupIdsInvited() (r []string, err error) {
	if err = p.sendGetGroupIdsInvited(); err != nil {
		return
	}
	return p.recvGetGroupIdsInvited()
}

func (p *TalkServiceClient) sendGetGroupIdsInvited() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getGroupIdsInvited", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetGroupIdsInvitedArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetGroupIdsInvited() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getGroupIdsInvited" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getGroupIdsInvited failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getGroupIdsInvited failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error155 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error156 error
		error156, err = error155.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error156
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getGroupIdsInvited failed: invalid message type")
		return
	}
	result := TalkServiceGetGroupIdsInvitedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetGroupIdsJoined() (r []string, err error) {
	if err = p.sendGetGroupIdsJoined(); err != nil {
		return
	}
	return p.recvGetGroupIdsJoined()
}

func (p *TalkServiceClient) sendGetGroupIdsJoined() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getGroupIdsJoined", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetGroupIdsJoinedArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetGroupIdsJoined() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getGroupIdsJoined" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getGroupIdsJoined failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getGroupIdsJoined failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error157 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error158 error
		error158, err = error157.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error158
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getGroupIdsJoined failed: invalid message type")
		return
	}
	result := TalkServiceGetGroupIdsJoinedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GroupIds
func (p *TalkServiceClient) GetGroups(groupIds []string) (r []*Group, err error) {
	if err = p.sendGetGroups(groupIds); err != nil {
		return
	}
	return p.recvGetGroups()
}

func (p *TalkServiceClient) sendGetGroups(groupIds []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getGroups", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetGroupsArgs{
		GroupIds: groupIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetGroups() (value []*Group, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getGroups" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getGroups failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getGroups failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error159 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error160 error
		error160, err = error159.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error160
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getGroups failed: invalid message type")
		return
	}
	result := TalkServiceGetGroupsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GroupId
func (p *TalkServiceClient) GetGroupWithoutMembers(groupId string) (r *Group, err error) {
	if err = p.sendGetGroupWithoutMembers(groupId); err != nil {
		return
	}
	return p.recvGetGroupWithoutMembers()
}

func (p *TalkServiceClient) sendGetGroupWithoutMembers(groupId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getGroupWithoutMembers", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetGroupWithoutMembersArgs{
		GroupId: groupId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetGroupWithoutMembers() (value *Group, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getGroupWithoutMembers" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getGroupWithoutMembers failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getGroupWithoutMembers failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error161 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error162 error
		error162, err = error161.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error162
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getGroupWithoutMembers failed: invalid message type")
		return
	}
	result := TalkServiceGetGroupWithoutMembersResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetLastOpRevision() (r int64, err error) {
	if err = p.sendGetLastOpRevision(); err != nil {
		return
	}
	return p.recvGetLastOpRevision()
}

func (p *TalkServiceClient) sendGetLastOpRevision() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getLastOpRevision", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetLastOpRevisionArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetLastOpRevision() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getLastOpRevision" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getLastOpRevision failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getLastOpRevision failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error163 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error164 error
		error164, err = error163.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error164
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getLastOpRevision failed: invalid message type")
		return
	}
	result := TalkServiceGetLastOpRevisionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetProfile() (r *Profile, err error) {
	if err = p.sendGetProfile(); err != nil {
		return
	}
	return p.recvGetProfile()
}

func (p *TalkServiceClient) sendGetProfile() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getProfile", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetProfileArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetProfile() (value *Profile, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getProfile" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getProfile failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getProfile failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error165 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error166 error
		error166, err = error165.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error166
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getProfile failed: invalid message type")
		return
	}
	result := TalkServiceGetProfileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) GetProximityMatchCandidateList(sessionId string) (r *ProximityMatchCandidateResult_, err error) {
	if err = p.sendGetProximityMatchCandidateList(sessionId); err != nil {
		return
	}
	return p.recvGetProximityMatchCandidateList()
}

func (p *TalkServiceClient) sendGetProximityMatchCandidateList(sessionId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getProximityMatchCandidateList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetProximityMatchCandidateListArgs{
		SessionId: sessionId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetProximityMatchCandidateList() (value *ProximityMatchCandidateResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getProximityMatchCandidateList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getProximityMatchCandidateList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getProximityMatchCandidateList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error167 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error168 error
		error168, err = error167.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error168
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getProximityMatchCandidateList failed: invalid message type")
		return
	}
	result := TalkServiceGetProximityMatchCandidateListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Provider
func (p *TalkServiceClient) GetRSAKeyInfo(provider IdentityProvider) (r *RSAKey, err error) {
	if err = p.sendGetRSAKeyInfo(provider); err != nil {
		return
	}
	return p.recvGetRSAKeyInfo()
}

func (p *TalkServiceClient) sendGetRSAKeyInfo(provider IdentityProvider) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getRSAKeyInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetRSAKeyInfoArgs{
		Provider: provider,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetRSAKeyInfo() (value *RSAKey, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getRSAKeyInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getRSAKeyInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getRSAKeyInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error169 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error170 error
		error170, err = error169.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error170
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getRSAKeyInfo failed: invalid message type")
		return
	}
	result := TalkServiceGetRSAKeyInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetRingbackTone() (r *RingbackTone, err error) {
	if err = p.sendGetRingbackTone(); err != nil {
		return
	}
	return p.recvGetRingbackTone()
}

func (p *TalkServiceClient) sendGetRingbackTone() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getRingbackTone", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetRingbackToneArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetRingbackTone() (value *RingbackTone, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getRingbackTone" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getRingbackTone failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getRingbackTone failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error171 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error172 error
		error172, err = error171.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error172
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getRingbackTone failed: invalid message type")
		return
	}
	result := TalkServiceGetRingbackToneResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RoomId
func (p *TalkServiceClient) GetRoom(roomId string) (r *Room, err error) {
	if err = p.sendGetRoom(roomId); err != nil {
		return
	}
	return p.recvGetRoom()
}

func (p *TalkServiceClient) sendGetRoom(roomId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getRoom", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetRoomArgs{
		RoomId: roomId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetRoom() (value *Room, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getRoom" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getRoom failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getRoom failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error173 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error174 error
		error174, err = error173.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error174
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getRoom failed: invalid message type")
		return
	}
	result := TalkServiceGetRoomResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetServerTime() (r int64, err error) {
	if err = p.sendGetServerTime(); err != nil {
		return
	}
	return p.recvGetServerTime()
}

func (p *TalkServiceClient) sendGetServerTime() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getServerTime", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetServerTimeArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetServerTime() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getServerTime" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getServerTime failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getServerTime failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error175 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error176 error
		error176, err = error175.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error176
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getServerTime failed: invalid message type")
		return
	}
	result := TalkServiceGetServerTimeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetSessions() (r []*LoginSession, err error) {
	if err = p.sendGetSessions(); err != nil {
		return
	}
	return p.recvGetSessions()
}

func (p *TalkServiceClient) sendGetSessions() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSessions", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetSessionsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetSessions() (value []*LoginSession, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getSessions" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSessions failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSessions failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error177 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error178 error
		error178, err = error177.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error178
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSessions failed: invalid message type")
		return
	}
	result := TalkServiceGetSessionsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetSettings() (r *Settings, err error) {
	if err = p.sendGetSettings(); err != nil {
		return
	}
	return p.recvGetSettings()
}

func (p *TalkServiceClient) sendGetSettings() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSettings", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetSettingsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetSettings() (value *Settings, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getSettings" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSettings failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSettings failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error179 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error180 error
		error180, err = error179.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error180
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSettings failed: invalid message type")
		return
	}
	result := TalkServiceGetSettingsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - AttrBitset
func (p *TalkServiceClient) GetSettingsAttributes(attrBitset int32) (r *Settings, err error) {
	if err = p.sendGetSettingsAttributes(attrBitset); err != nil {
		return
	}
	return p.recvGetSettingsAttributes()
}

func (p *TalkServiceClient) sendGetSettingsAttributes(attrBitset int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSettingsAttributes", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetSettingsAttributesArgs{
		AttrBitset: attrBitset,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetSettingsAttributes() (value *Settings, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getSettingsAttributes" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSettingsAttributes failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSettingsAttributes failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error181 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error182 error
		error182, err = error181.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error182
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSettingsAttributes failed: invalid message type")
		return
	}
	result := TalkServiceGetSettingsAttributesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - AttrBitset
func (p *TalkServiceClient) GetSettingsAttributes2(attrBitset int32) (r *Settings, err error) {
	if err = p.sendGetSettingsAttributes2(attrBitset); err != nil {
		return
	}
	return p.recvGetSettingsAttributes2()
}

func (p *TalkServiceClient) sendGetSettingsAttributes2(attrBitset int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSettingsAttributes2", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceGetSettingsAttributes2Args{
		AttrBitset: attrBitset,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetSettingsAttributes2() (value *Settings, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getSettingsAttributes2" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSettingsAttributes2 failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSettingsAttributes2 failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error183 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error184 error
		error184, err = error183.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error184
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSettingsAttributes2 failed: invalid message type")
		return
	}
	result := TalkServiceGetSettingsAttributes2Result{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - GroupId
//  - ContactIds
func (p *TalkServiceClient) InviteIntoGroup(reqSeq int32, groupId string, contactIds []string) (err error) {
	if err = p.sendInviteIntoGroup(reqSeq, groupId, contactIds); err != nil {
		return
	}
	return p.recvInviteIntoGroup()
}

func (p *TalkServiceClient) sendInviteIntoGroup(reqSeq int32, groupId string, contactIds []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("inviteIntoGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceInviteIntoGroupArgs{
		ReqSeq:     reqSeq,
		GroupId:    groupId,
		ContactIds: contactIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvInviteIntoGroup() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "inviteIntoGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "inviteIntoGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "inviteIntoGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error185 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error186 error
		error186, err = error185.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error186
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "inviteIntoGroup failed: invalid message type")
		return
	}
	result := TalkServiceInviteIntoGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - RoomId
//  - ContactIds
func (p *TalkServiceClient) InviteIntoRoom(reqSeq int32, roomId string, contactIds []string) (err error) {
	if err = p.sendInviteIntoRoom(reqSeq, roomId, contactIds); err != nil {
		return
	}
	return p.recvInviteIntoRoom()
}

func (p *TalkServiceClient) sendInviteIntoRoom(reqSeq int32, roomId string, contactIds []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("inviteIntoRoom", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceInviteIntoRoomArgs{
		ReqSeq:     reqSeq,
		RoomId:     roomId,
		ContactIds: contactIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvInviteIntoRoom() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "inviteIntoRoom" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "inviteIntoRoom failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "inviteIntoRoom failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error187 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error188 error
		error188, err = error187.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error188
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "inviteIntoRoom failed: invalid message type")
		return
	}
	result := TalkServiceInviteIntoRoomResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Userid
func (p *TalkServiceClient) IsUseridAvailable(userid string) (r bool, err error) {
	if err = p.sendIsUseridAvailable(userid); err != nil {
		return
	}
	return p.recvIsUseridAvailable()
}

func (p *TalkServiceClient) sendIsUseridAvailable(userid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("isUseridAvailable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceIsUseridAvailableArgs{
		Userid: userid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvIsUseridAvailable() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "isUseridAvailable" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "isUseridAvailable failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "isUseridAvailable failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error189 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error190 error
		error190, err = error189.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error190
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "isUseridAvailable failed: invalid message type")
		return
	}
	result := TalkServiceIsUseridAvailableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - GroupId
//  - ContactIds
func (p *TalkServiceClient) KickoutFromGroup(reqSeq int32, groupId string, contactIds []string) (err error) {
	if err = p.sendKickoutFromGroup(reqSeq, groupId, contactIds); err != nil {
		return
	}
	return p.recvKickoutFromGroup()
}

func (p *TalkServiceClient) sendKickoutFromGroup(reqSeq int32, groupId string, contactIds []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("kickoutFromGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceKickoutFromGroupArgs{
		ReqSeq:     reqSeq,
		GroupId:    groupId,
		ContactIds: contactIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvKickoutFromGroup() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "kickoutFromGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "kickoutFromGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "kickoutFromGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error191 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error192 error
		error192, err = error191.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error192
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "kickoutFromGroup failed: invalid message type")
		return
	}
	result := TalkServiceKickoutFromGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - GroupId
func (p *TalkServiceClient) LeaveGroup(reqSeq int32, groupId string) (err error) {
	if err = p.sendLeaveGroup(reqSeq, groupId); err != nil {
		return
	}
	return p.recvLeaveGroup()
}

func (p *TalkServiceClient) sendLeaveGroup(reqSeq int32, groupId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("leaveGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceLeaveGroupArgs{
		ReqSeq:  reqSeq,
		GroupId: groupId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvLeaveGroup() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "leaveGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "leaveGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "leaveGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error193 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error194 error
		error194, err = error193.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error194
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "leaveGroup failed: invalid message type")
		return
	}
	result := TalkServiceLeaveGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - RoomId
func (p *TalkServiceClient) LeaveRoom(reqSeq int32, roomId string) (err error) {
	if err = p.sendLeaveRoom(reqSeq, roomId); err != nil {
		return
	}
	return p.recvLeaveRoom()
}

func (p *TalkServiceClient) sendLeaveRoom(reqSeq int32, roomId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("leaveRoom", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceLeaveRoomArgs{
		ReqSeq: reqSeq,
		RoomId: roomId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvLeaveRoom() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "leaveRoom" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "leaveRoom failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "leaveRoom failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error195 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error196 error
		error196, err = error195.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error196
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "leaveRoom failed: invalid message type")
		return
	}
	result := TalkServiceLeaveRoomResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - IdentityProvider
//  - Identifier
//  - Password
//  - KeepLoggedIn
//  - AccessLocation
//  - SystemName
//  - Certificate
func (p *TalkServiceClient) LoginWithIdentityCredential(identityProvider IdentityProvider, identifier string, password string, keepLoggedIn bool, accessLocation string, systemName string, certificate string) (r string, err error) {
	if err = p.sendLoginWithIdentityCredential(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate); err != nil {
		return
	}
	return p.recvLoginWithIdentityCredential()
}

func (p *TalkServiceClient) sendLoginWithIdentityCredential(identityProvider IdentityProvider, identifier string, password string, keepLoggedIn bool, accessLocation string, systemName string, certificate string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("loginWithIdentityCredential", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceLoginWithIdentityCredentialArgs{
		IdentityProvider: identityProvider,
		Identifier:       identifier,
		Password:         password,
		KeepLoggedIn:     keepLoggedIn,
		AccessLocation:   accessLocation,
		SystemName:       systemName,
		Certificate:      certificate,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvLoginWithIdentityCredential() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "loginWithIdentityCredential" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "loginWithIdentityCredential failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "loginWithIdentityCredential failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error197 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error198 error
		error198, err = error197.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error198
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "loginWithIdentityCredential failed: invalid message type")
		return
	}
	result := TalkServiceLoginWithIdentityCredentialResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - IdentityProvider
//  - Identifier
//  - Password
//  - KeepLoggedIn
//  - AccessLocation
//  - SystemName
//  - Certificate
func (p *TalkServiceClient) LoginWithIdentityCredentialForCertificate(identityProvider IdentityProvider, identifier string, password string, keepLoggedIn bool, accessLocation string, systemName string, certificate string) (r *LoginResult_, err error) {
	if err = p.sendLoginWithIdentityCredentialForCertificate(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate); err != nil {
		return
	}
	return p.recvLoginWithIdentityCredentialForCertificate()
}

func (p *TalkServiceClient) sendLoginWithIdentityCredentialForCertificate(identityProvider IdentityProvider, identifier string, password string, keepLoggedIn bool, accessLocation string, systemName string, certificate string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("loginWithIdentityCredentialForCertificate", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceLoginWithIdentityCredentialForCertificateArgs{
		IdentityProvider: identityProvider,
		Identifier:       identifier,
		Password:         password,
		KeepLoggedIn:     keepLoggedIn,
		AccessLocation:   accessLocation,
		SystemName:       systemName,
		Certificate:      certificate,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvLoginWithIdentityCredentialForCertificate() (value *LoginResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "loginWithIdentityCredentialForCertificate" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "loginWithIdentityCredentialForCertificate failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "loginWithIdentityCredentialForCertificate failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error199 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error200 error
		error200, err = error199.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error200
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "loginWithIdentityCredentialForCertificate failed: invalid message type")
		return
	}
	result := TalkServiceLoginWithIdentityCredentialForCertificateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Verifier
func (p *TalkServiceClient) LoginWithVerifier(verifier string) (r string, err error) {
	if err = p.sendLoginWithVerifier(verifier); err != nil {
		return
	}
	return p.recvLoginWithVerifier()
}

func (p *TalkServiceClient) sendLoginWithVerifier(verifier string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("loginWithVerifier", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceLoginWithVerifierArgs{
		Verifier: verifier,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvLoginWithVerifier() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "loginWithVerifier" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "loginWithVerifier failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "loginWithVerifier failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error201 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error202 error
		error202, err = error201.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error202
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "loginWithVerifier failed: invalid message type")
		return
	}
	result := TalkServiceLoginWithVerifierResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Verifier
func (p *TalkServiceClient) LoginWithVerifierForCerificate(verifier string) (r *LoginResult_, err error) {
	if err = p.sendLoginWithVerifierForCerificate(verifier); err != nil {
		return
	}
	return p.recvLoginWithVerifierForCerificate()
}

func (p *TalkServiceClient) sendLoginWithVerifierForCerificate(verifier string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("loginWithVerifierForCerificate", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceLoginWithVerifierForCerificateArgs{
		Verifier: verifier,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvLoginWithVerifierForCerificate() (value *LoginResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "loginWithVerifierForCerificate" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "loginWithVerifierForCerificate failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "loginWithVerifierForCerificate failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error203 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error204 error
		error204, err = error203.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error204
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "loginWithVerifierForCerificate failed: invalid message type")
		return
	}
	result := TalkServiceLoginWithVerifierForCerificateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Verifier
func (p *TalkServiceClient) LoginWithVerifierForCertificate(verifier string) (r *LoginResult_, err error) {
	if err = p.sendLoginWithVerifierForCertificate(verifier); err != nil {
		return
	}
	return p.recvLoginWithVerifierForCertificate()
}

func (p *TalkServiceClient) sendLoginWithVerifierForCertificate(verifier string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("loginWithVerifierForCertificate", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceLoginWithVerifierForCertificateArgs{
		Verifier: verifier,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvLoginWithVerifierForCertificate() (value *LoginResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "loginWithVerifierForCertificate" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "loginWithVerifierForCertificate failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "loginWithVerifierForCertificate failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error205 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error206 error
		error206, err = error205.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error206
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "loginWithVerifierForCertificate failed: invalid message type")
		return
	}
	result := TalkServiceLoginWithVerifierForCertificateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) Logout() (err error) {
	if err = p.sendLogout(); err != nil {
		return
	}
	return p.recvLogout()
}

func (p *TalkServiceClient) sendLogout() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("logout", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceLogoutArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvLogout() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "logout" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "logout failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "logout failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error207 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error208 error
		error208, err = error207.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error208
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "logout failed: invalid message type")
		return
	}
	result := TalkServiceLogoutResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - TokenKey
func (p *TalkServiceClient) LogoutSession(tokenKey string) (err error) {
	if err = p.sendLogoutSession(tokenKey); err != nil {
		return
	}
	return p.recvLogoutSession()
}

func (p *TalkServiceClient) sendLogoutSession(tokenKey string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("logoutSession", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceLogoutSessionArgs{
		TokenKey: tokenKey,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvLogoutSession() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "logoutSession" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "logoutSession failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "logoutSession failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error209 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error210 error
		error210, err = error209.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error210
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "logoutSession failed: invalid message type")
		return
	}
	result := TalkServiceLogoutSessionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

func (p *TalkServiceClient) Noop() (err error) {
	if err = p.sendNoop(); err != nil {
		return
	}
	return p.recvNoop()
}

func (p *TalkServiceClient) sendNoop() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("noop", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceNoopArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvNoop() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "noop" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "noop failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "noop failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error211 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error212 error
		error212, err = error211.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error212
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "noop failed: invalid message type")
		return
	}
	result := TalkServiceNoopResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - Userid
func (p *TalkServiceClient) RegisterUserid(reqSeq int32, userid string) (r bool, err error) {
	if err = p.sendRegisterUserid(reqSeq, userid); err != nil {
		return
	}
	return p.recvRegisterUserid()
}

func (p *TalkServiceClient) sendRegisterUserid(reqSeq int32, userid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("registerUserid", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceRegisterUseridArgs{
		ReqSeq: reqSeq,
		Userid: userid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRegisterUserid() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "registerUserid" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "registerUserid failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerUserid failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error213 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error214 error
		error214, err = error213.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error214
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "registerUserid failed: invalid message type")
		return
	}
	result := TalkServiceRegisterUseridResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ExpirationTime
//  - MaxUseCount
func (p *TalkServiceClient) ReissueUserTicket(expirationTime int64, maxUseCount int32) (r string, err error) {
	if err = p.sendReissueUserTicket(expirationTime, maxUseCount); err != nil {
		return
	}
	return p.recvReissueUserTicket()
}

func (p *TalkServiceClient) sendReissueUserTicket(expirationTime int64, maxUseCount int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reissueUserTicket", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceReissueUserTicketArgs{
		ExpirationTime: expirationTime,
		MaxUseCount:    maxUseCount,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvReissueUserTicket() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "reissueUserTicket" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "reissueUserTicket failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reissueUserTicket failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error215 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error216 error
		error216, err = error215.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error216
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reissueUserTicket failed: invalid message type")
		return
	}
	result := TalkServiceReissueUserTicketResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GroupId
func (p *TalkServiceClient) ReissueGroupTicket(groupId string) (r string, err error) {
	if err = p.sendReissueGroupTicket(groupId); err != nil {
		return
	}
	return p.recvReissueGroupTicket()
}

func (p *TalkServiceClient) sendReissueGroupTicket(groupId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reissueGroupTicket", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceReissueGroupTicketArgs{
		GroupId: groupId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvReissueGroupTicket() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "reissueGroupTicket" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "reissueGroupTicket failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reissueGroupTicket failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error217 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error218 error
		error218, err = error217.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error218
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reissueGroupTicket failed: invalid message type")
		return
	}
	result := TalkServiceReissueGroupTicketResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - GroupId
func (p *TalkServiceClient) RejectGroupInvitation(reqSeq int32, groupId string) (err error) {
	if err = p.sendRejectGroupInvitation(reqSeq, groupId); err != nil {
		return
	}
	return p.recvRejectGroupInvitation()
}

func (p *TalkServiceClient) sendRejectGroupInvitation(reqSeq int32, groupId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rejectGroupInvitation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceRejectGroupInvitationArgs{
		ReqSeq:  reqSeq,
		GroupId: groupId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRejectGroupInvitation() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rejectGroupInvitation" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rejectGroupInvitation failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rejectGroupInvitation failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error219 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error220 error
		error220, err = error219.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error220
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rejectGroupInvitation failed: invalid message type")
		return
	}
	result := TalkServiceRejectGroupInvitationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

func (p *TalkServiceClient) ReleaseSession() (err error) {
	if err = p.sendReleaseSession(); err != nil {
		return
	}
	return p.recvReleaseSession()
}

func (p *TalkServiceClient) sendReleaseSession() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("releaseSession", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceReleaseSessionArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvReleaseSession() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "releaseSession" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "releaseSession failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "releaseSession failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error221 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error222 error
		error222, err = error221.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error222
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "releaseSession failed: invalid message type")
		return
	}
	result := TalkServiceReleaseSessionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Seq
//  - LastMessageId
func (p *TalkServiceClient) RemoveAllMessages(seq int32, lastMessageId string) (err error) {
	if err = p.sendRemoveAllMessages(seq, lastMessageId); err != nil {
		return
	}
	return p.recvRemoveAllMessages()
}

func (p *TalkServiceClient) sendRemoveAllMessages(seq int32, lastMessageId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("removeAllMessages", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceRemoveAllMessagesArgs{
		Seq:           seq,
		LastMessageId: lastMessageId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRemoveAllMessages() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "removeAllMessages" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "removeAllMessages failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "removeAllMessages failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error223 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error224 error
		error224, err = error223.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error224
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeAllMessages failed: invalid message type")
		return
	}
	result := TalkServiceRemoveAllMessagesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Direction
//  - MidOrEMid
func (p *TalkServiceClient) RemoveFriendRequest(direction DirectionType, midOrEMid string) (err error) {
	if err = p.sendRemoveFriendRequest(direction, midOrEMid); err != nil {
		return
	}
	return p.recvRemoveFriendRequest()
}

func (p *TalkServiceClient) sendRemoveFriendRequest(direction DirectionType, midOrEMid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("removeFriendRequest", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceRemoveFriendRequestArgs{
		Direction: direction,
		MidOrEMid: midOrEMid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRemoveFriendRequest() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "removeFriendRequest" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "removeFriendRequest failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "removeFriendRequest failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error225 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error226 error
		error226, err = error225.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error226
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeFriendRequest failed: invalid message type")
		return
	}
	result := TalkServiceRemoveFriendRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Seq
//  - Consumer
//  - LastMessageId
//  - SessionId
func (p *TalkServiceClient) SendChatChecked(seq int32, consumer string, lastMessageId string, sessionId float64) (err error) {
	if err = p.sendSendChatChecked(seq, consumer, lastMessageId, sessionId); err != nil {
		return
	}
	return p.recvSendChatChecked()
}

func (p *TalkServiceClient) sendSendChatChecked(seq int32, consumer string, lastMessageId string, sessionId float64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sendChatChecked", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceSendChatCheckedArgs{
		Seq:           seq,
		Consumer:      consumer,
		LastMessageId: lastMessageId,
		SessionId:     sessionId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSendChatChecked() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sendChatChecked" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sendChatChecked failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sendChatChecked failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error227 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error228 error
		error228, err = error227.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error228
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sendChatChecked failed: invalid message type")
		return
	}
	result := TalkServiceSendChatCheckedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Seq
//  - Consumer
//  - LastMessageId
//  - SessionId
func (p *TalkServiceClient) SendChatRemoved(seq int32, consumer string, lastMessageId string, sessionId float64) (err error) {
	if err = p.sendSendChatRemoved(seq, consumer, lastMessageId, sessionId); err != nil {
		return
	}
	return p.recvSendChatRemoved()
}

func (p *TalkServiceClient) sendSendChatRemoved(seq int32, consumer string, lastMessageId string, sessionId float64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sendChatRemoved", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceSendChatRemovedArgs{
		Seq:           seq,
		Consumer:      consumer,
		LastMessageId: lastMessageId,
		SessionId:     sessionId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSendChatRemoved() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sendChatRemoved" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sendChatRemoved failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sendChatRemoved failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error229 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error230 error
		error230, err = error229.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error230
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sendChatRemoved failed: invalid message type")
		return
	}
	result := TalkServiceSendChatRemovedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Seq
//  - Consumer
//  - MessageId
func (p *TalkServiceClient) SendContentReceipt(seq int32, consumer string, messageId string) (err error) {
	if err = p.sendSendContentReceipt(seq, consumer, messageId); err != nil {
		return
	}
	return p.recvSendContentReceipt()
}

func (p *TalkServiceClient) sendSendContentReceipt(seq int32, consumer string, messageId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sendContentReceipt", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceSendContentReceiptArgs{
		Seq:       seq,
		Consumer:  consumer,
		MessageId: messageId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSendContentReceipt() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sendContentReceipt" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sendContentReceipt failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sendContentReceipt failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error231 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error232 error
		error232, err = error231.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error232
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sendContentReceipt failed: invalid message type")
		return
	}
	result := TalkServiceSendContentReceiptResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Text
func (p *TalkServiceClient) SendEchoPush(text string) (err error) {
	if err = p.sendSendEchoPush(text); err != nil {
		return
	}
	return p.recvSendEchoPush()
}

func (p *TalkServiceClient) sendSendEchoPush(text string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sendEchoPush", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceSendEchoPushArgs{
		Text: text,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSendEchoPush() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sendEchoPush" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sendEchoPush failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sendEchoPush failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error233 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error234 error
		error234, err = error233.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error234
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sendEchoPush failed: invalid message type")
		return
	}
	result := TalkServiceSendEchoPushResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Seq
//  - Message
func (p *TalkServiceClient) SendMessage(seq int32, message *Message) (r *Message, err error) {
	if err = p.sendSendMessage(seq, message); err != nil {
		return
	}
	return p.recvSendMessage()
}

func (p *TalkServiceClient) sendSendMessage(seq int32, message *Message) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sendMessage", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceSendMessageArgs{
		Seq:     seq,
		Message: message,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSendMessage() (value *Message, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sendMessage" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sendMessage failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sendMessage failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error235 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error236 error
		error236, err = error235.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error236
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sendMessage failed: invalid message type")
		return
	}
	result := TalkServiceSendMessageResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) SendMessageToMyHome() (r *Message, err error) {
	if err = p.sendSendMessageToMyHome(); err != nil {
		return
	}
	return p.recvSendMessageToMyHome()
}

func (p *TalkServiceClient) sendSendMessageToMyHome() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sendMessageToMyHome", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceSendMessageToMyHomeArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSendMessageToMyHome() (value *Message, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sendMessageToMyHome" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sendMessageToMyHome failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sendMessageToMyHome failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error237 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error238 error
		error238, err = error237.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error238
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sendMessageToMyHome failed: invalid message type")
		return
	}
	result := TalkServiceSendMessageToMyHomeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Requests
func (p *TalkServiceClient) SendPostback(requests *SendPostbackRequest) (err error) {
	if err = p.sendSendPostback(requests); err != nil {
		return
	}
	return p.recvSendPostback()
}

func (p *TalkServiceClient) sendSendPostback(requests *SendPostbackRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sendPostback", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceSendPostbackArgs{
		Requests: requests,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSendPostback() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sendPostback" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sendPostback failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sendPostback failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error239 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error240 error
		error240, err = error239.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error240
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sendPostback failed: invalid message type")
		return
	}
	result := TalkServiceSendPostbackResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - ID
func (p *TalkServiceClient) UnblockContact(reqSeq int32, id string) (err error) {
	if err = p.sendUnblockContact(reqSeq, id); err != nil {
		return
	}
	return p.recvUnblockContact()
}

func (p *TalkServiceClient) sendUnblockContact(reqSeq int32, id string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("unblockContact", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceUnblockContactArgs{
		ReqSeq: reqSeq,
		ID:     id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUnblockContact() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "unblockContact" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "unblockContact failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "unblockContact failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error241 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error242 error
		error242, err = error241.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error242
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "unblockContact failed: invalid message type")
		return
	}
	result := TalkServiceUnblockContactResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - ID
func (p *TalkServiceClient) UnblockRecommendation(reqSeq int32, id string) (err error) {
	if err = p.sendUnblockRecommendation(reqSeq, id); err != nil {
		return
	}
	return p.recvUnblockRecommendation()
}

func (p *TalkServiceClient) sendUnblockRecommendation(reqSeq int32, id string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("unblockRecommendation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceUnblockRecommendationArgs{
		ReqSeq: reqSeq,
		ID:     id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUnblockRecommendation() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "unblockRecommendation" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "unblockRecommendation failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "unblockRecommendation failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error243 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error244 error
		error244, err = error243.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error244
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "unblockRecommendation failed: invalid message type")
		return
	}
	result := TalkServiceUnblockRecommendationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - Mid
//  - Flag
//  - Value
func (p *TalkServiceClient) UpdateContactSetting(reqSeq int32, mid string, flag ContactSetting, value string) (err error) {
	if err = p.sendUpdateContactSetting(reqSeq, mid, flag, value); err != nil {
		return
	}
	return p.recvUpdateContactSetting()
}

func (p *TalkServiceClient) sendUpdateContactSetting(reqSeq int32, mid string, flag ContactSetting, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateContactSetting", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceUpdateContactSettingArgs{
		ReqSeq: reqSeq,
		Mid:    mid,
		Flag:   flag,
		Value:  value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateContactSetting() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateContactSetting" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateContactSetting failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateContactSetting failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error245 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error246 error
		error246, err = error245.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error246
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateContactSetting failed: invalid message type")
		return
	}
	result := TalkServiceUpdateContactSettingResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - Attr
//  - ExtendedProfile
func (p *TalkServiceClient) UpdateExtendedProfileAttribute(reqSeq int32, attr ExtendAttr, extendedProfile *ExtendedProfile) (err error) {
	if err = p.sendUpdateExtendedProfileAttribute(reqSeq, attr, extendedProfile); err != nil {
		return
	}
	return p.recvUpdateExtendedProfileAttribute()
}

func (p *TalkServiceClient) sendUpdateExtendedProfileAttribute(reqSeq int32, attr ExtendAttr, extendedProfile *ExtendedProfile) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateExtendedProfileAttribute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceUpdateExtendedProfileAttributeArgs{
		ReqSeq:          reqSeq,
		Attr:            attr,
		ExtendedProfile: extendedProfile,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateExtendedProfileAttribute() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateExtendedProfileAttribute" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateExtendedProfileAttribute failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateExtendedProfileAttribute failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error247 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error248 error
		error248, err = error247.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error248
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateExtendedProfileAttribute failed: invalid message type")
		return
	}
	result := TalkServiceUpdateExtendedProfileAttributeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - Group
func (p *TalkServiceClient) UpdateGroup(reqSeq int32, group *Group) (err error) {
	if err = p.sendUpdateGroup(reqSeq, group); err != nil {
		return
	}
	return p.recvUpdateGroup()
}

func (p *TalkServiceClient) sendUpdateGroup(reqSeq int32, group *Group) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceUpdateGroupArgs{
		ReqSeq: reqSeq,
		Group:  group,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateGroup() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error249 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error250 error
		error250, err = error249.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error250
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateGroup failed: invalid message type")
		return
	}
	result := TalkServiceUpdateGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - GroupMid
//  - UpdatedAttrs
func (p *TalkServiceClient) UpdateGroupPreferenceAttribute(reqSeq int32, groupMid string, updatedAttrs map[Preference]string) (err error) {
	if err = p.sendUpdateGroupPreferenceAttribute(reqSeq, groupMid, updatedAttrs); err != nil {
		return
	}
	return p.recvUpdateGroupPreferenceAttribute()
}

func (p *TalkServiceClient) sendUpdateGroupPreferenceAttribute(reqSeq int32, groupMid string, updatedAttrs map[Preference]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateGroupPreferenceAttribute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceUpdateGroupPreferenceAttributeArgs{
		ReqSeq:       reqSeq,
		GroupMid:     groupMid,
		UpdatedAttrs: updatedAttrs,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateGroupPreferenceAttribute() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateGroupPreferenceAttribute" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateGroupPreferenceAttribute failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateGroupPreferenceAttribute failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error251 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error252 error
		error252, err = error251.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error252
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateGroupPreferenceAttribute failed: invalid message type")
		return
	}
	result := TalkServiceUpdateGroupPreferenceAttributeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Token
//  - Type
func (p *TalkServiceClient) UpdateNotificationToken(token string, type_a1 NotificationType) (err error) {
	if err = p.sendUpdateNotificationToken(token, type_a1); err != nil {
		return
	}
	return p.recvUpdateNotificationToken()
}

func (p *TalkServiceClient) sendUpdateNotificationToken(token string, type_a1 NotificationType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateNotificationToken", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceUpdateNotificationTokenArgs{
		Token: token,
		Type:  type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateNotificationToken() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateNotificationToken" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateNotificationToken failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateNotificationToken failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error253 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error254 error
		error254, err = error253.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error254
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateNotificationToken failed: invalid message type")
		return
	}
	result := TalkServiceUpdateNotificationTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - Profile
func (p *TalkServiceClient) UpdateProfile(reqSeq int32, profile *Profile) (err error) {
	if err = p.sendUpdateProfile(reqSeq, profile); err != nil {
		return
	}
	return p.recvUpdateProfile()
}

func (p *TalkServiceClient) sendUpdateProfile(reqSeq int32, profile *Profile) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateProfile", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceUpdateProfileArgs{
		ReqSeq:  reqSeq,
		Profile: profile,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateProfile() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateProfile" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateProfile failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateProfile failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error255 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error256 error
		error256, err = error255.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error256
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateProfile failed: invalid message type")
		return
	}
	result := TalkServiceUpdateProfileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - Attr
//  - Value
func (p *TalkServiceClient) UpdateProfileAttribute(reqSeq int32, attr ProfileAttribute, value string) (err error) {
	if err = p.sendUpdateProfileAttribute(reqSeq, attr, value); err != nil {
		return
	}
	return p.recvUpdateProfileAttribute()
}

func (p *TalkServiceClient) sendUpdateProfileAttribute(reqSeq int32, attr ProfileAttribute, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateProfileAttribute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceUpdateProfileAttributeArgs{
		ReqSeq: reqSeq,
		Attr:   attr,
		Value:  value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateProfileAttribute() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateProfileAttribute" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateProfileAttribute failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateProfileAttribute failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error257 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error258 error
		error258, err = error257.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error258
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateProfileAttribute failed: invalid message type")
		return
	}
	result := TalkServiceUpdateProfileAttributeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - Settings
func (p *TalkServiceClient) UpdateSettings(reqSeq int32, settings *Settings) (err error) {
	if err = p.sendUpdateSettings(reqSeq, settings); err != nil {
		return
	}
	return p.recvUpdateSettings()
}

func (p *TalkServiceClient) sendUpdateSettings(reqSeq int32, settings *Settings) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateSettings", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceUpdateSettingsArgs{
		ReqSeq:   reqSeq,
		Settings: settings,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateSettings() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateSettings" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateSettings failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateSettings failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error259 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error260 error
		error260, err = error259.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error260
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateSettings failed: invalid message type")
		return
	}
	result := TalkServiceUpdateSettingsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - Settings
func (p *TalkServiceClient) UpdateSettings2(reqSeq int32, settings *Settings) (r int32, err error) {
	if err = p.sendUpdateSettings2(reqSeq, settings); err != nil {
		return
	}
	return p.recvUpdateSettings2()
}

func (p *TalkServiceClient) sendUpdateSettings2(reqSeq int32, settings *Settings) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateSettings2", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceUpdateSettings2Args{
		ReqSeq:   reqSeq,
		Settings: settings,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateSettings2() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateSettings2" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateSettings2 failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateSettings2 failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error261 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error262 error
		error262, err = error261.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error262
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateSettings2 failed: invalid message type")
		return
	}
	result := TalkServiceUpdateSettings2Result{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - Attr
//  - Value
func (p *TalkServiceClient) UpdateSettingsAttribute(reqSeq int32, attr SettingsAttribute, value string) (err error) {
	if err = p.sendUpdateSettingsAttribute(reqSeq, attr, value); err != nil {
		return
	}
	return p.recvUpdateSettingsAttribute()
}

func (p *TalkServiceClient) sendUpdateSettingsAttribute(reqSeq int32, attr SettingsAttribute, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateSettingsAttribute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceUpdateSettingsAttributeArgs{
		ReqSeq: reqSeq,
		Attr:   attr,
		Value:  value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateSettingsAttribute() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateSettingsAttribute" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateSettingsAttribute failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateSettingsAttribute failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error263 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error264 error
		error264, err = error263.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error264
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateSettingsAttribute failed: invalid message type")
		return
	}
	result := TalkServiceUpdateSettingsAttributeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - AttrBitset
//  - Settings
func (p *TalkServiceClient) UpdateSettingsAttributes(reqSeq int32, attrBitset int32, settings *Settings) (r int32, err error) {
	if err = p.sendUpdateSettingsAttributes(reqSeq, attrBitset, settings); err != nil {
		return
	}
	return p.recvUpdateSettingsAttributes()
}

func (p *TalkServiceClient) sendUpdateSettingsAttributes(reqSeq int32, attrBitset int32, settings *Settings) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateSettingsAttributes", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TalkServiceUpdateSettingsAttributesArgs{
		ReqSeq:     reqSeq,
		AttrBitset: attrBitset,
		Settings:   settings,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateSettingsAttributes() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateSettingsAttributes" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateSettingsAttributes failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateSettingsAttributes failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error265 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error266 error
		error266, err = error265.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error266
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateSettingsAttributes failed: invalid message type")
		return
	}
	result := TalkServiceUpdateSettingsAttributesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

type TalkServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      TalkService
}

func (p *TalkServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *TalkServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *TalkServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewTalkServiceProcessor(handler TalkService) *TalkServiceProcessor {

	self267 := &TalkServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self267.processorMap["acceptGroupInvitation"] = &talkServiceProcessorAcceptGroupInvitation{handler: handler}
	self267.processorMap["acceptGroupInvitationByTicket"] = &talkServiceProcessorAcceptGroupInvitationByTicket{handler: handler}
	self267.processorMap["acceptProximityMatches"] = &talkServiceProcessorAcceptProximityMatches{handler: handler}
	self267.processorMap["acquireCallRoute"] = &talkServiceProcessorAcquireCallRoute{handler: handler}
	self267.processorMap["acquireCallTicket"] = &talkServiceProcessorAcquireCallTicket{handler: handler}
	self267.processorMap["acquireEncryptedAccessToken"] = &talkServiceProcessorAcquireEncryptedAccessToken{handler: handler}
	self267.processorMap["blockContact"] = &talkServiceProcessorBlockContact{handler: handler}
	self267.processorMap["blockRecommendation"] = &talkServiceProcessorBlockRecommendation{handler: handler}
	self267.processorMap["cancelGroupInvitation"] = &talkServiceProcessorCancelGroupInvitation{handler: handler}
	self267.processorMap["changeVerificationMethod"] = &talkServiceProcessorChangeVerificationMethod{handler: handler}
	self267.processorMap["clearIdentityCredential"] = &talkServiceProcessorClearIdentityCredential{handler: handler}
	self267.processorMap["clearMessageBox"] = &talkServiceProcessorClearMessageBox{handler: handler}
	self267.processorMap["closeProximityMatch"] = &talkServiceProcessorCloseProximityMatch{handler: handler}
	self267.processorMap["confirmEmail"] = &talkServiceProcessorConfirmEmail{handler: handler}
	self267.processorMap["createAccountMigrationPincodeSession"] = &talkServiceProcessorCreateAccountMigrationPincodeSession{handler: handler}
	self267.processorMap["createGroup"] = &talkServiceProcessorCreateGroup{handler: handler}
	self267.processorMap["createQrcodeBase64Image"] = &talkServiceProcessorCreateQrcodeBase64Image{handler: handler}
	self267.processorMap["createRoom"] = &talkServiceProcessorCreateRoom{handler: handler}
	self267.processorMap["disableNearby"] = &talkServiceProcessorDisableNearby{handler: handler}
	self267.processorMap["fetchOperations"] = &talkServiceProcessorFetchOperations{handler: handler}
	self267.processorMap["fetchOps"] = &talkServiceProcessorFetchOps{handler: handler}
	self267.processorMap["findContactsByEmail"] = &talkServiceProcessorFindContactsByEmail{handler: handler}
	self267.processorMap["findContactsByPhone"] = &talkServiceProcessorFindContactsByPhone{handler: handler}
	self267.processorMap["findAndAddContactsByEmail"] = &talkServiceProcessorFindAndAddContactsByEmail{handler: handler}
	self267.processorMap["findAndAddContactsByMid"] = &talkServiceProcessorFindAndAddContactsByMid{handler: handler}
	self267.processorMap["findAndAddContactsByPhone"] = &talkServiceProcessorFindAndAddContactsByPhone{handler: handler}
	self267.processorMap["findAndAddContactsByUserid"] = &talkServiceProcessorFindAndAddContactsByUserid{handler: handler}
	self267.processorMap["findContactByMetaTag"] = &talkServiceProcessorFindContactByMetaTag{handler: handler}
	self267.processorMap["findContactByUserTicket"] = &talkServiceProcessorFindContactByUserTicket{handler: handler}
	self267.processorMap["findGroupByTicket"] = &talkServiceProcessorFindGroupByTicket{handler: handler}
	self267.processorMap["finishUpdateVerification"] = &talkServiceProcessorFinishUpdateVerification{handler: handler}
	self267.processorMap["generateUserTicket"] = &talkServiceProcessorGenerateUserTicket{handler: handler}
	self267.processorMap["getAcceptedProximityMatches"] = &talkServiceProcessorGetAcceptedProximityMatches{handler: handler}
	self267.processorMap["getAllContactIds"] = &talkServiceProcessorGetAllContactIds{handler: handler}
	self267.processorMap["getAnalyticsInfo"] = &talkServiceProcessorGetAnalyticsInfo{handler: handler}
	self267.processorMap["getAuthQrcode"] = &talkServiceProcessorGetAuthQrcode{handler: handler}
	self267.processorMap["getBlockedContactIds"] = &talkServiceProcessorGetBlockedContactIds{handler: handler}
	self267.processorMap["getBlockedContactIdsByRange"] = &talkServiceProcessorGetBlockedContactIdsByRange{handler: handler}
	self267.processorMap["getBlockedRecommendationIds"] = &talkServiceProcessorGetBlockedRecommendationIds{handler: handler}
	self267.processorMap["getCompactGroup"] = &talkServiceProcessorGetCompactGroup{handler: handler}
	self267.processorMap["getConfigurations"] = &talkServiceProcessorGetConfigurations{handler: handler}
	self267.processorMap["getContact"] = &talkServiceProcessorGetContact{handler: handler}
	self267.processorMap["getContactRegistration"] = &talkServiceProcessorGetContactRegistration{handler: handler}
	self267.processorMap["getContacts"] = &talkServiceProcessorGetContacts{handler: handler}
	self267.processorMap["getCountryWithRequestIp"] = &talkServiceProcessorGetCountryWithRequestIp{handler: handler}
	self267.processorMap["getFavoriteMids"] = &talkServiceProcessorGetFavoriteMids{handler: handler}
	self267.processorMap["getFriendRequests"] = &talkServiceProcessorGetFriendRequests{handler: handler}
	self267.processorMap["getExtendedProfile"] = &talkServiceProcessorGetExtendedProfile{handler: handler}
	self267.processorMap["getRecentFriendRequests"] = &talkServiceProcessorGetRecentFriendRequests{handler: handler}
	self267.processorMap["getGroup"] = &talkServiceProcessorGetGroup{handler: handler}
	self267.processorMap["getGroupIdsInvited"] = &talkServiceProcessorGetGroupIdsInvited{handler: handler}
	self267.processorMap["getGroupIdsJoined"] = &talkServiceProcessorGetGroupIdsJoined{handler: handler}
	self267.processorMap["getGroups"] = &talkServiceProcessorGetGroups{handler: handler}
	self267.processorMap["getGroupWithoutMembers"] = &talkServiceProcessorGetGroupWithoutMembers{handler: handler}
	self267.processorMap["getLastOpRevision"] = &talkServiceProcessorGetLastOpRevision{handler: handler}
	self267.processorMap["getProfile"] = &talkServiceProcessorGetProfile{handler: handler}
	self267.processorMap["getProximityMatchCandidateList"] = &talkServiceProcessorGetProximityMatchCandidateList{handler: handler}
	self267.processorMap["getRSAKeyInfo"] = &talkServiceProcessorGetRSAKeyInfo{handler: handler}
	self267.processorMap["getRingbackTone"] = &talkServiceProcessorGetRingbackTone{handler: handler}
	self267.processorMap["getRoom"] = &talkServiceProcessorGetRoom{handler: handler}
	self267.processorMap["getServerTime"] = &talkServiceProcessorGetServerTime{handler: handler}
	self267.processorMap["getSessions"] = &talkServiceProcessorGetSessions{handler: handler}
	self267.processorMap["getSettings"] = &talkServiceProcessorGetSettings{handler: handler}
	self267.processorMap["getSettingsAttributes"] = &talkServiceProcessorGetSettingsAttributes{handler: handler}
	self267.processorMap["getSettingsAttributes2"] = &talkServiceProcessorGetSettingsAttributes2{handler: handler}
	self267.processorMap["inviteIntoGroup"] = &talkServiceProcessorInviteIntoGroup{handler: handler}
	self267.processorMap["inviteIntoRoom"] = &talkServiceProcessorInviteIntoRoom{handler: handler}
	self267.processorMap["isUseridAvailable"] = &talkServiceProcessorIsUseridAvailable{handler: handler}
	self267.processorMap["kickoutFromGroup"] = &talkServiceProcessorKickoutFromGroup{handler: handler}
	self267.processorMap["leaveGroup"] = &talkServiceProcessorLeaveGroup{handler: handler}
	self267.processorMap["leaveRoom"] = &talkServiceProcessorLeaveRoom{handler: handler}
	self267.processorMap["loginWithIdentityCredential"] = &talkServiceProcessorLoginWithIdentityCredential{handler: handler}
	self267.processorMap["loginWithIdentityCredentialForCertificate"] = &talkServiceProcessorLoginWithIdentityCredentialForCertificate{handler: handler}
	self267.processorMap["loginWithVerifier"] = &talkServiceProcessorLoginWithVerifier{handler: handler}
	self267.processorMap["loginWithVerifierForCerificate"] = &talkServiceProcessorLoginWithVerifierForCerificate{handler: handler}
	self267.processorMap["loginWithVerifierForCertificate"] = &talkServiceProcessorLoginWithVerifierForCertificate{handler: handler}
	self267.processorMap["logout"] = &talkServiceProcessorLogout{handler: handler}
	self267.processorMap["logoutSession"] = &talkServiceProcessorLogoutSession{handler: handler}
	self267.processorMap["noop"] = &talkServiceProcessorNoop{handler: handler}
	self267.processorMap["registerUserid"] = &talkServiceProcessorRegisterUserid{handler: handler}
	self267.processorMap["reissueUserTicket"] = &talkServiceProcessorReissueUserTicket{handler: handler}
	self267.processorMap["reissueGroupTicket"] = &talkServiceProcessorReissueGroupTicket{handler: handler}
	self267.processorMap["rejectGroupInvitation"] = &talkServiceProcessorRejectGroupInvitation{handler: handler}
	self267.processorMap["releaseSession"] = &talkServiceProcessorReleaseSession{handler: handler}
	self267.processorMap["removeAllMessages"] = &talkServiceProcessorRemoveAllMessages{handler: handler}
	self267.processorMap["removeFriendRequest"] = &talkServiceProcessorRemoveFriendRequest{handler: handler}
	self267.processorMap["sendChatChecked"] = &talkServiceProcessorSendChatChecked{handler: handler}
	self267.processorMap["sendChatRemoved"] = &talkServiceProcessorSendChatRemoved{handler: handler}
	self267.processorMap["sendContentReceipt"] = &talkServiceProcessorSendContentReceipt{handler: handler}
	self267.processorMap["sendEchoPush"] = &talkServiceProcessorSendEchoPush{handler: handler}
	self267.processorMap["sendMessage"] = &talkServiceProcessorSendMessage{handler: handler}
	self267.processorMap["sendMessageToMyHome"] = &talkServiceProcessorSendMessageToMyHome{handler: handler}
	self267.processorMap["sendPostback"] = &talkServiceProcessorSendPostback{handler: handler}
	self267.processorMap["unblockContact"] = &talkServiceProcessorUnblockContact{handler: handler}
	self267.processorMap["unblockRecommendation"] = &talkServiceProcessorUnblockRecommendation{handler: handler}
	self267.processorMap["updateContactSetting"] = &talkServiceProcessorUpdateContactSetting{handler: handler}
	self267.processorMap["updateExtendedProfileAttribute"] = &talkServiceProcessorUpdateExtendedProfileAttribute{handler: handler}
	self267.processorMap["updateGroup"] = &talkServiceProcessorUpdateGroup{handler: handler}
	self267.processorMap["updateGroupPreferenceAttribute"] = &talkServiceProcessorUpdateGroupPreferenceAttribute{handler: handler}
	self267.processorMap["updateNotificationToken"] = &talkServiceProcessorUpdateNotificationToken{handler: handler}
	self267.processorMap["updateProfile"] = &talkServiceProcessorUpdateProfile{handler: handler}
	self267.processorMap["updateProfileAttribute"] = &talkServiceProcessorUpdateProfileAttribute{handler: handler}
	self267.processorMap["updateSettings"] = &talkServiceProcessorUpdateSettings{handler: handler}
	self267.processorMap["updateSettings2"] = &talkServiceProcessorUpdateSettings2{handler: handler}
	self267.processorMap["updateSettingsAttribute"] = &talkServiceProcessorUpdateSettingsAttribute{handler: handler}
	self267.processorMap["updateSettingsAttributes"] = &talkServiceProcessorUpdateSettingsAttributes{handler: handler}
	return self267
}

func (p *TalkServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x268 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x268.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x268

}

type talkServiceProcessorAcceptGroupInvitation struct {
	handler TalkService
}

func (p *talkServiceProcessorAcceptGroupInvitation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceAcceptGroupInvitationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("acceptGroupInvitation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceAcceptGroupInvitationResult{}
	var err2 error
	if err2 = p.handler.AcceptGroupInvitation(args.ReqSeq, args.GroupId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptGroupInvitation: "+err2.Error())
			oprot.WriteMessageBegin("acceptGroupInvitation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("acceptGroupInvitation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorAcceptGroupInvitationByTicket struct {
	handler TalkService
}

func (p *talkServiceProcessorAcceptGroupInvitationByTicket) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceAcceptGroupInvitationByTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("acceptGroupInvitationByTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceAcceptGroupInvitationByTicketResult{}
	var err2 error
	if err2 = p.handler.AcceptGroupInvitationByTicket(args.ReqSeq, args.GroupId, args.TicketId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptGroupInvitationByTicket: "+err2.Error())
			oprot.WriteMessageBegin("acceptGroupInvitationByTicket", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("acceptGroupInvitationByTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorAcceptProximityMatches struct {
	handler TalkService
}

func (p *talkServiceProcessorAcceptProximityMatches) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceAcceptProximityMatchesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("acceptProximityMatches", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceAcceptProximityMatchesResult{}
	var err2 error
	if err2 = p.handler.AcceptProximityMatches(args.SessionId, args.Ids); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptProximityMatches: "+err2.Error())
			oprot.WriteMessageBegin("acceptProximityMatches", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("acceptProximityMatches", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorAcquireCallRoute struct {
	handler TalkService
}

func (p *talkServiceProcessorAcquireCallRoute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceAcquireCallRouteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("acquireCallRoute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceAcquireCallRouteResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.AcquireCallRoute(args.To); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acquireCallRoute: "+err2.Error())
			oprot.WriteMessageBegin("acquireCallRoute", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("acquireCallRoute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorAcquireCallTicket struct {
	handler TalkService
}

func (p *talkServiceProcessorAcquireCallTicket) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceAcquireCallTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("acquireCallTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceAcquireCallTicketResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.AcquireCallTicket(args.To); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acquireCallTicket: "+err2.Error())
			oprot.WriteMessageBegin("acquireCallTicket", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("acquireCallTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorAcquireEncryptedAccessToken struct {
	handler TalkService
}

func (p *talkServiceProcessorAcquireEncryptedAccessToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceAcquireEncryptedAccessTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("acquireEncryptedAccessToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceAcquireEncryptedAccessTokenResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.AcquireEncryptedAccessToken(args.FeatureType); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acquireEncryptedAccessToken: "+err2.Error())
			oprot.WriteMessageBegin("acquireEncryptedAccessToken", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("acquireEncryptedAccessToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorBlockContact struct {
	handler TalkService
}

func (p *talkServiceProcessorBlockContact) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceBlockContactArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("blockContact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceBlockContactResult{}
	var err2 error
	if err2 = p.handler.BlockContact(args.ReqSeq, args.ID); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing blockContact: "+err2.Error())
			oprot.WriteMessageBegin("blockContact", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("blockContact", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorBlockRecommendation struct {
	handler TalkService
}

func (p *talkServiceProcessorBlockRecommendation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceBlockRecommendationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("blockRecommendation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceBlockRecommendationResult{}
	var err2 error
	if err2 = p.handler.BlockRecommendation(args.ReqSeq, args.ID); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing blockRecommendation: "+err2.Error())
			oprot.WriteMessageBegin("blockRecommendation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("blockRecommendation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorCancelGroupInvitation struct {
	handler TalkService
}

func (p *talkServiceProcessorCancelGroupInvitation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceCancelGroupInvitationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("cancelGroupInvitation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceCancelGroupInvitationResult{}
	var err2 error
	if err2 = p.handler.CancelGroupInvitation(args.ReqSeq, args.GroupId, args.ContactIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancelGroupInvitation: "+err2.Error())
			oprot.WriteMessageBegin("cancelGroupInvitation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("cancelGroupInvitation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorChangeVerificationMethod struct {
	handler TalkService
}

func (p *talkServiceProcessorChangeVerificationMethod) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceChangeVerificationMethodArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("changeVerificationMethod", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceChangeVerificationMethodResult{}
	var retval *VerificationSessionData
	var err2 error
	if retval, err2 = p.handler.ChangeVerificationMethod(args.SessionId, args.Method); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changeVerificationMethod: "+err2.Error())
			oprot.WriteMessageBegin("changeVerificationMethod", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("changeVerificationMethod", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorClearIdentityCredential struct {
	handler TalkService
}

func (p *talkServiceProcessorClearIdentityCredential) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceClearIdentityCredentialArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("clearIdentityCredential", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceClearIdentityCredentialResult{}
	var err2 error
	if err2 = p.handler.ClearIdentityCredential(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clearIdentityCredential: "+err2.Error())
			oprot.WriteMessageBegin("clearIdentityCredential", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("clearIdentityCredential", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorClearMessageBox struct {
	handler TalkService
}

func (p *talkServiceProcessorClearMessageBox) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceClearMessageBoxArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("clearMessageBox", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceClearMessageBoxResult{}
	var err2 error
	if err2 = p.handler.ClearMessageBox(args.ChannelId, args.MessageBoxId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clearMessageBox: "+err2.Error())
			oprot.WriteMessageBegin("clearMessageBox", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("clearMessageBox", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorCloseProximityMatch struct {
	handler TalkService
}

func (p *talkServiceProcessorCloseProximityMatch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceCloseProximityMatchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("closeProximityMatch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceCloseProximityMatchResult{}
	var err2 error
	if err2 = p.handler.CloseProximityMatch(args.SessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing closeProximityMatch: "+err2.Error())
			oprot.WriteMessageBegin("closeProximityMatch", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("closeProximityMatch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorConfirmEmail struct {
	handler TalkService
}

func (p *talkServiceProcessorConfirmEmail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceConfirmEmailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("confirmEmail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceConfirmEmailResult{}
	var err2 error
	if err2 = p.handler.ConfirmEmail(args.Verifier, args.PinCode); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing confirmEmail: "+err2.Error())
			oprot.WriteMessageBegin("confirmEmail", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("confirmEmail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorCreateAccountMigrationPincodeSession struct {
	handler TalkService
}

func (p *talkServiceProcessorCreateAccountMigrationPincodeSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceCreateAccountMigrationPincodeSessionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createAccountMigrationPincodeSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceCreateAccountMigrationPincodeSessionResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.CreateAccountMigrationPincodeSession(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createAccountMigrationPincodeSession: "+err2.Error())
			oprot.WriteMessageBegin("createAccountMigrationPincodeSession", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createAccountMigrationPincodeSession", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorCreateGroup struct {
	handler TalkService
}

func (p *talkServiceProcessorCreateGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceCreateGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceCreateGroupResult{}
	var retval *Group
	var err2 error
	if retval, err2 = p.handler.CreateGroup(args.Seq, args.Name, args.ContactIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createGroup: "+err2.Error())
			oprot.WriteMessageBegin("createGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorCreateQrcodeBase64Image struct {
	handler TalkService
}

func (p *talkServiceProcessorCreateQrcodeBase64Image) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceCreateQrcodeBase64ImageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createQrcodeBase64Image", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceCreateQrcodeBase64ImageResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.CreateQrcodeBase64Image(args.URL, args.CharacterSet, args.ImageSize, args.X, args.Y, args.Width, args.Height); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createQrcodeBase64Image: "+err2.Error())
			oprot.WriteMessageBegin("createQrcodeBase64Image", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("createQrcodeBase64Image", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorCreateRoom struct {
	handler TalkService
}

func (p *talkServiceProcessorCreateRoom) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceCreateRoomArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceCreateRoomResult{}
	var retval *Room
	var err2 error
	if retval, err2 = p.handler.CreateRoom(args.ReqSeq, args.ContactIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createRoom: "+err2.Error())
			oprot.WriteMessageBegin("createRoom", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createRoom", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorDisableNearby struct {
	handler TalkService
}

func (p *talkServiceProcessorDisableNearby) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceDisableNearbyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("disableNearby", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceDisableNearbyResult{}
	var err2 error
	if err2 = p.handler.DisableNearby(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing disableNearby: "+err2.Error())
			oprot.WriteMessageBegin("disableNearby", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("disableNearby", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFetchOperations struct {
	handler TalkService
}

func (p *talkServiceProcessorFetchOperations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFetchOperationsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("fetchOperations", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFetchOperationsResult{}
	var retval []*Operation
	var err2 error
	if retval, err2 = p.handler.FetchOperations(args.LocalRev, args.Count); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchOperations: "+err2.Error())
			oprot.WriteMessageBegin("fetchOperations", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("fetchOperations", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFetchOps struct {
	handler TalkService
}

func (p *talkServiceProcessorFetchOps) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFetchOpsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("fetchOps", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFetchOpsResult{}
	var retval []*Operation
	var err2 error
	if retval, err2 = p.handler.FetchOps(args.LocalRev, args.Count, args.GlobalRev, args.IndividualRev); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchOps: "+err2.Error())
			oprot.WriteMessageBegin("fetchOps", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("fetchOps", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindContactsByEmail struct {
	handler TalkService
}

func (p *talkServiceProcessorFindContactsByEmail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFindContactsByEmailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findContactsByEmail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFindContactsByEmailResult{}
	var retval map[string]*Contact
	var err2 error
	if retval, err2 = p.handler.FindContactsByEmail(args.Emails); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactsByEmail: "+err2.Error())
			oprot.WriteMessageBegin("findContactsByEmail", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findContactsByEmail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindContactsByPhone struct {
	handler TalkService
}

func (p *talkServiceProcessorFindContactsByPhone) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFindContactsByPhoneArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findContactsByPhone", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFindContactsByPhoneResult{}
	var retval map[string]*Contact
	var err2 error
	if retval, err2 = p.handler.FindContactsByPhone(args.Phones); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactsByPhone: "+err2.Error())
			oprot.WriteMessageBegin("findContactsByPhone", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findContactsByPhone", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindAndAddContactsByEmail struct {
	handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactsByEmail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFindAndAddContactsByEmailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findAndAddContactsByEmail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFindAndAddContactsByEmailResult{}
	var retval map[string]*Contact
	var err2 error
	if retval, err2 = p.handler.FindAndAddContactsByEmail(args.ReqSeq, args.Emails); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByEmail: "+err2.Error())
			oprot.WriteMessageBegin("findAndAddContactsByEmail", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findAndAddContactsByEmail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindAndAddContactsByMid struct {
	handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactsByMid) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFindAndAddContactsByMidArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findAndAddContactsByMid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFindAndAddContactsByMidResult{}
	var retval map[string]*Contact
	var err2 error
	if retval, err2 = p.handler.FindAndAddContactsByMid(args.ReqSeq, args.Mid); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByMid: "+err2.Error())
			oprot.WriteMessageBegin("findAndAddContactsByMid", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findAndAddContactsByMid", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindAndAddContactsByPhone struct {
	handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactsByPhone) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFindAndAddContactsByPhoneArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findAndAddContactsByPhone", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFindAndAddContactsByPhoneResult{}
	var retval map[string]*Contact
	var err2 error
	if retval, err2 = p.handler.FindAndAddContactsByPhone(args.ReqSeq, args.Phones); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByPhone: "+err2.Error())
			oprot.WriteMessageBegin("findAndAddContactsByPhone", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findAndAddContactsByPhone", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindAndAddContactsByUserid struct {
	handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactsByUserid) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFindAndAddContactsByUseridArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findAndAddContactsByUserid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFindAndAddContactsByUseridResult{}
	var retval map[string]*Contact
	var err2 error
	if retval, err2 = p.handler.FindAndAddContactsByUserid(args.ReqSeq, args.Userid); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByUserid: "+err2.Error())
			oprot.WriteMessageBegin("findAndAddContactsByUserid", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findAndAddContactsByUserid", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindContactByMetaTag struct {
	handler TalkService
}

func (p *talkServiceProcessorFindContactByMetaTag) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFindContactByMetaTagArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findContactByMetaTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFindContactByMetaTagResult{}
	var retval *Contact
	var err2 error
	if retval, err2 = p.handler.FindContactByMetaTag(args.Userid, args.Reference); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactByMetaTag: "+err2.Error())
			oprot.WriteMessageBegin("findContactByMetaTag", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findContactByMetaTag", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindContactByUserTicket struct {
	handler TalkService
}

func (p *talkServiceProcessorFindContactByUserTicket) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFindContactByUserTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findContactByUserTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFindContactByUserTicketResult{}
	var retval *Contact
	var err2 error
	if retval, err2 = p.handler.FindContactByUserTicket(args.TicketId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactByUserTicket: "+err2.Error())
			oprot.WriteMessageBegin("findContactByUserTicket", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findContactByUserTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindGroupByTicket struct {
	handler TalkService
}

func (p *talkServiceProcessorFindGroupByTicket) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFindGroupByTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findGroupByTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFindGroupByTicketResult{}
	var retval *Group
	var err2 error
	if retval, err2 = p.handler.FindGroupByTicket(args.TicketId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findGroupByTicket: "+err2.Error())
			oprot.WriteMessageBegin("findGroupByTicket", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findGroupByTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFinishUpdateVerification struct {
	handler TalkService
}

func (p *talkServiceProcessorFinishUpdateVerification) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceFinishUpdateVerificationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("finishUpdateVerification", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceFinishUpdateVerificationResult{}
	var err2 error
	if err2 = p.handler.FinishUpdateVerification(args.SessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing finishUpdateVerification: "+err2.Error())
			oprot.WriteMessageBegin("finishUpdateVerification", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("finishUpdateVerification", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGenerateUserTicket struct {
	handler TalkService
}

func (p *talkServiceProcessorGenerateUserTicket) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGenerateUserTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("generateUserTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGenerateUserTicketResult{}
	var retval *Ticket
	var err2 error
	if retval, err2 = p.handler.GenerateUserTicket(args.ExpirationTime, args.MaxUseCount); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing generateUserTicket: "+err2.Error())
			oprot.WriteMessageBegin("generateUserTicket", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("generateUserTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetAcceptedProximityMatches struct {
	handler TalkService
}

func (p *talkServiceProcessorGetAcceptedProximityMatches) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetAcceptedProximityMatchesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAcceptedProximityMatches", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetAcceptedProximityMatchesResult{}
	var retval map[string]bool
	var err2 error
	if retval, err2 = p.handler.GetAcceptedProximityMatches(args.SessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAcceptedProximityMatches: "+err2.Error())
			oprot.WriteMessageBegin("getAcceptedProximityMatches", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAcceptedProximityMatches", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetAllContactIds struct {
	handler TalkService
}

func (p *talkServiceProcessorGetAllContactIds) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetAllContactIdsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAllContactIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetAllContactIdsResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetAllContactIds(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllContactIds: "+err2.Error())
			oprot.WriteMessageBegin("getAllContactIds", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAllContactIds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetAnalyticsInfo struct {
	handler TalkService
}

func (p *talkServiceProcessorGetAnalyticsInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetAnalyticsInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAnalyticsInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetAnalyticsInfoResult{}
	var retval *AnalyticsInfo
	var err2 error
	if retval, err2 = p.handler.GetAnalyticsInfo(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAnalyticsInfo: "+err2.Error())
			oprot.WriteMessageBegin("getAnalyticsInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAnalyticsInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetAuthQrcode struct {
	handler TalkService
}

func (p *talkServiceProcessorGetAuthQrcode) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetAuthQrcodeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAuthQrcode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetAuthQrcodeResult{}
	var retval *AuthQrcode
	var err2 error
	if retval, err2 = p.handler.GetAuthQrcode(args.KeepLoggedIn, args.SystemName); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAuthQrcode: "+err2.Error())
			oprot.WriteMessageBegin("getAuthQrcode", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAuthQrcode", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetBlockedContactIds struct {
	handler TalkService
}

func (p *talkServiceProcessorGetBlockedContactIds) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetBlockedContactIdsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBlockedContactIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetBlockedContactIdsResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetBlockedContactIds(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBlockedContactIds: "+err2.Error())
			oprot.WriteMessageBegin("getBlockedContactIds", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBlockedContactIds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetBlockedContactIdsByRange struct {
	handler TalkService
}

func (p *talkServiceProcessorGetBlockedContactIdsByRange) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetBlockedContactIdsByRangeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBlockedContactIdsByRange", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetBlockedContactIdsByRangeResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetBlockedContactIdsByRange(args.Start, args.Count); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBlockedContactIdsByRange: "+err2.Error())
			oprot.WriteMessageBegin("getBlockedContactIdsByRange", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBlockedContactIdsByRange", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetBlockedRecommendationIds struct {
	handler TalkService
}

func (p *talkServiceProcessorGetBlockedRecommendationIds) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetBlockedRecommendationIdsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBlockedRecommendationIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetBlockedRecommendationIdsResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetBlockedRecommendationIds(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBlockedRecommendationIds: "+err2.Error())
			oprot.WriteMessageBegin("getBlockedRecommendationIds", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBlockedRecommendationIds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetCompactGroup struct {
	handler TalkService
}

func (p *talkServiceProcessorGetCompactGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetCompactGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCompactGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetCompactGroupResult{}
	var retval *Group
	var err2 error
	if retval, err2 = p.handler.GetCompactGroup(args.GroupId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCompactGroup: "+err2.Error())
			oprot.WriteMessageBegin("getCompactGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getCompactGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetConfigurations struct {
	handler TalkService
}

func (p *talkServiceProcessorGetConfigurations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetConfigurationsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getConfigurations", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetConfigurationsResult{}
	var retval *Configurations
	var err2 error
	if retval, err2 = p.handler.GetConfigurations(args.Revision, args.RegionOfUsim, args.RegionOfTelephone, args.RegionOfLocale, args.Carrier); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getConfigurations: "+err2.Error())
			oprot.WriteMessageBegin("getConfigurations", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getConfigurations", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetContact struct {
	handler TalkService
}

func (p *talkServiceProcessorGetContact) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetContactArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getContact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetContactResult{}
	var retval *Contact
	var err2 error
	if retval, err2 = p.handler.GetContact(args.ID); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContact: "+err2.Error())
			oprot.WriteMessageBegin("getContact", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getContact", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetContactRegistration struct {
	handler TalkService
}

func (p *talkServiceProcessorGetContactRegistration) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetContactRegistrationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getContactRegistration", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetContactRegistrationResult{}
	var retval *ContactRegistration
	var err2 error
	if retval, err2 = p.handler.GetContactRegistration(args.ID, args.Type); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContactRegistration: "+err2.Error())
			oprot.WriteMessageBegin("getContactRegistration", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getContactRegistration", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetContacts struct {
	handler TalkService
}

func (p *talkServiceProcessorGetContacts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetContactsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getContacts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetContactsResult{}
	var retval []*Contact
	var err2 error
	if retval, err2 = p.handler.GetContacts(args.Ids); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContacts: "+err2.Error())
			oprot.WriteMessageBegin("getContacts", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getContacts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetCountryWithRequestIp struct {
	handler TalkService
}

func (p *talkServiceProcessorGetCountryWithRequestIp) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetCountryWithRequestIpArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCountryWithRequestIp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetCountryWithRequestIpResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetCountryWithRequestIp(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCountryWithRequestIp: "+err2.Error())
			oprot.WriteMessageBegin("getCountryWithRequestIp", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getCountryWithRequestIp", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetFavoriteMids struct {
	handler TalkService
}

func (p *talkServiceProcessorGetFavoriteMids) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetFavoriteMidsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getFavoriteMids", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetFavoriteMidsResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetFavoriteMids(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getFavoriteMids: "+err2.Error())
			oprot.WriteMessageBegin("getFavoriteMids", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getFavoriteMids", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetFriendRequests struct {
	handler TalkService
}

func (p *talkServiceProcessorGetFriendRequests) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetFriendRequestsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getFriendRequests", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetFriendRequestsResult{}
	var retval []*FriendRequest
	var err2 error
	if retval, err2 = p.handler.GetFriendRequests(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getFriendRequests: "+err2.Error())
			oprot.WriteMessageBegin("getFriendRequests", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getFriendRequests", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetExtendedProfile struct {
	handler TalkService
}

func (p *talkServiceProcessorGetExtendedProfile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetExtendedProfileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getExtendedProfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetExtendedProfileResult{}
	var retval *ExtendedProfile
	var err2 error
	if retval, err2 = p.handler.GetExtendedProfile(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getExtendedProfile: "+err2.Error())
			oprot.WriteMessageBegin("getExtendedProfile", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getExtendedProfile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetRecentFriendRequests struct {
	handler TalkService
}

func (p *talkServiceProcessorGetRecentFriendRequests) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetRecentFriendRequestsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRecentFriendRequests", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetRecentFriendRequestsResult{}
	var retval *FriendRequestsInfo
	var err2 error
	if retval, err2 = p.handler.GetRecentFriendRequests(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRecentFriendRequests: "+err2.Error())
			oprot.WriteMessageBegin("getRecentFriendRequests", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRecentFriendRequests", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetGroup struct {
	handler TalkService
}

func (p *talkServiceProcessorGetGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetGroupResult{}
	var retval *Group
	var err2 error
	if retval, err2 = p.handler.GetGroup(args.GroupId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroup: "+err2.Error())
			oprot.WriteMessageBegin("getGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetGroupIdsInvited struct {
	handler TalkService
}

func (p *talkServiceProcessorGetGroupIdsInvited) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetGroupIdsInvitedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getGroupIdsInvited", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetGroupIdsInvitedResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetGroupIdsInvited(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupIdsInvited: "+err2.Error())
			oprot.WriteMessageBegin("getGroupIdsInvited", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getGroupIdsInvited", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetGroupIdsJoined struct {
	handler TalkService
}

func (p *talkServiceProcessorGetGroupIdsJoined) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetGroupIdsJoinedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getGroupIdsJoined", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetGroupIdsJoinedResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetGroupIdsJoined(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupIdsJoined: "+err2.Error())
			oprot.WriteMessageBegin("getGroupIdsJoined", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getGroupIdsJoined", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetGroups struct {
	handler TalkService
}

func (p *talkServiceProcessorGetGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetGroupsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getGroups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetGroupsResult{}
	var retval []*Group
	var err2 error
	if retval, err2 = p.handler.GetGroups(args.GroupIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroups: "+err2.Error())
			oprot.WriteMessageBegin("getGroups", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getGroups", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetGroupWithoutMembers struct {
	handler TalkService
}

func (p *talkServiceProcessorGetGroupWithoutMembers) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetGroupWithoutMembersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getGroupWithoutMembers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetGroupWithoutMembersResult{}
	var retval *Group
	var err2 error
	if retval, err2 = p.handler.GetGroupWithoutMembers(args.GroupId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupWithoutMembers: "+err2.Error())
			oprot.WriteMessageBegin("getGroupWithoutMembers", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getGroupWithoutMembers", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetLastOpRevision struct {
	handler TalkService
}

func (p *talkServiceProcessorGetLastOpRevision) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetLastOpRevisionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getLastOpRevision", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetLastOpRevisionResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.GetLastOpRevision(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLastOpRevision: "+err2.Error())
			oprot.WriteMessageBegin("getLastOpRevision", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getLastOpRevision", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetProfile struct {
	handler TalkService
}

func (p *talkServiceProcessorGetProfile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetProfileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getProfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetProfileResult{}
	var retval *Profile
	var err2 error
	if retval, err2 = p.handler.GetProfile(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProfile: "+err2.Error())
			oprot.WriteMessageBegin("getProfile", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getProfile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetProximityMatchCandidateList struct {
	handler TalkService
}

func (p *talkServiceProcessorGetProximityMatchCandidateList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetProximityMatchCandidateListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getProximityMatchCandidateList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetProximityMatchCandidateListResult{}
	var retval *ProximityMatchCandidateResult_
	var err2 error
	if retval, err2 = p.handler.GetProximityMatchCandidateList(args.SessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProximityMatchCandidateList: "+err2.Error())
			oprot.WriteMessageBegin("getProximityMatchCandidateList", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getProximityMatchCandidateList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetRSAKeyInfo struct {
	handler TalkService
}

func (p *talkServiceProcessorGetRSAKeyInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetRSAKeyInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRSAKeyInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetRSAKeyInfoResult{}
	var retval *RSAKey
	var err2 error
	if retval, err2 = p.handler.GetRSAKeyInfo(args.Provider); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRSAKeyInfo: "+err2.Error())
			oprot.WriteMessageBegin("getRSAKeyInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRSAKeyInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetRingbackTone struct {
	handler TalkService
}

func (p *talkServiceProcessorGetRingbackTone) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetRingbackToneArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRingbackTone", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetRingbackToneResult{}
	var retval *RingbackTone
	var err2 error
	if retval, err2 = p.handler.GetRingbackTone(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRingbackTone: "+err2.Error())
			oprot.WriteMessageBegin("getRingbackTone", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRingbackTone", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetRoom struct {
	handler TalkService
}

func (p *talkServiceProcessorGetRoom) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetRoomArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetRoomResult{}
	var retval *Room
	var err2 error
	if retval, err2 = p.handler.GetRoom(args.RoomId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRoom: "+err2.Error())
			oprot.WriteMessageBegin("getRoom", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRoom", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetServerTime struct {
	handler TalkService
}

func (p *talkServiceProcessorGetServerTime) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetServerTimeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getServerTime", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetServerTimeResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.GetServerTime(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getServerTime: "+err2.Error())
			oprot.WriteMessageBegin("getServerTime", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getServerTime", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetSessions struct {
	handler TalkService
}

func (p *talkServiceProcessorGetSessions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetSessionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSessions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetSessionsResult{}
	var retval []*LoginSession
	var err2 error
	if retval, err2 = p.handler.GetSessions(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSessions: "+err2.Error())
			oprot.WriteMessageBegin("getSessions", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSessions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetSettings struct {
	handler TalkService
}

func (p *talkServiceProcessorGetSettings) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetSettingsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSettings", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetSettingsResult{}
	var retval *Settings
	var err2 error
	if retval, err2 = p.handler.GetSettings(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSettings: "+err2.Error())
			oprot.WriteMessageBegin("getSettings", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSettings", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetSettingsAttributes struct {
	handler TalkService
}

func (p *talkServiceProcessorGetSettingsAttributes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetSettingsAttributesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSettingsAttributes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetSettingsAttributesResult{}
	var retval *Settings
	var err2 error
	if retval, err2 = p.handler.GetSettingsAttributes(args.AttrBitset); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSettingsAttributes: "+err2.Error())
			oprot.WriteMessageBegin("getSettingsAttributes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSettingsAttributes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetSettingsAttributes2 struct {
	handler TalkService
}

func (p *talkServiceProcessorGetSettingsAttributes2) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceGetSettingsAttributes2Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSettingsAttributes2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceGetSettingsAttributes2Result{}
	var retval *Settings
	var err2 error
	if retval, err2 = p.handler.GetSettingsAttributes2(args.AttrBitset); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSettingsAttributes2: "+err2.Error())
			oprot.WriteMessageBegin("getSettingsAttributes2", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSettingsAttributes2", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorInviteIntoGroup struct {
	handler TalkService
}

func (p *talkServiceProcessorInviteIntoGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceInviteIntoGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("inviteIntoGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceInviteIntoGroupResult{}
	var err2 error
	if err2 = p.handler.InviteIntoGroup(args.ReqSeq, args.GroupId, args.ContactIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoGroup: "+err2.Error())
			oprot.WriteMessageBegin("inviteIntoGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("inviteIntoGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorInviteIntoRoom struct {
	handler TalkService
}

func (p *talkServiceProcessorInviteIntoRoom) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceInviteIntoRoomArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("inviteIntoRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceInviteIntoRoomResult{}
	var err2 error
	if err2 = p.handler.InviteIntoRoom(args.ReqSeq, args.RoomId, args.ContactIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoRoom: "+err2.Error())
			oprot.WriteMessageBegin("inviteIntoRoom", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("inviteIntoRoom", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorIsUseridAvailable struct {
	handler TalkService
}

func (p *talkServiceProcessorIsUseridAvailable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceIsUseridAvailableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("isUseridAvailable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceIsUseridAvailableResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.IsUseridAvailable(args.Userid); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isUseridAvailable: "+err2.Error())
			oprot.WriteMessageBegin("isUseridAvailable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("isUseridAvailable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorKickoutFromGroup struct {
	handler TalkService
}

func (p *talkServiceProcessorKickoutFromGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceKickoutFromGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("kickoutFromGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceKickoutFromGroupResult{}
	var err2 error
	if err2 = p.handler.KickoutFromGroup(args.ReqSeq, args.GroupId, args.ContactIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing kickoutFromGroup: "+err2.Error())
			oprot.WriteMessageBegin("kickoutFromGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("kickoutFromGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorLeaveGroup struct {
	handler TalkService
}

func (p *talkServiceProcessorLeaveGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceLeaveGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("leaveGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceLeaveGroupResult{}
	var err2 error
	if err2 = p.handler.LeaveGroup(args.ReqSeq, args.GroupId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing leaveGroup: "+err2.Error())
			oprot.WriteMessageBegin("leaveGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("leaveGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorLeaveRoom struct {
	handler TalkService
}

func (p *talkServiceProcessorLeaveRoom) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceLeaveRoomArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("leaveRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceLeaveRoomResult{}
	var err2 error
	if err2 = p.handler.LeaveRoom(args.ReqSeq, args.RoomId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing leaveRoom: "+err2.Error())
			oprot.WriteMessageBegin("leaveRoom", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("leaveRoom", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorLoginWithIdentityCredential struct {
	handler TalkService
}

func (p *talkServiceProcessorLoginWithIdentityCredential) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceLoginWithIdentityCredentialArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("loginWithIdentityCredential", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceLoginWithIdentityCredentialResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.LoginWithIdentityCredential(args.IdentityProvider, args.Identifier, args.Password, args.KeepLoggedIn, args.AccessLocation, args.SystemName, args.Certificate); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loginWithIdentityCredential: "+err2.Error())
			oprot.WriteMessageBegin("loginWithIdentityCredential", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("loginWithIdentityCredential", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorLoginWithIdentityCredentialForCertificate struct {
	handler TalkService
}

func (p *talkServiceProcessorLoginWithIdentityCredentialForCertificate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceLoginWithIdentityCredentialForCertificateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("loginWithIdentityCredentialForCertificate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceLoginWithIdentityCredentialForCertificateResult{}
	var retval *LoginResult_
	var err2 error
	if retval, err2 = p.handler.LoginWithIdentityCredentialForCertificate(args.IdentityProvider, args.Identifier, args.Password, args.KeepLoggedIn, args.AccessLocation, args.SystemName, args.Certificate); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loginWithIdentityCredentialForCertificate: "+err2.Error())
			oprot.WriteMessageBegin("loginWithIdentityCredentialForCertificate", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("loginWithIdentityCredentialForCertificate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorLoginWithVerifier struct {
	handler TalkService
}

func (p *talkServiceProcessorLoginWithVerifier) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceLoginWithVerifierArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("loginWithVerifier", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceLoginWithVerifierResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.LoginWithVerifier(args.Verifier); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loginWithVerifier: "+err2.Error())
			oprot.WriteMessageBegin("loginWithVerifier", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("loginWithVerifier", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorLoginWithVerifierForCerificate struct {
	handler TalkService
}

func (p *talkServiceProcessorLoginWithVerifierForCerificate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceLoginWithVerifierForCerificateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("loginWithVerifierForCerificate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceLoginWithVerifierForCerificateResult{}
	var retval *LoginResult_
	var err2 error
	if retval, err2 = p.handler.LoginWithVerifierForCerificate(args.Verifier); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loginWithVerifierForCerificate: "+err2.Error())
			oprot.WriteMessageBegin("loginWithVerifierForCerificate", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("loginWithVerifierForCerificate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorLoginWithVerifierForCertificate struct {
	handler TalkService
}

func (p *talkServiceProcessorLoginWithVerifierForCertificate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceLoginWithVerifierForCertificateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("loginWithVerifierForCertificate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceLoginWithVerifierForCertificateResult{}
	var retval *LoginResult_
	var err2 error
	if retval, err2 = p.handler.LoginWithVerifierForCertificate(args.Verifier); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loginWithVerifierForCertificate: "+err2.Error())
			oprot.WriteMessageBegin("loginWithVerifierForCertificate", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("loginWithVerifierForCertificate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorLogout struct {
	handler TalkService
}

func (p *talkServiceProcessorLogout) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceLogoutArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("logout", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceLogoutResult{}
	var err2 error
	if err2 = p.handler.Logout(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing logout: "+err2.Error())
			oprot.WriteMessageBegin("logout", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("logout", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorLogoutSession struct {
	handler TalkService
}

func (p *talkServiceProcessorLogoutSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceLogoutSessionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("logoutSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceLogoutSessionResult{}
	var err2 error
	if err2 = p.handler.LogoutSession(args.TokenKey); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing logoutSession: "+err2.Error())
			oprot.WriteMessageBegin("logoutSession", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("logoutSession", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorNoop struct {
	handler TalkService
}

func (p *talkServiceProcessorNoop) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceNoopArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("noop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceNoopResult{}
	var err2 error
	if err2 = p.handler.Noop(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing noop: "+err2.Error())
			oprot.WriteMessageBegin("noop", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("noop", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRegisterUserid struct {
	handler TalkService
}

func (p *talkServiceProcessorRegisterUserid) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceRegisterUseridArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerUserid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceRegisterUseridResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.RegisterUserid(args.ReqSeq, args.Userid); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerUserid: "+err2.Error())
			oprot.WriteMessageBegin("registerUserid", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("registerUserid", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorReissueUserTicket struct {
	handler TalkService
}

func (p *talkServiceProcessorReissueUserTicket) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceReissueUserTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reissueUserTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceReissueUserTicketResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ReissueUserTicket(args.ExpirationTime, args.MaxUseCount); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reissueUserTicket: "+err2.Error())
			oprot.WriteMessageBegin("reissueUserTicket", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("reissueUserTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorReissueGroupTicket struct {
	handler TalkService
}

func (p *talkServiceProcessorReissueGroupTicket) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceReissueGroupTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reissueGroupTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceReissueGroupTicketResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ReissueGroupTicket(args.GroupId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reissueGroupTicket: "+err2.Error())
			oprot.WriteMessageBegin("reissueGroupTicket", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("reissueGroupTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRejectGroupInvitation struct {
	handler TalkService
}

func (p *talkServiceProcessorRejectGroupInvitation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceRejectGroupInvitationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rejectGroupInvitation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceRejectGroupInvitationResult{}
	var err2 error
	if err2 = p.handler.RejectGroupInvitation(args.ReqSeq, args.GroupId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rejectGroupInvitation: "+err2.Error())
			oprot.WriteMessageBegin("rejectGroupInvitation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("rejectGroupInvitation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorReleaseSession struct {
	handler TalkService
}

func (p *talkServiceProcessorReleaseSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceReleaseSessionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("releaseSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceReleaseSessionResult{}
	var err2 error
	if err2 = p.handler.ReleaseSession(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing releaseSession: "+err2.Error())
			oprot.WriteMessageBegin("releaseSession", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("releaseSession", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRemoveAllMessages struct {
	handler TalkService
}

func (p *talkServiceProcessorRemoveAllMessages) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceRemoveAllMessagesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeAllMessages", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceRemoveAllMessagesResult{}
	var err2 error
	if err2 = p.handler.RemoveAllMessages(args.Seq, args.LastMessageId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeAllMessages: "+err2.Error())
			oprot.WriteMessageBegin("removeAllMessages", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("removeAllMessages", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRemoveFriendRequest struct {
	handler TalkService
}

func (p *talkServiceProcessorRemoveFriendRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceRemoveFriendRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeFriendRequest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceRemoveFriendRequestResult{}
	var err2 error
	if err2 = p.handler.RemoveFriendRequest(args.Direction, args.MidOrEMid); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeFriendRequest: "+err2.Error())
			oprot.WriteMessageBegin("removeFriendRequest", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("removeFriendRequest", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSendChatChecked struct {
	handler TalkService
}

func (p *talkServiceProcessorSendChatChecked) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceSendChatCheckedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendChatChecked", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceSendChatCheckedResult{}
	var err2 error
	if err2 = p.handler.SendChatChecked(args.Seq, args.Consumer, args.LastMessageId, args.SessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendChatChecked: "+err2.Error())
			oprot.WriteMessageBegin("sendChatChecked", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("sendChatChecked", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSendChatRemoved struct {
	handler TalkService
}

func (p *talkServiceProcessorSendChatRemoved) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceSendChatRemovedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendChatRemoved", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceSendChatRemovedResult{}
	var err2 error
	if err2 = p.handler.SendChatRemoved(args.Seq, args.Consumer, args.LastMessageId, args.SessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendChatRemoved: "+err2.Error())
			oprot.WriteMessageBegin("sendChatRemoved", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("sendChatRemoved", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSendContentReceipt struct {
	handler TalkService
}

func (p *talkServiceProcessorSendContentReceipt) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceSendContentReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendContentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceSendContentReceiptResult{}
	var err2 error
	if err2 = p.handler.SendContentReceipt(args.Seq, args.Consumer, args.MessageId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendContentReceipt: "+err2.Error())
			oprot.WriteMessageBegin("sendContentReceipt", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("sendContentReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSendEchoPush struct {
	handler TalkService
}

func (p *talkServiceProcessorSendEchoPush) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceSendEchoPushArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendEchoPush", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceSendEchoPushResult{}
	var err2 error
	if err2 = p.handler.SendEchoPush(args.Text); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendEchoPush: "+err2.Error())
			oprot.WriteMessageBegin("sendEchoPush", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("sendEchoPush", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSendMessage struct {
	handler TalkService
}

func (p *talkServiceProcessorSendMessage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceSendMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceSendMessageResult{}
	var retval *Message
	var err2 error
	if retval, err2 = p.handler.SendMessage(args.Seq, args.Message); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendMessage: "+err2.Error())
			oprot.WriteMessageBegin("sendMessage", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("sendMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSendMessageToMyHome struct {
	handler TalkService
}

func (p *talkServiceProcessorSendMessageToMyHome) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceSendMessageToMyHomeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendMessageToMyHome", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceSendMessageToMyHomeResult{}
	var retval *Message
	var err2 error
	if retval, err2 = p.handler.SendMessageToMyHome(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendMessageToMyHome: "+err2.Error())
			oprot.WriteMessageBegin("sendMessageToMyHome", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("sendMessageToMyHome", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSendPostback struct {
	handler TalkService
}

func (p *talkServiceProcessorSendPostback) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceSendPostbackArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendPostback", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceSendPostbackResult{}
	var err2 error
	if err2 = p.handler.SendPostback(args.Requests); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendPostback: "+err2.Error())
			oprot.WriteMessageBegin("sendPostback", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("sendPostback", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUnblockContact struct {
	handler TalkService
}

func (p *talkServiceProcessorUnblockContact) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUnblockContactArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unblockContact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUnblockContactResult{}
	var err2 error
	if err2 = p.handler.UnblockContact(args.ReqSeq, args.ID); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unblockContact: "+err2.Error())
			oprot.WriteMessageBegin("unblockContact", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("unblockContact", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUnblockRecommendation struct {
	handler TalkService
}

func (p *talkServiceProcessorUnblockRecommendation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUnblockRecommendationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unblockRecommendation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUnblockRecommendationResult{}
	var err2 error
	if err2 = p.handler.UnblockRecommendation(args.ReqSeq, args.ID); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unblockRecommendation: "+err2.Error())
			oprot.WriteMessageBegin("unblockRecommendation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("unblockRecommendation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateContactSetting struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateContactSetting) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdateContactSettingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateContactSetting", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdateContactSettingResult{}
	var err2 error
	if err2 = p.handler.UpdateContactSetting(args.ReqSeq, args.Mid, args.Flag, args.Value); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateContactSetting: "+err2.Error())
			oprot.WriteMessageBegin("updateContactSetting", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateContactSetting", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateExtendedProfileAttribute struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateExtendedProfileAttribute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdateExtendedProfileAttributeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateExtendedProfileAttribute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdateExtendedProfileAttributeResult{}
	var err2 error
	if err2 = p.handler.UpdateExtendedProfileAttribute(args.ReqSeq, args.Attr, args.ExtendedProfile); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateExtendedProfileAttribute: "+err2.Error())
			oprot.WriteMessageBegin("updateExtendedProfileAttribute", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateExtendedProfileAttribute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateGroup struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdateGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdateGroupResult{}
	var err2 error
	if err2 = p.handler.UpdateGroup(args.ReqSeq, args.Group); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateGroup: "+err2.Error())
			oprot.WriteMessageBegin("updateGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateGroupPreferenceAttribute struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateGroupPreferenceAttribute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdateGroupPreferenceAttributeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateGroupPreferenceAttribute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdateGroupPreferenceAttributeResult{}
	var err2 error
	if err2 = p.handler.UpdateGroupPreferenceAttribute(args.ReqSeq, args.GroupMid, args.UpdatedAttrs); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateGroupPreferenceAttribute: "+err2.Error())
			oprot.WriteMessageBegin("updateGroupPreferenceAttribute", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateGroupPreferenceAttribute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateNotificationToken struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateNotificationToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdateNotificationTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateNotificationToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdateNotificationTokenResult{}
	var err2 error
	if err2 = p.handler.UpdateNotificationToken(args.Token, args.Type); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateNotificationToken: "+err2.Error())
			oprot.WriteMessageBegin("updateNotificationToken", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateNotificationToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateProfile struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateProfile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdateProfileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateProfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdateProfileResult{}
	var err2 error
	if err2 = p.handler.UpdateProfile(args.ReqSeq, args.Profile); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateProfile: "+err2.Error())
			oprot.WriteMessageBegin("updateProfile", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateProfile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateProfileAttribute struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateProfileAttribute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdateProfileAttributeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateProfileAttribute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdateProfileAttributeResult{}
	var err2 error
	if err2 = p.handler.UpdateProfileAttribute(args.ReqSeq, args.Attr, args.Value); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateProfileAttribute: "+err2.Error())
			oprot.WriteMessageBegin("updateProfileAttribute", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateProfileAttribute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateSettings struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateSettings) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdateSettingsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateSettings", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdateSettingsResult{}
	var err2 error
	if err2 = p.handler.UpdateSettings(args.ReqSeq, args.Settings); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSettings: "+err2.Error())
			oprot.WriteMessageBegin("updateSettings", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateSettings", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateSettings2 struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateSettings2) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdateSettings2Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateSettings2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdateSettings2Result{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.UpdateSettings2(args.ReqSeq, args.Settings); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSettings2: "+err2.Error())
			oprot.WriteMessageBegin("updateSettings2", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateSettings2", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateSettingsAttribute struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateSettingsAttribute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdateSettingsAttributeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateSettingsAttribute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdateSettingsAttributeResult{}
	var err2 error
	if err2 = p.handler.UpdateSettingsAttribute(args.ReqSeq, args.Attr, args.Value); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSettingsAttribute: "+err2.Error())
			oprot.WriteMessageBegin("updateSettingsAttribute", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateSettingsAttribute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateSettingsAttributes struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateSettingsAttributes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TalkServiceUpdateSettingsAttributesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateSettingsAttributes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TalkServiceUpdateSettingsAttributesResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.UpdateSettingsAttributes(args.ReqSeq, args.AttrBitset, args.Settings); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSettingsAttributes: "+err2.Error())
			oprot.WriteMessageBegin("updateSettingsAttributes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateSettingsAttributes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqSeq
//  - GroupId
type TalkServiceAcceptGroupInvitationArgs struct {
	ReqSeq  int32  `thrift:"reqSeq,1" json:"reqSeq"`
	GroupId string `thrift:"groupId,2" json:"groupId"`
}

func NewTalkServiceAcceptGroupInvitationArgs() *TalkServiceAcceptGroupInvitationArgs {
	return &TalkServiceAcceptGroupInvitationArgs{}
}

func (p *TalkServiceAcceptGroupInvitationArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceAcceptGroupInvitationArgs) GetGroupId() string {
	return p.GroupId
}
func (p *TalkServiceAcceptGroupInvitationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acceptGroupInvitation_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceAcceptGroupInvitationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceAcceptGroupInvitationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcceptGroupInvitationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceAcceptGroupInvitationResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceAcceptGroupInvitationResult() *TalkServiceAcceptGroupInvitationResult {
	return &TalkServiceAcceptGroupInvitationResult{}
}

var TalkServiceAcceptGroupInvitationResult_E_DEFAULT *TalkException

func (p *TalkServiceAcceptGroupInvitationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceAcceptGroupInvitationResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceAcceptGroupInvitationResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceAcceptGroupInvitationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acceptGroupInvitation_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceAcceptGroupInvitationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcceptGroupInvitationResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
//  - TicketId
type TalkServiceAcceptGroupInvitationByTicketArgs struct {
	ReqSeq   int32  `thrift:"reqSeq,1" json:"reqSeq"`
	GroupId  string `thrift:"groupId,2" json:"groupId"`
	TicketId string `thrift:"ticketId,3" json:"ticketId"`
}

func NewTalkServiceAcceptGroupInvitationByTicketArgs() *TalkServiceAcceptGroupInvitationByTicketArgs {
	return &TalkServiceAcceptGroupInvitationByTicketArgs{}
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) GetGroupId() string {
	return p.GroupId
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) GetTicketId() string {
	return p.TicketId
}
func (p *TalkServiceAcceptGroupInvitationByTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TicketId = v
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acceptGroupInvitationByTicket_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ticketId", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ticketId: ", p), err)
	}
	if err := oprot.WriteString(string(p.TicketId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ticketId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ticketId: ", p), err)
	}
	return err
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcceptGroupInvitationByTicketArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceAcceptGroupInvitationByTicketResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceAcceptGroupInvitationByTicketResult() *TalkServiceAcceptGroupInvitationByTicketResult {
	return &TalkServiceAcceptGroupInvitationByTicketResult{}
}

var TalkServiceAcceptGroupInvitationByTicketResult_E_DEFAULT *TalkException

func (p *TalkServiceAcceptGroupInvitationByTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceAcceptGroupInvitationByTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceAcceptGroupInvitationByTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acceptGroupInvitationByTicket_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceAcceptGroupInvitationByTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcceptGroupInvitationByTicketResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Ids
type TalkServiceAcceptProximityMatchesArgs struct {
	// unused field # 1
	SessionId string          `thrift:"sessionId,2" json:"sessionId"`
	Ids       map[string]bool `thrift:"ids,3" json:"ids"`
}

func NewTalkServiceAcceptProximityMatchesArgs() *TalkServiceAcceptProximityMatchesArgs {
	return &TalkServiceAcceptProximityMatchesArgs{}
}

func (p *TalkServiceAcceptProximityMatchesArgs) GetSessionId() string {
	return p.SessionId
}

func (p *TalkServiceAcceptProximityMatchesArgs) GetIds() map[string]bool {
	return p.Ids
}
func (p *TalkServiceAcceptProximityMatchesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcceptProximityMatchesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *TalkServiceAcceptProximityMatchesArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Ids = tSet
	for i := 0; i < size; i++ {
		var _elem269 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem269 = v
		}
		p.Ids[_elem269] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TalkServiceAcceptProximityMatchesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acceptProximityMatches_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcceptProximityMatchesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceAcceptProximityMatchesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ids", thrift.SET, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ids: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Ids)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Ids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ids: ", p), err)
	}
	return err
}

func (p *TalkServiceAcceptProximityMatchesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcceptProximityMatchesArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceAcceptProximityMatchesResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceAcceptProximityMatchesResult() *TalkServiceAcceptProximityMatchesResult {
	return &TalkServiceAcceptProximityMatchesResult{}
}

var TalkServiceAcceptProximityMatchesResult_E_DEFAULT *TalkException

func (p *TalkServiceAcceptProximityMatchesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceAcceptProximityMatchesResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceAcceptProximityMatchesResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceAcceptProximityMatchesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcceptProximityMatchesResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceAcceptProximityMatchesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acceptProximityMatches_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcceptProximityMatchesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceAcceptProximityMatchesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcceptProximityMatchesResult(%+v)", *p)
}

// Attributes:
//  - To
type TalkServiceAcquireCallRouteArgs struct {
	// unused field # 1
	To string `thrift:"to,2" json:"to"`
}

func NewTalkServiceAcquireCallRouteArgs() *TalkServiceAcquireCallRouteArgs {
	return &TalkServiceAcquireCallRouteArgs{}
}

func (p *TalkServiceAcquireCallRouteArgs) GetTo() string {
	return p.To
}
func (p *TalkServiceAcquireCallRouteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcquireCallRouteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.To = v
	}
	return nil
}

func (p *TalkServiceAcquireCallRouteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireCallRoute_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcquireCallRouteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("to", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:to: ", p), err)
	}
	if err := oprot.WriteString(string(p.To)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.to (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:to: ", p), err)
	}
	return err
}

func (p *TalkServiceAcquireCallRouteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcquireCallRouteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceAcquireCallRouteResult struct {
	Success []string       `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceAcquireCallRouteResult() *TalkServiceAcquireCallRouteResult {
	return &TalkServiceAcquireCallRouteResult{}
}

var TalkServiceAcquireCallRouteResult_Success_DEFAULT []string

func (p *TalkServiceAcquireCallRouteResult) GetSuccess() []string {
	return p.Success
}

var TalkServiceAcquireCallRouteResult_E_DEFAULT *TalkException

func (p *TalkServiceAcquireCallRouteResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceAcquireCallRouteResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceAcquireCallRouteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceAcquireCallRouteResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceAcquireCallRouteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcquireCallRouteResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem270 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem270 = v
		}
		p.Success = append(p.Success, _elem270)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceAcquireCallRouteResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceAcquireCallRouteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireCallRoute_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcquireCallRouteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceAcquireCallRouteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceAcquireCallRouteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcquireCallRouteResult(%+v)", *p)
}

// Attributes:
//  - To
type TalkServiceAcquireCallTicketArgs struct {
	// unused field # 1
	To string `thrift:"to,2" json:"to"`
}

func NewTalkServiceAcquireCallTicketArgs() *TalkServiceAcquireCallTicketArgs {
	return &TalkServiceAcquireCallTicketArgs{}
}

func (p *TalkServiceAcquireCallTicketArgs) GetTo() string {
	return p.To
}
func (p *TalkServiceAcquireCallTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcquireCallTicketArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.To = v
	}
	return nil
}

func (p *TalkServiceAcquireCallTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireCallTicket_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcquireCallTicketArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("to", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:to: ", p), err)
	}
	if err := oprot.WriteString(string(p.To)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.to (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:to: ", p), err)
	}
	return err
}

func (p *TalkServiceAcquireCallTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcquireCallTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceAcquireCallTicketResult struct {
	Success *string        `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceAcquireCallTicketResult() *TalkServiceAcquireCallTicketResult {
	return &TalkServiceAcquireCallTicketResult{}
}

var TalkServiceAcquireCallTicketResult_Success_DEFAULT string

func (p *TalkServiceAcquireCallTicketResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return TalkServiceAcquireCallTicketResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceAcquireCallTicketResult_E_DEFAULT *TalkException

func (p *TalkServiceAcquireCallTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceAcquireCallTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceAcquireCallTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceAcquireCallTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceAcquireCallTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcquireCallTicketResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceAcquireCallTicketResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceAcquireCallTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireCallTicket_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcquireCallTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceAcquireCallTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceAcquireCallTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcquireCallTicketResult(%+v)", *p)
}

// Attributes:
//  - FeatureType
type TalkServiceAcquireEncryptedAccessTokenArgs struct {
	// unused field # 1
	FeatureType FeatureType `thrift:"featureType,2" json:"featureType"`
}

func NewTalkServiceAcquireEncryptedAccessTokenArgs() *TalkServiceAcquireEncryptedAccessTokenArgs {
	return &TalkServiceAcquireEncryptedAccessTokenArgs{}
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs) GetFeatureType() FeatureType {
	return p.FeatureType
}
func (p *TalkServiceAcquireEncryptedAccessTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := FeatureType(v)
		p.FeatureType = temp
	}
	return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireEncryptedAccessToken_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("featureType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:featureType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FeatureType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.featureType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:featureType: ", p), err)
	}
	return err
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcquireEncryptedAccessTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceAcquireEncryptedAccessTokenResult struct {
	Success *string        `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceAcquireEncryptedAccessTokenResult() *TalkServiceAcquireEncryptedAccessTokenResult {
	return &TalkServiceAcquireEncryptedAccessTokenResult{}
}

var TalkServiceAcquireEncryptedAccessTokenResult_Success_DEFAULT string

func (p *TalkServiceAcquireEncryptedAccessTokenResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return TalkServiceAcquireEncryptedAccessTokenResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceAcquireEncryptedAccessTokenResult_E_DEFAULT *TalkException

func (p *TalkServiceAcquireEncryptedAccessTokenResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceAcquireEncryptedAccessTokenResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceAcquireEncryptedAccessTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireEncryptedAccessToken_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcquireEncryptedAccessTokenResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
type TalkServiceBlockContactArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" json:"reqSeq"`
	ID     string `thrift:"id,2" json:"id"`
}

func NewTalkServiceBlockContactArgs() *TalkServiceBlockContactArgs {
	return &TalkServiceBlockContactArgs{}
}

func (p *TalkServiceBlockContactArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceBlockContactArgs) GetID() string {
	return p.ID
}
func (p *TalkServiceBlockContactArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceBlockContactArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceBlockContactArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TalkServiceBlockContactArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("blockContact_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceBlockContactArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceBlockContactArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err)
	}
	return err
}

func (p *TalkServiceBlockContactArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceBlockContactArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceBlockContactResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceBlockContactResult() *TalkServiceBlockContactResult {
	return &TalkServiceBlockContactResult{}
}

var TalkServiceBlockContactResult_E_DEFAULT *TalkException

func (p *TalkServiceBlockContactResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceBlockContactResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceBlockContactResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceBlockContactResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceBlockContactResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceBlockContactResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("blockContact_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceBlockContactResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceBlockContactResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceBlockContactResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
type TalkServiceBlockRecommendationArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" json:"reqSeq"`
	ID     string `thrift:"id,2" json:"id"`
}

func NewTalkServiceBlockRecommendationArgs() *TalkServiceBlockRecommendationArgs {
	return &TalkServiceBlockRecommendationArgs{}
}

func (p *TalkServiceBlockRecommendationArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceBlockRecommendationArgs) GetID() string {
	return p.ID
}
func (p *TalkServiceBlockRecommendationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceBlockRecommendationArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceBlockRecommendationArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TalkServiceBlockRecommendationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("blockRecommendation_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceBlockRecommendationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceBlockRecommendationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err)
	}
	return err
}

func (p *TalkServiceBlockRecommendationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceBlockRecommendationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceBlockRecommendationResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceBlockRecommendationResult() *TalkServiceBlockRecommendationResult {
	return &TalkServiceBlockRecommendationResult{}
}

var TalkServiceBlockRecommendationResult_E_DEFAULT *TalkException

func (p *TalkServiceBlockRecommendationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceBlockRecommendationResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceBlockRecommendationResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceBlockRecommendationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceBlockRecommendationResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceBlockRecommendationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("blockRecommendation_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceBlockRecommendationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceBlockRecommendationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceBlockRecommendationResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
//  - ContactIds
type TalkServiceCancelGroupInvitationArgs struct {
	ReqSeq     int32    `thrift:"reqSeq,1" json:"reqSeq"`
	GroupId    string   `thrift:"groupId,2" json:"groupId"`
	ContactIds []string `thrift:"contactIds,3" json:"contactIds"`
}

func NewTalkServiceCancelGroupInvitationArgs() *TalkServiceCancelGroupInvitationArgs {
	return &TalkServiceCancelGroupInvitationArgs{}
}

func (p *TalkServiceCancelGroupInvitationArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceCancelGroupInvitationArgs) GetGroupId() string {
	return p.GroupId
}

func (p *TalkServiceCancelGroupInvitationArgs) GetContactIds() []string {
	return p.ContactIds
}
func (p *TalkServiceCancelGroupInvitationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCancelGroupInvitationArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceCancelGroupInvitationArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *TalkServiceCancelGroupInvitationArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ContactIds = tSlice
	for i := 0; i < size; i++ {
		var _elem271 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem271 = v
		}
		p.ContactIds = append(p.ContactIds, _elem271)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceCancelGroupInvitationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancelGroupInvitation_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCancelGroupInvitationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceCancelGroupInvitationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceCancelGroupInvitationArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ContactIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err)
	}
	return err
}

func (p *TalkServiceCancelGroupInvitationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCancelGroupInvitationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceCancelGroupInvitationResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceCancelGroupInvitationResult() *TalkServiceCancelGroupInvitationResult {
	return &TalkServiceCancelGroupInvitationResult{}
}

var TalkServiceCancelGroupInvitationResult_E_DEFAULT *TalkException

func (p *TalkServiceCancelGroupInvitationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceCancelGroupInvitationResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceCancelGroupInvitationResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceCancelGroupInvitationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCancelGroupInvitationResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceCancelGroupInvitationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancelGroupInvitation_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCancelGroupInvitationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCancelGroupInvitationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCancelGroupInvitationResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Method
type TalkServiceChangeVerificationMethodArgs struct {
	// unused field # 1
	SessionId string             `thrift:"sessionId,2" json:"sessionId"`
	Method    VerificationMethod `thrift:"method,3" json:"method"`
}

func NewTalkServiceChangeVerificationMethodArgs() *TalkServiceChangeVerificationMethodArgs {
	return &TalkServiceChangeVerificationMethodArgs{}
}

func (p *TalkServiceChangeVerificationMethodArgs) GetSessionId() string {
	return p.SessionId
}

func (p *TalkServiceChangeVerificationMethodArgs) GetMethod() VerificationMethod {
	return p.Method
}
func (p *TalkServiceChangeVerificationMethodArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceChangeVerificationMethodArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *TalkServiceChangeVerificationMethodArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := VerificationMethod(v)
		p.Method = temp
	}
	return nil
}

func (p *TalkServiceChangeVerificationMethodArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changeVerificationMethod_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceChangeVerificationMethodArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceChangeVerificationMethodArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("method", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:method: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Method)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.method (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:method: ", p), err)
	}
	return err
}

func (p *TalkServiceChangeVerificationMethodArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceChangeVerificationMethodArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceChangeVerificationMethodResult struct {
	Success *VerificationSessionData `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException           `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceChangeVerificationMethodResult() *TalkServiceChangeVerificationMethodResult {
	return &TalkServiceChangeVerificationMethodResult{}
}

var TalkServiceChangeVerificationMethodResult_Success_DEFAULT *VerificationSessionData

func (p *TalkServiceChangeVerificationMethodResult) GetSuccess() *VerificationSessionData {
	if !p.IsSetSuccess() {
		return TalkServiceChangeVerificationMethodResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceChangeVerificationMethodResult_E_DEFAULT *TalkException

func (p *TalkServiceChangeVerificationMethodResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceChangeVerificationMethodResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceChangeVerificationMethodResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceChangeVerificationMethodResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceChangeVerificationMethodResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceChangeVerificationMethodResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &VerificationSessionData{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceChangeVerificationMethodResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceChangeVerificationMethodResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changeVerificationMethod_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceChangeVerificationMethodResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceChangeVerificationMethodResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceChangeVerificationMethodResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceChangeVerificationMethodResult(%+v)", *p)
}

type TalkServiceClearIdentityCredentialArgs struct {
}

func NewTalkServiceClearIdentityCredentialArgs() *TalkServiceClearIdentityCredentialArgs {
	return &TalkServiceClearIdentityCredentialArgs{}
}

func (p *TalkServiceClearIdentityCredentialArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceClearIdentityCredentialArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clearIdentityCredential_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceClearIdentityCredentialArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceClearIdentityCredentialArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceClearIdentityCredentialResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceClearIdentityCredentialResult() *TalkServiceClearIdentityCredentialResult {
	return &TalkServiceClearIdentityCredentialResult{}
}

var TalkServiceClearIdentityCredentialResult_E_DEFAULT *TalkException

func (p *TalkServiceClearIdentityCredentialResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceClearIdentityCredentialResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceClearIdentityCredentialResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceClearIdentityCredentialResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceClearIdentityCredentialResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceClearIdentityCredentialResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clearIdentityCredential_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceClearIdentityCredentialResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceClearIdentityCredentialResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceClearIdentityCredentialResult(%+v)", *p)
}

// Attributes:
//  - ChannelId
//  - MessageBoxId
type TalkServiceClearMessageBoxArgs struct {
	// unused field # 1
	ChannelId    string `thrift:"channelId,2" json:"channelId"`
	MessageBoxId string `thrift:"messageBoxId,3" json:"messageBoxId"`
}

func NewTalkServiceClearMessageBoxArgs() *TalkServiceClearMessageBoxArgs {
	return &TalkServiceClearMessageBoxArgs{}
}

func (p *TalkServiceClearMessageBoxArgs) GetChannelId() string {
	return p.ChannelId
}

func (p *TalkServiceClearMessageBoxArgs) GetMessageBoxId() string {
	return p.MessageBoxId
}
func (p *TalkServiceClearMessageBoxArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceClearMessageBoxArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *TalkServiceClearMessageBoxArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MessageBoxId = v
	}
	return nil
}

func (p *TalkServiceClearMessageBoxArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clearMessageBox_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceClearMessageBoxArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:channelId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.channelId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:channelId: ", p), err)
	}
	return err
}

func (p *TalkServiceClearMessageBoxArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBoxId", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:messageBoxId: ", p), err)
	}
	if err := oprot.WriteString(string(p.MessageBoxId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.messageBoxId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:messageBoxId: ", p), err)
	}
	return err
}

func (p *TalkServiceClearMessageBoxArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceClearMessageBoxArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceClearMessageBoxResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceClearMessageBoxResult() *TalkServiceClearMessageBoxResult {
	return &TalkServiceClearMessageBoxResult{}
}

var TalkServiceClearMessageBoxResult_E_DEFAULT *TalkException

func (p *TalkServiceClearMessageBoxResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceClearMessageBoxResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceClearMessageBoxResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceClearMessageBoxResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceClearMessageBoxResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceClearMessageBoxResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clearMessageBox_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceClearMessageBoxResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceClearMessageBoxResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceClearMessageBoxResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type TalkServiceCloseProximityMatchArgs struct {
	// unused field # 1
	SessionId string `thrift:"sessionId,2" json:"sessionId"`
}

func NewTalkServiceCloseProximityMatchArgs() *TalkServiceCloseProximityMatchArgs {
	return &TalkServiceCloseProximityMatchArgs{}
}

func (p *TalkServiceCloseProximityMatchArgs) GetSessionId() string {
	return p.SessionId
}
func (p *TalkServiceCloseProximityMatchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCloseProximityMatchArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *TalkServiceCloseProximityMatchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("closeProximityMatch_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCloseProximityMatchArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceCloseProximityMatchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCloseProximityMatchArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceCloseProximityMatchResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceCloseProximityMatchResult() *TalkServiceCloseProximityMatchResult {
	return &TalkServiceCloseProximityMatchResult{}
}

var TalkServiceCloseProximityMatchResult_E_DEFAULT *TalkException

func (p *TalkServiceCloseProximityMatchResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceCloseProximityMatchResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceCloseProximityMatchResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceCloseProximityMatchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCloseProximityMatchResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceCloseProximityMatchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("closeProximityMatch_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCloseProximityMatchResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCloseProximityMatchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCloseProximityMatchResult(%+v)", *p)
}

// Attributes:
//  - Verifier
//  - PinCode
type TalkServiceConfirmEmailArgs struct {
	// unused field # 1
	Verifier string `thrift:"verifier,2" json:"verifier"`
	PinCode  string `thrift:"pinCode,3" json:"pinCode"`
}

func NewTalkServiceConfirmEmailArgs() *TalkServiceConfirmEmailArgs {
	return &TalkServiceConfirmEmailArgs{}
}

func (p *TalkServiceConfirmEmailArgs) GetVerifier() string {
	return p.Verifier
}

func (p *TalkServiceConfirmEmailArgs) GetPinCode() string {
	return p.PinCode
}
func (p *TalkServiceConfirmEmailArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceConfirmEmailArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *TalkServiceConfirmEmailArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PinCode = v
	}
	return nil
}

func (p *TalkServiceConfirmEmailArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("confirmEmail_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceConfirmEmailArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:verifier: ", p), err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.verifier (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:verifier: ", p), err)
	}
	return err
}

func (p *TalkServiceConfirmEmailArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pinCode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pinCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.PinCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pinCode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pinCode: ", p), err)
	}
	return err
}

func (p *TalkServiceConfirmEmailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceConfirmEmailArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceConfirmEmailResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceConfirmEmailResult() *TalkServiceConfirmEmailResult {
	return &TalkServiceConfirmEmailResult{}
}

var TalkServiceConfirmEmailResult_E_DEFAULT *TalkException

func (p *TalkServiceConfirmEmailResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceConfirmEmailResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceConfirmEmailResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceConfirmEmailResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceConfirmEmailResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceConfirmEmailResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("confirmEmail_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceConfirmEmailResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceConfirmEmailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceConfirmEmailResult(%+v)", *p)
}

type TalkServiceCreateAccountMigrationPincodeSessionArgs struct {
}

func NewTalkServiceCreateAccountMigrationPincodeSessionArgs() *TalkServiceCreateAccountMigrationPincodeSessionArgs {
	return &TalkServiceCreateAccountMigrationPincodeSessionArgs{}
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createAccountMigrationPincodeSession_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCreateAccountMigrationPincodeSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCreateAccountMigrationPincodeSessionResult struct {
	Success []string       `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceCreateAccountMigrationPincodeSessionResult() *TalkServiceCreateAccountMigrationPincodeSessionResult {
	return &TalkServiceCreateAccountMigrationPincodeSessionResult{}
}

var TalkServiceCreateAccountMigrationPincodeSessionResult_Success_DEFAULT []string

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) GetSuccess() []string {
	return p.Success
}

var TalkServiceCreateAccountMigrationPincodeSessionResult_E_DEFAULT *TalkException

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceCreateAccountMigrationPincodeSessionResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem272 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem272 = v
		}
		p.Success = append(p.Success, _elem272)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createAccountMigrationPincodeSession_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCreateAccountMigrationPincodeSessionResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - Name
//  - ContactIds
type TalkServiceCreateGroupArgs struct {
	Seq        int32    `thrift:"seq,1" json:"seq"`
	Name       string   `thrift:"name,2" json:"name"`
	ContactIds []string `thrift:"contactIds,3" json:"contactIds"`
}

func NewTalkServiceCreateGroupArgs() *TalkServiceCreateGroupArgs {
	return &TalkServiceCreateGroupArgs{}
}

func (p *TalkServiceCreateGroupArgs) GetSeq() int32 {
	return p.Seq
}

func (p *TalkServiceCreateGroupArgs) GetName() string {
	return p.Name
}

func (p *TalkServiceCreateGroupArgs) GetContactIds() []string {
	return p.ContactIds
}
func (p *TalkServiceCreateGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCreateGroupArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *TalkServiceCreateGroupArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TalkServiceCreateGroupArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ContactIds = tSlice
	for i := 0; i < size; i++ {
		var _elem273 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem273 = v
		}
		p.ContactIds = append(p.ContactIds, _elem273)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceCreateGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCreateGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateGroupArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ContactIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCreateGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCreateGroupResult struct {
	Success *Group         `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceCreateGroupResult() *TalkServiceCreateGroupResult {
	return &TalkServiceCreateGroupResult{}
}

var TalkServiceCreateGroupResult_Success_DEFAULT *Group

func (p *TalkServiceCreateGroupResult) GetSuccess() *Group {
	if !p.IsSetSuccess() {
		return TalkServiceCreateGroupResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceCreateGroupResult_E_DEFAULT *TalkException

func (p *TalkServiceCreateGroupResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceCreateGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceCreateGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceCreateGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceCreateGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCreateGroupResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Group{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceCreateGroupResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceCreateGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCreateGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCreateGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCreateGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCreateGroupResult(%+v)", *p)
}

// Attributes:
//  - URL
//  - CharacterSet
//  - ImageSize
//  - X
//  - Y
//  - Width
//  - Height
type TalkServiceCreateQrcodeBase64ImageArgs struct {
	// unused field # 1
	URL          string `thrift:"url,2" json:"url"`
	CharacterSet string `thrift:"characterSet,3" json:"characterSet"`
	ImageSize    int32  `thrift:"imageSize,4" json:"imageSize"`
	X            int32  `thrift:"x,5" json:"x"`
	Y            int32  `thrift:"y,6" json:"y"`
	Width        int32  `thrift:"width,7" json:"width"`
	Height       int32  `thrift:"height,8" json:"height"`
}

func NewTalkServiceCreateQrcodeBase64ImageArgs() *TalkServiceCreateQrcodeBase64ImageArgs {
	return &TalkServiceCreateQrcodeBase64ImageArgs{}
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) GetURL() string {
	return p.URL
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) GetCharacterSet() string {
	return p.CharacterSet
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) GetImageSize() int32 {
	return p.ImageSize
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) GetX() int32 {
	return p.X
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) GetY() int32 {
	return p.Y
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) GetWidth() int32 {
	return p.Width
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) GetHeight() int32 {
	return p.Height
}
func (p *TalkServiceCreateQrcodeBase64ImageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.URL = v
	}
	return nil
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CharacterSet = v
	}
	return nil
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ImageSize = v
	}
	return nil
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.X = v
	}
	return nil
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Y = v
	}
	return nil
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Width = v
	}
	return nil
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Height = v
	}
	return nil
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createQrcodeBase64Image_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("url", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:url: ", p), err)
	}
	if err := oprot.WriteString(string(p.URL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.url (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:url: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("characterSet", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:characterSet: ", p), err)
	}
	if err := oprot.WriteString(string(p.CharacterSet)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.characterSet (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:characterSet: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("imageSize", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:imageSize: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ImageSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.imageSize (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:imageSize: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("x", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:x: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.X)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.x (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:x: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("y", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:y: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Y)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.y (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:y: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("width", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:width: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Width)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.width (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:width: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("height", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:height: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Height)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.height (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:height: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateQrcodeBase64ImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCreateQrcodeBase64ImageArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCreateQrcodeBase64ImageResult struct {
	Success *string        `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceCreateQrcodeBase64ImageResult() *TalkServiceCreateQrcodeBase64ImageResult {
	return &TalkServiceCreateQrcodeBase64ImageResult{}
}

var TalkServiceCreateQrcodeBase64ImageResult_Success_DEFAULT string

func (p *TalkServiceCreateQrcodeBase64ImageResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return TalkServiceCreateQrcodeBase64ImageResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceCreateQrcodeBase64ImageResult_E_DEFAULT *TalkException

func (p *TalkServiceCreateQrcodeBase64ImageResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceCreateQrcodeBase64ImageResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceCreateQrcodeBase64ImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceCreateQrcodeBase64ImageResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceCreateQrcodeBase64ImageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCreateQrcodeBase64ImageResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceCreateQrcodeBase64ImageResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceCreateQrcodeBase64ImageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createQrcodeBase64Image_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCreateQrcodeBase64ImageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCreateQrcodeBase64ImageResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCreateQrcodeBase64ImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCreateQrcodeBase64ImageResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ContactIds
type TalkServiceCreateRoomArgs struct {
	ReqSeq     int32    `thrift:"reqSeq,1" json:"reqSeq"`
	ContactIds []string `thrift:"contactIds,2" json:"contactIds"`
}

func NewTalkServiceCreateRoomArgs() *TalkServiceCreateRoomArgs {
	return &TalkServiceCreateRoomArgs{}
}

func (p *TalkServiceCreateRoomArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceCreateRoomArgs) GetContactIds() []string {
	return p.ContactIds
}
func (p *TalkServiceCreateRoomArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCreateRoomArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceCreateRoomArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ContactIds = tSlice
	for i := 0; i < size; i++ {
		var _elem274 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem274 = v
		}
		p.ContactIds = append(p.ContactIds, _elem274)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceCreateRoomArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createRoom_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCreateRoomArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateRoomArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:contactIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ContactIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:contactIds: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCreateRoomArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCreateRoomResult struct {
	Success *Room          `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceCreateRoomResult() *TalkServiceCreateRoomResult {
	return &TalkServiceCreateRoomResult{}
}

var TalkServiceCreateRoomResult_Success_DEFAULT *Room

func (p *TalkServiceCreateRoomResult) GetSuccess() *Room {
	if !p.IsSetSuccess() {
		return TalkServiceCreateRoomResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceCreateRoomResult_E_DEFAULT *TalkException

func (p *TalkServiceCreateRoomResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceCreateRoomResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceCreateRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceCreateRoomResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceCreateRoomResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCreateRoomResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Room{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceCreateRoomResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceCreateRoomResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createRoom_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCreateRoomResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCreateRoomResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCreateRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCreateRoomResult(%+v)", *p)
}

type TalkServiceDisableNearbyArgs struct {
}

func NewTalkServiceDisableNearbyArgs() *TalkServiceDisableNearbyArgs {
	return &TalkServiceDisableNearbyArgs{}
}

func (p *TalkServiceDisableNearbyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceDisableNearbyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("disableNearby_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceDisableNearbyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceDisableNearbyArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceDisableNearbyResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceDisableNearbyResult() *TalkServiceDisableNearbyResult {
	return &TalkServiceDisableNearbyResult{}
}

var TalkServiceDisableNearbyResult_E_DEFAULT *TalkException

func (p *TalkServiceDisableNearbyResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceDisableNearbyResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceDisableNearbyResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceDisableNearbyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceDisableNearbyResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceDisableNearbyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("disableNearby_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceDisableNearbyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceDisableNearbyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceDisableNearbyResult(%+v)", *p)
}

// Attributes:
//  - LocalRev
//  - Count
type TalkServiceFetchOperationsArgs struct {
	// unused field # 1
	LocalRev int64 `thrift:"localRev,2" json:"localRev"`
	Count    int32 `thrift:"count,3" json:"count"`
}

func NewTalkServiceFetchOperationsArgs() *TalkServiceFetchOperationsArgs {
	return &TalkServiceFetchOperationsArgs{}
}

func (p *TalkServiceFetchOperationsArgs) GetLocalRev() int64 {
	return p.LocalRev
}

func (p *TalkServiceFetchOperationsArgs) GetCount() int32 {
	return p.Count
}
func (p *TalkServiceFetchOperationsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFetchOperationsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LocalRev = v
	}
	return nil
}

func (p *TalkServiceFetchOperationsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TalkServiceFetchOperationsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchOperations_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFetchOperationsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("localRev", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:localRev: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LocalRev)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.localRev (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:localRev: ", p), err)
	}
	return err
}

func (p *TalkServiceFetchOperationsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *TalkServiceFetchOperationsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFetchOperationsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFetchOperationsResult struct {
	Success []*Operation   `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceFetchOperationsResult() *TalkServiceFetchOperationsResult {
	return &TalkServiceFetchOperationsResult{}
}

var TalkServiceFetchOperationsResult_Success_DEFAULT []*Operation

func (p *TalkServiceFetchOperationsResult) GetSuccess() []*Operation {
	return p.Success
}

var TalkServiceFetchOperationsResult_E_DEFAULT *TalkException

func (p *TalkServiceFetchOperationsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFetchOperationsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFetchOperationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFetchOperationsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFetchOperationsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFetchOperationsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Operation, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem275 := &Operation{}
		if err := _elem275.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem275), err)
		}
		p.Success = append(p.Success, _elem275)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceFetchOperationsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFetchOperationsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchOperations_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFetchOperationsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFetchOperationsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFetchOperationsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFetchOperationsResult(%+v)", *p)
}

// Attributes:
//  - LocalRev
//  - Count
//  - GlobalRev
//  - IndividualRev
type TalkServiceFetchOpsArgs struct {
	// unused field # 1
	LocalRev      int64 `thrift:"localRev,2" json:"localRev"`
	Count         int32 `thrift:"count,3" json:"count"`
	GlobalRev     int64 `thrift:"globalRev,4" json:"globalRev"`
	IndividualRev int64 `thrift:"individualRev,5" json:"individualRev"`
}

func NewTalkServiceFetchOpsArgs() *TalkServiceFetchOpsArgs {
	return &TalkServiceFetchOpsArgs{}
}

func (p *TalkServiceFetchOpsArgs) GetLocalRev() int64 {
	return p.LocalRev
}

func (p *TalkServiceFetchOpsArgs) GetCount() int32 {
	return p.Count
}

func (p *TalkServiceFetchOpsArgs) GetGlobalRev() int64 {
	return p.GlobalRev
}

func (p *TalkServiceFetchOpsArgs) GetIndividualRev() int64 {
	return p.IndividualRev
}
func (p *TalkServiceFetchOpsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFetchOpsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LocalRev = v
	}
	return nil
}

func (p *TalkServiceFetchOpsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TalkServiceFetchOpsArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.GlobalRev = v
	}
	return nil
}

func (p *TalkServiceFetchOpsArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IndividualRev = v
	}
	return nil
}

func (p *TalkServiceFetchOpsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchOps_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFetchOpsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("localRev", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:localRev: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LocalRev)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.localRev (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:localRev: ", p), err)
	}
	return err
}

func (p *TalkServiceFetchOpsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *TalkServiceFetchOpsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("globalRev", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:globalRev: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.GlobalRev)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.globalRev (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:globalRev: ", p), err)
	}
	return err
}

func (p *TalkServiceFetchOpsArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("individualRev", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:individualRev: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.IndividualRev)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.individualRev (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:individualRev: ", p), err)
	}
	return err
}

func (p *TalkServiceFetchOpsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFetchOpsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFetchOpsResult struct {
	Success []*Operation   `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceFetchOpsResult() *TalkServiceFetchOpsResult {
	return &TalkServiceFetchOpsResult{}
}

var TalkServiceFetchOpsResult_Success_DEFAULT []*Operation

func (p *TalkServiceFetchOpsResult) GetSuccess() []*Operation {
	return p.Success
}

var TalkServiceFetchOpsResult_E_DEFAULT *TalkException

func (p *TalkServiceFetchOpsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFetchOpsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFetchOpsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFetchOpsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFetchOpsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFetchOpsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Operation, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem276 := &Operation{}
		if err := _elem276.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem276), err)
		}
		p.Success = append(p.Success, _elem276)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceFetchOpsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFetchOpsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchOps_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFetchOpsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFetchOpsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFetchOpsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFetchOpsResult(%+v)", *p)
}

// Attributes:
//  - Emails
type TalkServiceFindContactsByEmailArgs struct {
	// unused field # 1
	Emails map[string]bool `thrift:"emails,2" json:"emails"`
}

func NewTalkServiceFindContactsByEmailArgs() *TalkServiceFindContactsByEmailArgs {
	return &TalkServiceFindContactsByEmailArgs{}
}

func (p *TalkServiceFindContactsByEmailArgs) GetEmails() map[string]bool {
	return p.Emails
}
func (p *TalkServiceFindContactsByEmailArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindContactsByEmailArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Emails = tSet
	for i := 0; i < size; i++ {
		var _elem277 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem277 = v
		}
		p.Emails[_elem277] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactsByEmailArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactsByEmail_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactsByEmailArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("emails", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:emails: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Emails)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Emails {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:emails: ", p), err)
	}
	return err
}

func (p *TalkServiceFindContactsByEmailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindContactsByEmailArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindContactsByEmailResult struct {
	Success map[string]*Contact `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException      `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceFindContactsByEmailResult() *TalkServiceFindContactsByEmailResult {
	return &TalkServiceFindContactsByEmailResult{}
}

var TalkServiceFindContactsByEmailResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindContactsByEmailResult) GetSuccess() map[string]*Contact {
	return p.Success
}

var TalkServiceFindContactsByEmailResult_E_DEFAULT *TalkException

func (p *TalkServiceFindContactsByEmailResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFindContactsByEmailResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFindContactsByEmailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFindContactsByEmailResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFindContactsByEmailResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindContactsByEmailResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*Contact, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key278 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key278 = v
		}
		_val279 := &Contact{}
		if err := _val279.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val279), err)
		}
		p.Success[_key278] = _val279
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactsByEmailResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFindContactsByEmailResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactsByEmail_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactsByEmailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindContactsByEmailResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindContactsByEmailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindContactsByEmailResult(%+v)", *p)
}

// Attributes:
//  - Phones
type TalkServiceFindContactsByPhoneArgs struct {
	// unused field # 1
	Phones map[string]bool `thrift:"phones,2" json:"phones"`
}

func NewTalkServiceFindContactsByPhoneArgs() *TalkServiceFindContactsByPhoneArgs {
	return &TalkServiceFindContactsByPhoneArgs{}
}

func (p *TalkServiceFindContactsByPhoneArgs) GetPhones() map[string]bool {
	return p.Phones
}
func (p *TalkServiceFindContactsByPhoneArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindContactsByPhoneArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Phones = tSet
	for i := 0; i < size; i++ {
		var _elem280 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem280 = v
		}
		p.Phones[_elem280] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactsByPhoneArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactsByPhone_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactsByPhoneArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phones", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phones: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Phones)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Phones {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phones: ", p), err)
	}
	return err
}

func (p *TalkServiceFindContactsByPhoneArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindContactsByPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindContactsByPhoneResult struct {
	Success map[string]*Contact `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException      `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceFindContactsByPhoneResult() *TalkServiceFindContactsByPhoneResult {
	return &TalkServiceFindContactsByPhoneResult{}
}

var TalkServiceFindContactsByPhoneResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindContactsByPhoneResult) GetSuccess() map[string]*Contact {
	return p.Success
}

var TalkServiceFindContactsByPhoneResult_E_DEFAULT *TalkException

func (p *TalkServiceFindContactsByPhoneResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFindContactsByPhoneResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFindContactsByPhoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFindContactsByPhoneResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFindContactsByPhoneResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindContactsByPhoneResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*Contact, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key281 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key281 = v
		}
		_val282 := &Contact{}
		if err := _val282.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val282), err)
		}
		p.Success[_key281] = _val282
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactsByPhoneResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFindContactsByPhoneResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactsByPhone_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactsByPhoneResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindContactsByPhoneResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindContactsByPhoneResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindContactsByPhoneResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Emails
type TalkServiceFindAndAddContactsByEmailArgs struct {
	ReqSeq int32           `thrift:"reqSeq,1" json:"reqSeq"`
	Emails map[string]bool `thrift:"emails,2" json:"emails"`
}

func NewTalkServiceFindAndAddContactsByEmailArgs() *TalkServiceFindAndAddContactsByEmailArgs {
	return &TalkServiceFindAndAddContactsByEmailArgs{}
}

func (p *TalkServiceFindAndAddContactsByEmailArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceFindAndAddContactsByEmailArgs) GetEmails() map[string]bool {
	return p.Emails
}
func (p *TalkServiceFindAndAddContactsByEmailArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByEmailArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByEmailArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Emails = tSet
	for i := 0; i < size; i++ {
		var _elem283 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem283 = v
		}
		p.Emails[_elem283] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByEmailArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByEmail_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByEmailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByEmailArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("emails", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:emails: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Emails)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Emails {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:emails: ", p), err)
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByEmailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindAndAddContactsByEmailArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindAndAddContactsByEmailResult struct {
	Success map[string]*Contact `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException      `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceFindAndAddContactsByEmailResult() *TalkServiceFindAndAddContactsByEmailResult {
	return &TalkServiceFindAndAddContactsByEmailResult{}
}

var TalkServiceFindAndAddContactsByEmailResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindAndAddContactsByEmailResult) GetSuccess() map[string]*Contact {
	return p.Success
}

var TalkServiceFindAndAddContactsByEmailResult_E_DEFAULT *TalkException

func (p *TalkServiceFindAndAddContactsByEmailResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFindAndAddContactsByEmailResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFindAndAddContactsByEmailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFindAndAddContactsByEmailResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFindAndAddContactsByEmailResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByEmailResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*Contact, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key284 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key284 = v
		}
		_val285 := &Contact{}
		if err := _val285.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val285), err)
		}
		p.Success[_key284] = _val285
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByEmailResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByEmailResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByEmail_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByEmailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByEmailResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByEmailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindAndAddContactsByEmailResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Mid
type TalkServiceFindAndAddContactsByMidArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" json:"reqSeq"`
	Mid    string `thrift:"mid,2" json:"mid"`
}

func NewTalkServiceFindAndAddContactsByMidArgs() *TalkServiceFindAndAddContactsByMidArgs {
	return &TalkServiceFindAndAddContactsByMidArgs{}
}

func (p *TalkServiceFindAndAddContactsByMidArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceFindAndAddContactsByMidArgs) GetMid() string {
	return p.Mid
}
func (p *TalkServiceFindAndAddContactsByMidArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByMid_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err)
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindAndAddContactsByMidArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindAndAddContactsByMidResult struct {
	Success map[string]*Contact `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException      `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceFindAndAddContactsByMidResult() *TalkServiceFindAndAddContactsByMidResult {
	return &TalkServiceFindAndAddContactsByMidResult{}
}

var TalkServiceFindAndAddContactsByMidResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindAndAddContactsByMidResult) GetSuccess() map[string]*Contact {
	return p.Success
}

var TalkServiceFindAndAddContactsByMidResult_E_DEFAULT *TalkException

func (p *TalkServiceFindAndAddContactsByMidResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFindAndAddContactsByMidResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFindAndAddContactsByMidResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*Contact, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key286 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key286 = v
		}
		_val287 := &Contact{}
		if err := _val287.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val287), err)
		}
		p.Success[_key286] = _val287
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByMid_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByMidResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByMidResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindAndAddContactsByMidResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Phones
type TalkServiceFindAndAddContactsByPhoneArgs struct {
	ReqSeq int32           `thrift:"reqSeq,1" json:"reqSeq"`
	Phones map[string]bool `thrift:"phones,2" json:"phones"`
}

func NewTalkServiceFindAndAddContactsByPhoneArgs() *TalkServiceFindAndAddContactsByPhoneArgs {
	return &TalkServiceFindAndAddContactsByPhoneArgs{}
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) GetPhones() map[string]bool {
	return p.Phones
}
func (p *TalkServiceFindAndAddContactsByPhoneArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Phones = tSet
	for i := 0; i < size; i++ {
		var _elem288 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem288 = v
		}
		p.Phones[_elem288] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByPhone_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phones", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phones: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Phones)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Phones {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phones: ", p), err)
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindAndAddContactsByPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindAndAddContactsByPhoneResult struct {
	Success map[string]*Contact `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException      `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceFindAndAddContactsByPhoneResult() *TalkServiceFindAndAddContactsByPhoneResult {
	return &TalkServiceFindAndAddContactsByPhoneResult{}
}

var TalkServiceFindAndAddContactsByPhoneResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindAndAddContactsByPhoneResult) GetSuccess() map[string]*Contact {
	return p.Success
}

var TalkServiceFindAndAddContactsByPhoneResult_E_DEFAULT *TalkException

func (p *TalkServiceFindAndAddContactsByPhoneResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFindAndAddContactsByPhoneResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFindAndAddContactsByPhoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*Contact, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key289 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key289 = v
		}
		_val290 := &Contact{}
		if err := _val290.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val290), err)
		}
		p.Success[_key289] = _val290
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByPhone_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindAndAddContactsByPhoneResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Userid
type TalkServiceFindAndAddContactsByUseridArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" json:"reqSeq"`
	Userid string `thrift:"userid,2" json:"userid"`
}

func NewTalkServiceFindAndAddContactsByUseridArgs() *TalkServiceFindAndAddContactsByUseridArgs {
	return &TalkServiceFindAndAddContactsByUseridArgs{}
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) GetUserid() string {
	return p.Userid
}
func (p *TalkServiceFindAndAddContactsByUseridArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Userid = v
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByUserid_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Userid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userid: ", p), err)
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindAndAddContactsByUseridArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindAndAddContactsByUseridResult struct {
	Success map[string]*Contact `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException      `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceFindAndAddContactsByUseridResult() *TalkServiceFindAndAddContactsByUseridResult {
	return &TalkServiceFindAndAddContactsByUseridResult{}
}

var TalkServiceFindAndAddContactsByUseridResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindAndAddContactsByUseridResult) GetSuccess() map[string]*Contact {
	return p.Success
}

var TalkServiceFindAndAddContactsByUseridResult_E_DEFAULT *TalkException

func (p *TalkServiceFindAndAddContactsByUseridResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFindAndAddContactsByUseridResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFindAndAddContactsByUseridResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*Contact, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key291 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key291 = v
		}
		_val292 := &Contact{}
		if err := _val292.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val292), err)
		}
		p.Success[_key291] = _val292
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByUserid_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByUseridResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindAndAddContactsByUseridResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindAndAddContactsByUseridResult(%+v)", *p)
}

// Attributes:
//  - Userid
//  - Reference
type TalkServiceFindContactByMetaTagArgs struct {
	// unused field # 1
	Userid    string `thrift:"userid,2" json:"userid"`
	Reference string `thrift:"reference,3" json:"reference"`
}

func NewTalkServiceFindContactByMetaTagArgs() *TalkServiceFindContactByMetaTagArgs {
	return &TalkServiceFindContactByMetaTagArgs{}
}

func (p *TalkServiceFindContactByMetaTagArgs) GetUserid() string {
	return p.Userid
}

func (p *TalkServiceFindContactByMetaTagArgs) GetReference() string {
	return p.Reference
}
func (p *TalkServiceFindContactByMetaTagArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindContactByMetaTagArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Userid = v
	}
	return nil
}

func (p *TalkServiceFindContactByMetaTagArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Reference = v
	}
	return nil
}

func (p *TalkServiceFindContactByMetaTagArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactByMetaTag_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactByMetaTagArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Userid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userid: ", p), err)
	}
	return err
}

func (p *TalkServiceFindContactByMetaTagArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reference", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err)
	}
	if err := oprot.WriteString(string(p.Reference)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err)
	}
	return err
}

func (p *TalkServiceFindContactByMetaTagArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindContactByMetaTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindContactByMetaTagResult struct {
	Success *Contact       `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceFindContactByMetaTagResult() *TalkServiceFindContactByMetaTagResult {
	return &TalkServiceFindContactByMetaTagResult{}
}

var TalkServiceFindContactByMetaTagResult_Success_DEFAULT *Contact

func (p *TalkServiceFindContactByMetaTagResult) GetSuccess() *Contact {
	if !p.IsSetSuccess() {
		return TalkServiceFindContactByMetaTagResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceFindContactByMetaTagResult_E_DEFAULT *TalkException

func (p *TalkServiceFindContactByMetaTagResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFindContactByMetaTagResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFindContactByMetaTagResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFindContactByMetaTagResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFindContactByMetaTagResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindContactByMetaTagResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Contact{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceFindContactByMetaTagResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFindContactByMetaTagResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactByMetaTag_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactByMetaTagResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindContactByMetaTagResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindContactByMetaTagResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindContactByMetaTagResult(%+v)", *p)
}

// Attributes:
//  - TicketId
type TalkServiceFindContactByUserTicketArgs struct {
	// unused field # 1
	TicketId string `thrift:"ticketId,2" json:"ticketId"`
}

func NewTalkServiceFindContactByUserTicketArgs() *TalkServiceFindContactByUserTicketArgs {
	return &TalkServiceFindContactByUserTicketArgs{}
}

func (p *TalkServiceFindContactByUserTicketArgs) GetTicketId() string {
	return p.TicketId
}
func (p *TalkServiceFindContactByUserTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindContactByUserTicketArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TicketId = v
	}
	return nil
}

func (p *TalkServiceFindContactByUserTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactByUserTicket_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactByUserTicketArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ticketId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ticketId: ", p), err)
	}
	if err := oprot.WriteString(string(p.TicketId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ticketId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ticketId: ", p), err)
	}
	return err
}

func (p *TalkServiceFindContactByUserTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindContactByUserTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindContactByUserTicketResult struct {
	Success *Contact       `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceFindContactByUserTicketResult() *TalkServiceFindContactByUserTicketResult {
	return &TalkServiceFindContactByUserTicketResult{}
}

var TalkServiceFindContactByUserTicketResult_Success_DEFAULT *Contact

func (p *TalkServiceFindContactByUserTicketResult) GetSuccess() *Contact {
	if !p.IsSetSuccess() {
		return TalkServiceFindContactByUserTicketResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceFindContactByUserTicketResult_E_DEFAULT *TalkException

func (p *TalkServiceFindContactByUserTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFindContactByUserTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFindContactByUserTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFindContactByUserTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFindContactByUserTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindContactByUserTicketResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Contact{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceFindContactByUserTicketResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFindContactByUserTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactByUserTicket_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindContactByUserTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindContactByUserTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindContactByUserTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindContactByUserTicketResult(%+v)", *p)
}

// Attributes:
//  - TicketId
type TalkServiceFindGroupByTicketArgs struct {
	TicketId string `thrift:"ticketId,1" json:"ticketId"`
}

func NewTalkServiceFindGroupByTicketArgs() *TalkServiceFindGroupByTicketArgs {
	return &TalkServiceFindGroupByTicketArgs{}
}

func (p *TalkServiceFindGroupByTicketArgs) GetTicketId() string {
	return p.TicketId
}
func (p *TalkServiceFindGroupByTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindGroupByTicketArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TicketId = v
	}
	return nil
}

func (p *TalkServiceFindGroupByTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findGroupByTicket_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindGroupByTicketArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ticketId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ticketId: ", p), err)
	}
	if err := oprot.WriteString(string(p.TicketId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ticketId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ticketId: ", p), err)
	}
	return err
}

func (p *TalkServiceFindGroupByTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindGroupByTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindGroupByTicketResult struct {
	Success *Group         `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceFindGroupByTicketResult() *TalkServiceFindGroupByTicketResult {
	return &TalkServiceFindGroupByTicketResult{}
}

var TalkServiceFindGroupByTicketResult_Success_DEFAULT *Group

func (p *TalkServiceFindGroupByTicketResult) GetSuccess() *Group {
	if !p.IsSetSuccess() {
		return TalkServiceFindGroupByTicketResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceFindGroupByTicketResult_E_DEFAULT *TalkException

func (p *TalkServiceFindGroupByTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFindGroupByTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFindGroupByTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFindGroupByTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFindGroupByTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindGroupByTicketResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Group{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceFindGroupByTicketResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFindGroupByTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findGroupByTicket_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindGroupByTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindGroupByTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindGroupByTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindGroupByTicketResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type TalkServiceFinishUpdateVerificationArgs struct {
	// unused field # 1
	SessionId string `thrift:"sessionId,2" json:"sessionId"`
}

func NewTalkServiceFinishUpdateVerificationArgs() *TalkServiceFinishUpdateVerificationArgs {
	return &TalkServiceFinishUpdateVerificationArgs{}
}

func (p *TalkServiceFinishUpdateVerificationArgs) GetSessionId() string {
	return p.SessionId
}
func (p *TalkServiceFinishUpdateVerificationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFinishUpdateVerificationArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *TalkServiceFinishUpdateVerificationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("finishUpdateVerification_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFinishUpdateVerificationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceFinishUpdateVerificationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFinishUpdateVerificationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceFinishUpdateVerificationResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceFinishUpdateVerificationResult() *TalkServiceFinishUpdateVerificationResult {
	return &TalkServiceFinishUpdateVerificationResult{}
}

var TalkServiceFinishUpdateVerificationResult_E_DEFAULT *TalkException

func (p *TalkServiceFinishUpdateVerificationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFinishUpdateVerificationResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFinishUpdateVerificationResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFinishUpdateVerificationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFinishUpdateVerificationResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFinishUpdateVerificationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("finishUpdateVerification_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFinishUpdateVerificationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFinishUpdateVerificationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFinishUpdateVerificationResult(%+v)", *p)
}

// Attributes:
//  - ExpirationTime
//  - MaxUseCount
type TalkServiceGenerateUserTicketArgs struct {
	// unused fields # 1 to 2
	ExpirationTime int64 `thrift:"expirationTime,3" json:"expirationTime"`
	MaxUseCount    int32 `thrift:"maxUseCount,4" json:"maxUseCount"`
}

func NewTalkServiceGenerateUserTicketArgs() *TalkServiceGenerateUserTicketArgs {
	return &TalkServiceGenerateUserTicketArgs{}
}

func (p *TalkServiceGenerateUserTicketArgs) GetExpirationTime() int64 {
	return p.ExpirationTime
}

func (p *TalkServiceGenerateUserTicketArgs) GetMaxUseCount() int32 {
	return p.MaxUseCount
}
func (p *TalkServiceGenerateUserTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGenerateUserTicketArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ExpirationTime = v
	}
	return nil
}

func (p *TalkServiceGenerateUserTicketArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MaxUseCount = v
	}
	return nil
}

func (p *TalkServiceGenerateUserTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("generateUserTicket_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGenerateUserTicketArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expirationTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expirationTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ExpirationTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.expirationTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expirationTime: ", p), err)
	}
	return err
}

func (p *TalkServiceGenerateUserTicketArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxUseCount", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:maxUseCount: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxUseCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxUseCount (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:maxUseCount: ", p), err)
	}
	return err
}

func (p *TalkServiceGenerateUserTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGenerateUserTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGenerateUserTicketResult struct {
	Success *Ticket        `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGenerateUserTicketResult() *TalkServiceGenerateUserTicketResult {
	return &TalkServiceGenerateUserTicketResult{}
}

var TalkServiceGenerateUserTicketResult_Success_DEFAULT *Ticket

func (p *TalkServiceGenerateUserTicketResult) GetSuccess() *Ticket {
	if !p.IsSetSuccess() {
		return TalkServiceGenerateUserTicketResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGenerateUserTicketResult_E_DEFAULT *TalkException

func (p *TalkServiceGenerateUserTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGenerateUserTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGenerateUserTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGenerateUserTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGenerateUserTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGenerateUserTicketResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Ticket{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGenerateUserTicketResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGenerateUserTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("generateUserTicket_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGenerateUserTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGenerateUserTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGenerateUserTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGenerateUserTicketResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type TalkServiceGetAcceptedProximityMatchesArgs struct {
	// unused field # 1
	SessionId string `thrift:"sessionId,2" json:"sessionId"`
}

func NewTalkServiceGetAcceptedProximityMatchesArgs() *TalkServiceGetAcceptedProximityMatchesArgs {
	return &TalkServiceGetAcceptedProximityMatchesArgs{}
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs) GetSessionId() string {
	return p.SessionId
}
func (p *TalkServiceGetAcceptedProximityMatchesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAcceptedProximityMatches_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetAcceptedProximityMatchesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetAcceptedProximityMatchesResult struct {
	Success map[string]bool `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException  `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetAcceptedProximityMatchesResult() *TalkServiceGetAcceptedProximityMatchesResult {
	return &TalkServiceGetAcceptedProximityMatchesResult{}
}

var TalkServiceGetAcceptedProximityMatchesResult_Success_DEFAULT map[string]bool

func (p *TalkServiceGetAcceptedProximityMatchesResult) GetSuccess() map[string]bool {
	return p.Success
}

var TalkServiceGetAcceptedProximityMatchesResult_E_DEFAULT *TalkException

func (p *TalkServiceGetAcceptedProximityMatchesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetAcceptedProximityMatchesResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetAcceptedProximityMatchesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Success = tSet
	for i := 0; i < size; i++ {
		var _elem293 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem293 = v
		}
		p.Success[_elem293] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAcceptedProximityMatches_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.SET, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetAcceptedProximityMatchesResult(%+v)", *p)
}

type TalkServiceGetAllContactIdsArgs struct {
}

func NewTalkServiceGetAllContactIdsArgs() *TalkServiceGetAllContactIdsArgs {
	return &TalkServiceGetAllContactIdsArgs{}
}

func (p *TalkServiceGetAllContactIdsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetAllContactIdsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllContactIds_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetAllContactIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetAllContactIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetAllContactIdsResult struct {
	Success []string       `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetAllContactIdsResult() *TalkServiceGetAllContactIdsResult {
	return &TalkServiceGetAllContactIdsResult{}
}

var TalkServiceGetAllContactIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetAllContactIdsResult) GetSuccess() []string {
	return p.Success
}

var TalkServiceGetAllContactIdsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetAllContactIdsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetAllContactIdsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetAllContactIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetAllContactIdsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetAllContactIdsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetAllContactIdsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem294 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem294 = v
		}
		p.Success = append(p.Success, _elem294)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetAllContactIdsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetAllContactIdsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllContactIds_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetAllContactIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetAllContactIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetAllContactIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetAllContactIdsResult(%+v)", *p)
}

type TalkServiceGetAnalyticsInfoArgs struct {
}

func NewTalkServiceGetAnalyticsInfoArgs() *TalkServiceGetAnalyticsInfoArgs {
	return &TalkServiceGetAnalyticsInfoArgs{}
}

func (p *TalkServiceGetAnalyticsInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetAnalyticsInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAnalyticsInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetAnalyticsInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetAnalyticsInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetAnalyticsInfoResult struct {
	Success *AnalyticsInfo `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetAnalyticsInfoResult() *TalkServiceGetAnalyticsInfoResult {
	return &TalkServiceGetAnalyticsInfoResult{}
}

var TalkServiceGetAnalyticsInfoResult_Success_DEFAULT *AnalyticsInfo

func (p *TalkServiceGetAnalyticsInfoResult) GetSuccess() *AnalyticsInfo {
	if !p.IsSetSuccess() {
		return TalkServiceGetAnalyticsInfoResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetAnalyticsInfoResult_E_DEFAULT *TalkException

func (p *TalkServiceGetAnalyticsInfoResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetAnalyticsInfoResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetAnalyticsInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetAnalyticsInfoResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetAnalyticsInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetAnalyticsInfoResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &AnalyticsInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetAnalyticsInfoResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetAnalyticsInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAnalyticsInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetAnalyticsInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetAnalyticsInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetAnalyticsInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetAnalyticsInfoResult(%+v)", *p)
}

// Attributes:
//  - KeepLoggedIn
//  - SystemName
type TalkServiceGetAuthQrcodeArgs struct {
	// unused field # 1
	KeepLoggedIn bool   `thrift:"keepLoggedIn,2" json:"keepLoggedIn"`
	SystemName   string `thrift:"systemName,3" json:"systemName"`
}

func NewTalkServiceGetAuthQrcodeArgs() *TalkServiceGetAuthQrcodeArgs {
	return &TalkServiceGetAuthQrcodeArgs{}
}

func (p *TalkServiceGetAuthQrcodeArgs) GetKeepLoggedIn() bool {
	return p.KeepLoggedIn
}

func (p *TalkServiceGetAuthQrcodeArgs) GetSystemName() string {
	return p.SystemName
}
func (p *TalkServiceGetAuthQrcodeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetAuthQrcodeArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.KeepLoggedIn = v
	}
	return nil
}

func (p *TalkServiceGetAuthQrcodeArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SystemName = v
	}
	return nil
}

func (p *TalkServiceGetAuthQrcodeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAuthQrcode_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetAuthQrcodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keepLoggedIn", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keepLoggedIn: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.KeepLoggedIn)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.keepLoggedIn (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keepLoggedIn: ", p), err)
	}
	return err
}

func (p *TalkServiceGetAuthQrcodeArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("systemName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemName: ", p), err)
	}
	if err := oprot.WriteString(string(p.SystemName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.systemName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemName: ", p), err)
	}
	return err
}

func (p *TalkServiceGetAuthQrcodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetAuthQrcodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetAuthQrcodeResult struct {
	Success *AuthQrcode    `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetAuthQrcodeResult() *TalkServiceGetAuthQrcodeResult {
	return &TalkServiceGetAuthQrcodeResult{}
}

var TalkServiceGetAuthQrcodeResult_Success_DEFAULT *AuthQrcode

func (p *TalkServiceGetAuthQrcodeResult) GetSuccess() *AuthQrcode {
	if !p.IsSetSuccess() {
		return TalkServiceGetAuthQrcodeResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetAuthQrcodeResult_E_DEFAULT *TalkException

func (p *TalkServiceGetAuthQrcodeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetAuthQrcodeResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetAuthQrcodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetAuthQrcodeResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetAuthQrcodeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetAuthQrcodeResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &AuthQrcode{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetAuthQrcodeResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetAuthQrcodeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAuthQrcode_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetAuthQrcodeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetAuthQrcodeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetAuthQrcodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetAuthQrcodeResult(%+v)", *p)
}

type TalkServiceGetBlockedContactIdsArgs struct {
}

func NewTalkServiceGetBlockedContactIdsArgs() *TalkServiceGetBlockedContactIdsArgs {
	return &TalkServiceGetBlockedContactIdsArgs{}
}

func (p *TalkServiceGetBlockedContactIdsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetBlockedContactIdsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBlockedContactIds_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetBlockedContactIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetBlockedContactIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetBlockedContactIdsResult struct {
	Success []string       `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetBlockedContactIdsResult() *TalkServiceGetBlockedContactIdsResult {
	return &TalkServiceGetBlockedContactIdsResult{}
}

var TalkServiceGetBlockedContactIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetBlockedContactIdsResult) GetSuccess() []string {
	return p.Success
}

var TalkServiceGetBlockedContactIdsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetBlockedContactIdsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetBlockedContactIdsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetBlockedContactIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetBlockedContactIdsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetBlockedContactIdsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetBlockedContactIdsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem295 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem295 = v
		}
		p.Success = append(p.Success, _elem295)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetBlockedContactIdsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetBlockedContactIdsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBlockedContactIds_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetBlockedContactIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetBlockedContactIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetBlockedContactIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetBlockedContactIdsResult(%+v)", *p)
}

// Attributes:
//  - Start
//  - Count
type TalkServiceGetBlockedContactIdsByRangeArgs struct {
	// unused field # 1
	Start int32 `thrift:"start,2" json:"start"`
	Count int32 `thrift:"count,3" json:"count"`
}

func NewTalkServiceGetBlockedContactIdsByRangeArgs() *TalkServiceGetBlockedContactIdsByRangeArgs {
	return &TalkServiceGetBlockedContactIdsByRangeArgs{}
}

func (p *TalkServiceGetBlockedContactIdsByRangeArgs) GetStart() int32 {
	return p.Start
}

func (p *TalkServiceGetBlockedContactIdsByRangeArgs) GetCount() int32 {
	return p.Count
}
func (p *TalkServiceGetBlockedContactIdsByRangeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetBlockedContactIdsByRangeArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Start = v
	}
	return nil
}

func (p *TalkServiceGetBlockedContactIdsByRangeArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TalkServiceGetBlockedContactIdsByRangeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBlockedContactIdsByRange_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetBlockedContactIdsByRangeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:start: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Start)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:start: ", p), err)
	}
	return err
}

func (p *TalkServiceGetBlockedContactIdsByRangeArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *TalkServiceGetBlockedContactIdsByRangeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetBlockedContactIdsByRangeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetBlockedContactIdsByRangeResult struct {
	Success []string       `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetBlockedContactIdsByRangeResult() *TalkServiceGetBlockedContactIdsByRangeResult {
	return &TalkServiceGetBlockedContactIdsByRangeResult{}
}

var TalkServiceGetBlockedContactIdsByRangeResult_Success_DEFAULT []string

func (p *TalkServiceGetBlockedContactIdsByRangeResult) GetSuccess() []string {
	return p.Success
}

var TalkServiceGetBlockedContactIdsByRangeResult_E_DEFAULT *TalkException

func (p *TalkServiceGetBlockedContactIdsByRangeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetBlockedContactIdsByRangeResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetBlockedContactIdsByRangeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetBlockedContactIdsByRangeResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetBlockedContactIdsByRangeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetBlockedContactIdsByRangeResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem296 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem296 = v
		}
		p.Success = append(p.Success, _elem296)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetBlockedContactIdsByRangeResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetBlockedContactIdsByRangeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBlockedContactIdsByRange_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetBlockedContactIdsByRangeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetBlockedContactIdsByRangeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetBlockedContactIdsByRangeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetBlockedContactIdsByRangeResult(%+v)", *p)
}

type TalkServiceGetBlockedRecommendationIdsArgs struct {
}

func NewTalkServiceGetBlockedRecommendationIdsArgs() *TalkServiceGetBlockedRecommendationIdsArgs {
	return &TalkServiceGetBlockedRecommendationIdsArgs{}
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBlockedRecommendationIds_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetBlockedRecommendationIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetBlockedRecommendationIdsResult struct {
	Success []string       `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetBlockedRecommendationIdsResult() *TalkServiceGetBlockedRecommendationIdsResult {
	return &TalkServiceGetBlockedRecommendationIdsResult{}
}

var TalkServiceGetBlockedRecommendationIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetBlockedRecommendationIdsResult) GetSuccess() []string {
	return p.Success
}

var TalkServiceGetBlockedRecommendationIdsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetBlockedRecommendationIdsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetBlockedRecommendationIdsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetBlockedRecommendationIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem297 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem297 = v
		}
		p.Success = append(p.Success, _elem297)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBlockedRecommendationIds_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetBlockedRecommendationIdsResult(%+v)", *p)
}

// Attributes:
//  - GroupId
type TalkServiceGetCompactGroupArgs struct {
	// unused field # 1
	GroupId string `thrift:"groupId,2" json:"groupId"`
}

func NewTalkServiceGetCompactGroupArgs() *TalkServiceGetCompactGroupArgs {
	return &TalkServiceGetCompactGroupArgs{}
}

func (p *TalkServiceGetCompactGroupArgs) GetGroupId() string {
	return p.GroupId
}
func (p *TalkServiceGetCompactGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetCompactGroupArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *TalkServiceGetCompactGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCompactGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetCompactGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceGetCompactGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetCompactGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetCompactGroupResult struct {
	Success *Group         `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetCompactGroupResult() *TalkServiceGetCompactGroupResult {
	return &TalkServiceGetCompactGroupResult{}
}

var TalkServiceGetCompactGroupResult_Success_DEFAULT *Group

func (p *TalkServiceGetCompactGroupResult) GetSuccess() *Group {
	if !p.IsSetSuccess() {
		return TalkServiceGetCompactGroupResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetCompactGroupResult_E_DEFAULT *TalkException

func (p *TalkServiceGetCompactGroupResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetCompactGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetCompactGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetCompactGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetCompactGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetCompactGroupResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Group{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetCompactGroupResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetCompactGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCompactGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetCompactGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetCompactGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetCompactGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetCompactGroupResult(%+v)", *p)
}

// Attributes:
//  - Revision
//  - RegionOfUsim
//  - RegionOfTelephone
//  - RegionOfLocale
//  - Carrier
type TalkServiceGetConfigurationsArgs struct {
	// unused field # 1
	Revision          int64  `thrift:"revision,2" json:"revision"`
	RegionOfUsim      string `thrift:"regionOfUsim,3" json:"regionOfUsim"`
	RegionOfTelephone string `thrift:"regionOfTelephone,4" json:"regionOfTelephone"`
	RegionOfLocale    string `thrift:"regionOfLocale,5" json:"regionOfLocale"`
	Carrier           string `thrift:"carrier,6" json:"carrier"`
}

func NewTalkServiceGetConfigurationsArgs() *TalkServiceGetConfigurationsArgs {
	return &TalkServiceGetConfigurationsArgs{}
}

func (p *TalkServiceGetConfigurationsArgs) GetRevision() int64 {
	return p.Revision
}

func (p *TalkServiceGetConfigurationsArgs) GetRegionOfUsim() string {
	return p.RegionOfUsim
}

func (p *TalkServiceGetConfigurationsArgs) GetRegionOfTelephone() string {
	return p.RegionOfTelephone
}

func (p *TalkServiceGetConfigurationsArgs) GetRegionOfLocale() string {
	return p.RegionOfLocale
}

func (p *TalkServiceGetConfigurationsArgs) GetCarrier() string {
	return p.Carrier
}
func (p *TalkServiceGetConfigurationsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetConfigurationsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Revision = v
	}
	return nil
}

func (p *TalkServiceGetConfigurationsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RegionOfUsim = v
	}
	return nil
}

func (p *TalkServiceGetConfigurationsArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.RegionOfTelephone = v
	}
	return nil
}

func (p *TalkServiceGetConfigurationsArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.RegionOfLocale = v
	}
	return nil
}

func (p *TalkServiceGetConfigurationsArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Carrier = v
	}
	return nil
}

func (p *TalkServiceGetConfigurationsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getConfigurations_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetConfigurationsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("revision", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:revision: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Revision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.revision (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:revision: ", p), err)
	}
	return err
}

func (p *TalkServiceGetConfigurationsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("regionOfUsim", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:regionOfUsim: ", p), err)
	}
	if err := oprot.WriteString(string(p.RegionOfUsim)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.regionOfUsim (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:regionOfUsim: ", p), err)
	}
	return err
}

func (p *TalkServiceGetConfigurationsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("regionOfTelephone", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:regionOfTelephone: ", p), err)
	}
	if err := oprot.WriteString(string(p.RegionOfTelephone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.regionOfTelephone (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:regionOfTelephone: ", p), err)
	}
	return err
}

func (p *TalkServiceGetConfigurationsArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("regionOfLocale", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:regionOfLocale: ", p), err)
	}
	if err := oprot.WriteString(string(p.RegionOfLocale)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.regionOfLocale (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:regionOfLocale: ", p), err)
	}
	return err
}

func (p *TalkServiceGetConfigurationsArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("carrier", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:carrier: ", p), err)
	}
	if err := oprot.WriteString(string(p.Carrier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.carrier (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:carrier: ", p), err)
	}
	return err
}

func (p *TalkServiceGetConfigurationsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetConfigurationsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetConfigurationsResult struct {
	Success *Configurations `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException  `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetConfigurationsResult() *TalkServiceGetConfigurationsResult {
	return &TalkServiceGetConfigurationsResult{}
}

var TalkServiceGetConfigurationsResult_Success_DEFAULT *Configurations

func (p *TalkServiceGetConfigurationsResult) GetSuccess() *Configurations {
	if !p.IsSetSuccess() {
		return TalkServiceGetConfigurationsResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetConfigurationsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetConfigurationsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetConfigurationsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetConfigurationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetConfigurationsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetConfigurationsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetConfigurationsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Configurations{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetConfigurationsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetConfigurationsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getConfigurations_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetConfigurationsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetConfigurationsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetConfigurationsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetConfigurationsResult(%+v)", *p)
}

// Attributes:
//  - ID
type TalkServiceGetContactArgs struct {
	// unused field # 1
	ID string `thrift:"id,2" json:"id"`
}

func NewTalkServiceGetContactArgs() *TalkServiceGetContactArgs {
	return &TalkServiceGetContactArgs{}
}

func (p *TalkServiceGetContactArgs) GetID() string {
	return p.ID
}
func (p *TalkServiceGetContactArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetContactArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TalkServiceGetContactArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getContact_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetContactArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err)
	}
	return err
}

func (p *TalkServiceGetContactArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetContactArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetContactResult struct {
	Success *Contact       `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetContactResult() *TalkServiceGetContactResult {
	return &TalkServiceGetContactResult{}
}

var TalkServiceGetContactResult_Success_DEFAULT *Contact

func (p *TalkServiceGetContactResult) GetSuccess() *Contact {
	if !p.IsSetSuccess() {
		return TalkServiceGetContactResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetContactResult_E_DEFAULT *TalkException

func (p *TalkServiceGetContactResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetContactResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetContactResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetContactResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetContactResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetContactResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Contact{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetContactResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetContactResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getContact_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetContactResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetContactResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetContactResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetContactResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Type
type TalkServiceGetContactRegistrationArgs struct {
	ID   string      `thrift:"id,1" json:"id"`
	Type ContactType `thrift:"type,2" json:"type"`
}

func NewTalkServiceGetContactRegistrationArgs() *TalkServiceGetContactRegistrationArgs {
	return &TalkServiceGetContactRegistrationArgs{}
}

func (p *TalkServiceGetContactRegistrationArgs) GetID() string {
	return p.ID
}

func (p *TalkServiceGetContactRegistrationArgs) GetType() ContactType {
	return p.Type
}
func (p *TalkServiceGetContactRegistrationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetContactRegistrationArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TalkServiceGetContactRegistrationArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := ContactType(v)
		p.Type = temp
	}
	return nil
}

func (p *TalkServiceGetContactRegistrationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getContactRegistration_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetContactRegistrationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *TalkServiceGetContactRegistrationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *TalkServiceGetContactRegistrationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetContactRegistrationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetContactRegistrationResult struct {
	Success *ContactRegistration `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException       `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetContactRegistrationResult() *TalkServiceGetContactRegistrationResult {
	return &TalkServiceGetContactRegistrationResult{}
}

var TalkServiceGetContactRegistrationResult_Success_DEFAULT *ContactRegistration

func (p *TalkServiceGetContactRegistrationResult) GetSuccess() *ContactRegistration {
	if !p.IsSetSuccess() {
		return TalkServiceGetContactRegistrationResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetContactRegistrationResult_E_DEFAULT *TalkException

func (p *TalkServiceGetContactRegistrationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetContactRegistrationResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetContactRegistrationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetContactRegistrationResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetContactRegistrationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetContactRegistrationResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ContactRegistration{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetContactRegistrationResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetContactRegistrationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getContactRegistration_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetContactRegistrationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetContactRegistrationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetContactRegistrationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetContactRegistrationResult(%+v)", *p)
}

// Attributes:
//  - Ids
type TalkServiceGetContactsArgs struct {
	// unused field # 1
	Ids []string `thrift:"ids,2" json:"ids"`
}

func NewTalkServiceGetContactsArgs() *TalkServiceGetContactsArgs {
	return &TalkServiceGetContactsArgs{}
}

func (p *TalkServiceGetContactsArgs) GetIds() []string {
	return p.Ids
}
func (p *TalkServiceGetContactsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetContactsArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Ids = tSlice
	for i := 0; i < size; i++ {
		var _elem298 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem298 = v
		}
		p.Ids = append(p.Ids, _elem298)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetContactsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getContacts_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetContactsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ids", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Ids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Ids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ids: ", p), err)
	}
	return err
}

func (p *TalkServiceGetContactsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetContactsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetContactsResult struct {
	Success []*Contact     `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetContactsResult() *TalkServiceGetContactsResult {
	return &TalkServiceGetContactsResult{}
}

var TalkServiceGetContactsResult_Success_DEFAULT []*Contact

func (p *TalkServiceGetContactsResult) GetSuccess() []*Contact {
	return p.Success
}

var TalkServiceGetContactsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetContactsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetContactsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetContactsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetContactsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetContactsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetContactsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem299 := &Contact{}
		if err := _elem299.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem299), err)
		}
		p.Success = append(p.Success, _elem299)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetContactsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetContactsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getContacts_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetContactsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetContactsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetContactsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetContactsResult(%+v)", *p)
}

type TalkServiceGetCountryWithRequestIpArgs struct {
}

func NewTalkServiceGetCountryWithRequestIpArgs() *TalkServiceGetCountryWithRequestIpArgs {
	return &TalkServiceGetCountryWithRequestIpArgs{}
}

func (p *TalkServiceGetCountryWithRequestIpArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetCountryWithRequestIpArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCountryWithRequestIp_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetCountryWithRequestIpArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetCountryWithRequestIpArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetCountryWithRequestIpResult struct {
	Success *string        `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetCountryWithRequestIpResult() *TalkServiceGetCountryWithRequestIpResult {
	return &TalkServiceGetCountryWithRequestIpResult{}
}

var TalkServiceGetCountryWithRequestIpResult_Success_DEFAULT string

func (p *TalkServiceGetCountryWithRequestIpResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return TalkServiceGetCountryWithRequestIpResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceGetCountryWithRequestIpResult_E_DEFAULT *TalkException

func (p *TalkServiceGetCountryWithRequestIpResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetCountryWithRequestIpResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetCountryWithRequestIpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCountryWithRequestIp_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetCountryWithRequestIpResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetCountryWithRequestIpResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetCountryWithRequestIpResult(%+v)", *p)
}

type TalkServiceGetFavoriteMidsArgs struct {
}

func NewTalkServiceGetFavoriteMidsArgs() *TalkServiceGetFavoriteMidsArgs {
	return &TalkServiceGetFavoriteMidsArgs{}
}

func (p *TalkServiceGetFavoriteMidsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetFavoriteMidsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFavoriteMids_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetFavoriteMidsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetFavoriteMidsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetFavoriteMidsResult struct {
	Success []string       `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetFavoriteMidsResult() *TalkServiceGetFavoriteMidsResult {
	return &TalkServiceGetFavoriteMidsResult{}
}

var TalkServiceGetFavoriteMidsResult_Success_DEFAULT []string

func (p *TalkServiceGetFavoriteMidsResult) GetSuccess() []string {
	return p.Success
}

var TalkServiceGetFavoriteMidsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetFavoriteMidsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetFavoriteMidsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetFavoriteMidsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetFavoriteMidsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetFavoriteMidsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetFavoriteMidsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem300 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem300 = v
		}
		p.Success = append(p.Success, _elem300)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetFavoriteMidsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetFavoriteMidsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFavoriteMids_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetFavoriteMidsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetFavoriteMidsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetFavoriteMidsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetFavoriteMidsResult(%+v)", *p)
}

type TalkServiceGetFriendRequestsArgs struct {
}

func NewTalkServiceGetFriendRequestsArgs() *TalkServiceGetFriendRequestsArgs {
	return &TalkServiceGetFriendRequestsArgs{}
}

func (p *TalkServiceGetFriendRequestsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetFriendRequestsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFriendRequests_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetFriendRequestsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetFriendRequestsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetFriendRequestsResult struct {
	Success []*FriendRequest `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException   `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetFriendRequestsResult() *TalkServiceGetFriendRequestsResult {
	return &TalkServiceGetFriendRequestsResult{}
}

var TalkServiceGetFriendRequestsResult_Success_DEFAULT []*FriendRequest

func (p *TalkServiceGetFriendRequestsResult) GetSuccess() []*FriendRequest {
	return p.Success
}

var TalkServiceGetFriendRequestsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetFriendRequestsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetFriendRequestsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetFriendRequestsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetFriendRequestsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetFriendRequestsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetFriendRequestsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*FriendRequest, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem301 := &FriendRequest{}
		if err := _elem301.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem301), err)
		}
		p.Success = append(p.Success, _elem301)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetFriendRequestsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetFriendRequestsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFriendRequests_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetFriendRequestsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetFriendRequestsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetFriendRequestsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetFriendRequestsResult(%+v)", *p)
}

type TalkServiceGetExtendedProfileArgs struct {
}

func NewTalkServiceGetExtendedProfileArgs() *TalkServiceGetExtendedProfileArgs {
	return &TalkServiceGetExtendedProfileArgs{}
}

func (p *TalkServiceGetExtendedProfileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetExtendedProfileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getExtendedProfile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetExtendedProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetExtendedProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetExtendedProfileResult struct {
	Success *ExtendedProfile `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException   `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetExtendedProfileResult() *TalkServiceGetExtendedProfileResult {
	return &TalkServiceGetExtendedProfileResult{}
}

var TalkServiceGetExtendedProfileResult_Success_DEFAULT *ExtendedProfile

func (p *TalkServiceGetExtendedProfileResult) GetSuccess() *ExtendedProfile {
	if !p.IsSetSuccess() {
		return TalkServiceGetExtendedProfileResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetExtendedProfileResult_E_DEFAULT *TalkException

func (p *TalkServiceGetExtendedProfileResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetExtendedProfileResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetExtendedProfileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetExtendedProfileResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetExtendedProfileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetExtendedProfileResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ExtendedProfile{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetExtendedProfileResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetExtendedProfileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getExtendedProfile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetExtendedProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetExtendedProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetExtendedProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetExtendedProfileResult(%+v)", *p)
}

type TalkServiceGetRecentFriendRequestsArgs struct {
}

func NewTalkServiceGetRecentFriendRequestsArgs() *TalkServiceGetRecentFriendRequestsArgs {
	return &TalkServiceGetRecentFriendRequestsArgs{}
}

func (p *TalkServiceGetRecentFriendRequestsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetRecentFriendRequestsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRecentFriendRequests_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetRecentFriendRequestsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetRecentFriendRequestsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRecentFriendRequestsResult struct {
	Success *FriendRequestsInfo `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException      `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetRecentFriendRequestsResult() *TalkServiceGetRecentFriendRequestsResult {
	return &TalkServiceGetRecentFriendRequestsResult{}
}

var TalkServiceGetRecentFriendRequestsResult_Success_DEFAULT *FriendRequestsInfo

func (p *TalkServiceGetRecentFriendRequestsResult) GetSuccess() *FriendRequestsInfo {
	if !p.IsSetSuccess() {
		return TalkServiceGetRecentFriendRequestsResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetRecentFriendRequestsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetRecentFriendRequestsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetRecentFriendRequestsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetRecentFriendRequestsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &FriendRequestsInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRecentFriendRequests_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetRecentFriendRequestsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetRecentFriendRequestsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetRecentFriendRequestsResult(%+v)", *p)
}

// Attributes:
//  - GroupId
type TalkServiceGetGroupArgs struct {
	// unused field # 1
	GroupId string `thrift:"groupId,2" json:"groupId"`
}

func NewTalkServiceGetGroupArgs() *TalkServiceGetGroupArgs {
	return &TalkServiceGetGroupArgs{}
}

func (p *TalkServiceGetGroupArgs) GetGroupId() string {
	return p.GroupId
}
func (p *TalkServiceGetGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *TalkServiceGetGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceGetGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupResult struct {
	Success *Group         `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetGroupResult() *TalkServiceGetGroupResult {
	return &TalkServiceGetGroupResult{}
}

var TalkServiceGetGroupResult_Success_DEFAULT *Group

func (p *TalkServiceGetGroupResult) GetSuccess() *Group {
	if !p.IsSetSuccess() {
		return TalkServiceGetGroupResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetGroupResult_E_DEFAULT *TalkException

func (p *TalkServiceGetGroupResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Group{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetGroupResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupResult(%+v)", *p)
}

type TalkServiceGetGroupIdsInvitedArgs struct {
}

func NewTalkServiceGetGroupIdsInvitedArgs() *TalkServiceGetGroupIdsInvitedArgs {
	return &TalkServiceGetGroupIdsInvitedArgs{}
}

func (p *TalkServiceGetGroupIdsInvitedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsInvitedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupIdsInvited_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsInvitedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupIdsInvitedArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupIdsInvitedResult struct {
	Success []string       `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetGroupIdsInvitedResult() *TalkServiceGetGroupIdsInvitedResult {
	return &TalkServiceGetGroupIdsInvitedResult{}
}

var TalkServiceGetGroupIdsInvitedResult_Success_DEFAULT []string

func (p *TalkServiceGetGroupIdsInvitedResult) GetSuccess() []string {
	return p.Success
}

var TalkServiceGetGroupIdsInvitedResult_E_DEFAULT *TalkException

func (p *TalkServiceGetGroupIdsInvitedResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetGroupIdsInvitedResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetGroupIdsInvitedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetGroupIdsInvitedResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetGroupIdsInvitedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsInvitedResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem302 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem302 = v
		}
		p.Success = append(p.Success, _elem302)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsInvitedResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsInvitedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupIdsInvited_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsInvitedResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupIdsInvitedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupIdsInvitedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupIdsInvitedResult(%+v)", *p)
}

type TalkServiceGetGroupIdsJoinedArgs struct {
}

func NewTalkServiceGetGroupIdsJoinedArgs() *TalkServiceGetGroupIdsJoinedArgs {
	return &TalkServiceGetGroupIdsJoinedArgs{}
}

func (p *TalkServiceGetGroupIdsJoinedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsJoinedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupIdsJoined_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsJoinedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupIdsJoinedArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupIdsJoinedResult struct {
	Success []string       `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetGroupIdsJoinedResult() *TalkServiceGetGroupIdsJoinedResult {
	return &TalkServiceGetGroupIdsJoinedResult{}
}

var TalkServiceGetGroupIdsJoinedResult_Success_DEFAULT []string

func (p *TalkServiceGetGroupIdsJoinedResult) GetSuccess() []string {
	return p.Success
}

var TalkServiceGetGroupIdsJoinedResult_E_DEFAULT *TalkException

func (p *TalkServiceGetGroupIdsJoinedResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetGroupIdsJoinedResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetGroupIdsJoinedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetGroupIdsJoinedResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetGroupIdsJoinedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsJoinedResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem303 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem303 = v
		}
		p.Success = append(p.Success, _elem303)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsJoinedResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsJoinedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupIdsJoined_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupIdsJoinedResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupIdsJoinedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupIdsJoinedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupIdsJoinedResult(%+v)", *p)
}

// Attributes:
//  - GroupIds
type TalkServiceGetGroupsArgs struct {
	// unused field # 1
	GroupIds []string `thrift:"groupIds,2" json:"groupIds"`
}

func NewTalkServiceGetGroupsArgs() *TalkServiceGetGroupsArgs {
	return &TalkServiceGetGroupsArgs{}
}

func (p *TalkServiceGetGroupsArgs) GetGroupIds() []string {
	return p.GroupIds
}
func (p *TalkServiceGetGroupsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupsArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.GroupIds = tSlice
	for i := 0; i < size; i++ {
		var _elem304 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem304 = v
		}
		p.GroupIds = append(p.GroupIds, _elem304)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroups_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupIds", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.GroupIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupIds: ", p), err)
	}
	return err
}

func (p *TalkServiceGetGroupsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupsResult struct {
	Success []*Group       `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetGroupsResult() *TalkServiceGetGroupsResult {
	return &TalkServiceGetGroupsResult{}
}

var TalkServiceGetGroupsResult_Success_DEFAULT []*Group

func (p *TalkServiceGetGroupsResult) GetSuccess() []*Group {
	return p.Success
}

var TalkServiceGetGroupsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetGroupsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetGroupsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetGroupsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetGroupsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetGroupsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Group, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem305 := &Group{}
		if err := _elem305.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem305), err)
		}
		p.Success = append(p.Success, _elem305)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetGroupsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroups_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupsResult(%+v)", *p)
}

// Attributes:
//  - GroupId
type TalkServiceGetGroupWithoutMembersArgs struct {
	// unused field # 1
	GroupId string `thrift:"groupId,2" json:"groupId"`
}

func NewTalkServiceGetGroupWithoutMembersArgs() *TalkServiceGetGroupWithoutMembersArgs {
	return &TalkServiceGetGroupWithoutMembersArgs{}
}

func (p *TalkServiceGetGroupWithoutMembersArgs) GetGroupId() string {
	return p.GroupId
}
func (p *TalkServiceGetGroupWithoutMembersArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupWithoutMembersArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *TalkServiceGetGroupWithoutMembersArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupWithoutMembers_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupWithoutMembersArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceGetGroupWithoutMembersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupWithoutMembersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupWithoutMembersResult struct {
	Success *Group         `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetGroupWithoutMembersResult() *TalkServiceGetGroupWithoutMembersResult {
	return &TalkServiceGetGroupWithoutMembersResult{}
}

var TalkServiceGetGroupWithoutMembersResult_Success_DEFAULT *Group

func (p *TalkServiceGetGroupWithoutMembersResult) GetSuccess() *Group {
	if !p.IsSetSuccess() {
		return TalkServiceGetGroupWithoutMembersResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetGroupWithoutMembersResult_E_DEFAULT *TalkException

func (p *TalkServiceGetGroupWithoutMembersResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetGroupWithoutMembersResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetGroupWithoutMembersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetGroupWithoutMembersResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetGroupWithoutMembersResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetGroupWithoutMembersResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Group{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetGroupWithoutMembersResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetGroupWithoutMembersResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupWithoutMembers_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetGroupWithoutMembersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupWithoutMembersResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetGroupWithoutMembersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetGroupWithoutMembersResult(%+v)", *p)
}

type TalkServiceGetLastOpRevisionArgs struct {
}

func NewTalkServiceGetLastOpRevisionArgs() *TalkServiceGetLastOpRevisionArgs {
	return &TalkServiceGetLastOpRevisionArgs{}
}

func (p *TalkServiceGetLastOpRevisionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetLastOpRevisionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLastOpRevision_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetLastOpRevisionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetLastOpRevisionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetLastOpRevisionResult struct {
	Success *int64         `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetLastOpRevisionResult() *TalkServiceGetLastOpRevisionResult {
	return &TalkServiceGetLastOpRevisionResult{}
}

var TalkServiceGetLastOpRevisionResult_Success_DEFAULT int64

func (p *TalkServiceGetLastOpRevisionResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return TalkServiceGetLastOpRevisionResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceGetLastOpRevisionResult_E_DEFAULT *TalkException

func (p *TalkServiceGetLastOpRevisionResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetLastOpRevisionResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetLastOpRevisionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetLastOpRevisionResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetLastOpRevisionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetLastOpRevisionResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceGetLastOpRevisionResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetLastOpRevisionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLastOpRevision_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetLastOpRevisionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetLastOpRevisionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetLastOpRevisionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetLastOpRevisionResult(%+v)", *p)
}

type TalkServiceGetProfileArgs struct {
}

func NewTalkServiceGetProfileArgs() *TalkServiceGetProfileArgs {
	return &TalkServiceGetProfileArgs{}
}

func (p *TalkServiceGetProfileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetProfileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProfile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetProfileResult struct {
	Success *Profile       `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetProfileResult() *TalkServiceGetProfileResult {
	return &TalkServiceGetProfileResult{}
}

var TalkServiceGetProfileResult_Success_DEFAULT *Profile

func (p *TalkServiceGetProfileResult) GetSuccess() *Profile {
	if !p.IsSetSuccess() {
		return TalkServiceGetProfileResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetProfileResult_E_DEFAULT *TalkException

func (p *TalkServiceGetProfileResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetProfileResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetProfileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetProfileResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetProfileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetProfileResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Profile{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetProfileResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetProfileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProfile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetProfileResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type TalkServiceGetProximityMatchCandidateListArgs struct {
	// unused field # 1
	SessionId string `thrift:"sessionId,2" json:"sessionId"`
}

func NewTalkServiceGetProximityMatchCandidateListArgs() *TalkServiceGetProximityMatchCandidateListArgs {
	return &TalkServiceGetProximityMatchCandidateListArgs{}
}

func (p *TalkServiceGetProximityMatchCandidateListArgs) GetSessionId() string {
	return p.SessionId
}
func (p *TalkServiceGetProximityMatchCandidateListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetProximityMatchCandidateListArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *TalkServiceGetProximityMatchCandidateListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProximityMatchCandidateList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetProximityMatchCandidateListArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceGetProximityMatchCandidateListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetProximityMatchCandidateListArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetProximityMatchCandidateListResult struct {
	Success *ProximityMatchCandidateResult_ `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException                  `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetProximityMatchCandidateListResult() *TalkServiceGetProximityMatchCandidateListResult {
	return &TalkServiceGetProximityMatchCandidateListResult{}
}

var TalkServiceGetProximityMatchCandidateListResult_Success_DEFAULT *ProximityMatchCandidateResult_

func (p *TalkServiceGetProximityMatchCandidateListResult) GetSuccess() *ProximityMatchCandidateResult_ {
	if !p.IsSetSuccess() {
		return TalkServiceGetProximityMatchCandidateListResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetProximityMatchCandidateListResult_E_DEFAULT *TalkException

func (p *TalkServiceGetProximityMatchCandidateListResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetProximityMatchCandidateListResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetProximityMatchCandidateListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetProximityMatchCandidateListResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetProximityMatchCandidateListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetProximityMatchCandidateListResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ProximityMatchCandidateResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetProximityMatchCandidateListResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetProximityMatchCandidateListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProximityMatchCandidateList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetProximityMatchCandidateListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetProximityMatchCandidateListResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetProximityMatchCandidateListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetProximityMatchCandidateListResult(%+v)", *p)
}

// Attributes:
//  - Provider
type TalkServiceGetRSAKeyInfoArgs struct {
	// unused field # 1
	Provider IdentityProvider `thrift:"provider,2" json:"provider"`
}

func NewTalkServiceGetRSAKeyInfoArgs() *TalkServiceGetRSAKeyInfoArgs {
	return &TalkServiceGetRSAKeyInfoArgs{}
}

func (p *TalkServiceGetRSAKeyInfoArgs) GetProvider() IdentityProvider {
	return p.Provider
}
func (p *TalkServiceGetRSAKeyInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetRSAKeyInfoArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := IdentityProvider(v)
		p.Provider = temp
	}
	return nil
}

func (p *TalkServiceGetRSAKeyInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRSAKeyInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetRSAKeyInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("provider", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:provider: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Provider)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.provider (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:provider: ", p), err)
	}
	return err
}

func (p *TalkServiceGetRSAKeyInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetRSAKeyInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRSAKeyInfoResult struct {
	Success *RSAKey        `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetRSAKeyInfoResult() *TalkServiceGetRSAKeyInfoResult {
	return &TalkServiceGetRSAKeyInfoResult{}
}

var TalkServiceGetRSAKeyInfoResult_Success_DEFAULT *RSAKey

func (p *TalkServiceGetRSAKeyInfoResult) GetSuccess() *RSAKey {
	if !p.IsSetSuccess() {
		return TalkServiceGetRSAKeyInfoResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetRSAKeyInfoResult_E_DEFAULT *TalkException

func (p *TalkServiceGetRSAKeyInfoResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetRSAKeyInfoResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetRSAKeyInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetRSAKeyInfoResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetRSAKeyInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetRSAKeyInfoResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &RSAKey{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetRSAKeyInfoResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetRSAKeyInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRSAKeyInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetRSAKeyInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetRSAKeyInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetRSAKeyInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetRSAKeyInfoResult(%+v)", *p)
}

type TalkServiceGetRingbackToneArgs struct {
}

func NewTalkServiceGetRingbackToneArgs() *TalkServiceGetRingbackToneArgs {
	return &TalkServiceGetRingbackToneArgs{}
}

func (p *TalkServiceGetRingbackToneArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetRingbackToneArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRingbackTone_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetRingbackToneArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetRingbackToneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRingbackToneResult struct {
	Success *RingbackTone  `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetRingbackToneResult() *TalkServiceGetRingbackToneResult {
	return &TalkServiceGetRingbackToneResult{}
}

var TalkServiceGetRingbackToneResult_Success_DEFAULT *RingbackTone

func (p *TalkServiceGetRingbackToneResult) GetSuccess() *RingbackTone {
	if !p.IsSetSuccess() {
		return TalkServiceGetRingbackToneResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetRingbackToneResult_E_DEFAULT *TalkException

func (p *TalkServiceGetRingbackToneResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetRingbackToneResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetRingbackToneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetRingbackToneResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetRingbackToneResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetRingbackToneResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &RingbackTone{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetRingbackToneResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetRingbackToneResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRingbackTone_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetRingbackToneResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetRingbackToneResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetRingbackToneResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetRingbackToneResult(%+v)", *p)
}

// Attributes:
//  - RoomId
type TalkServiceGetRoomArgs struct {
	// unused field # 1
	RoomId string `thrift:"roomId,2" json:"roomId"`
}

func NewTalkServiceGetRoomArgs() *TalkServiceGetRoomArgs {
	return &TalkServiceGetRoomArgs{}
}

func (p *TalkServiceGetRoomArgs) GetRoomId() string {
	return p.RoomId
}
func (p *TalkServiceGetRoomArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetRoomArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RoomId = v
	}
	return nil
}

func (p *TalkServiceGetRoomArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRoom_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetRoomArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roomId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomId: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoomId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roomId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomId: ", p), err)
	}
	return err
}

func (p *TalkServiceGetRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetRoomArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRoomResult struct {
	Success *Room          `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetRoomResult() *TalkServiceGetRoomResult {
	return &TalkServiceGetRoomResult{}
}

var TalkServiceGetRoomResult_Success_DEFAULT *Room

func (p *TalkServiceGetRoomResult) GetSuccess() *Room {
	if !p.IsSetSuccess() {
		return TalkServiceGetRoomResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetRoomResult_E_DEFAULT *TalkException

func (p *TalkServiceGetRoomResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetRoomResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetRoomResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetRoomResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetRoomResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Room{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetRoomResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetRoomResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRoom_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetRoomResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetRoomResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetRoomResult(%+v)", *p)
}

type TalkServiceGetServerTimeArgs struct {
}

func NewTalkServiceGetServerTimeArgs() *TalkServiceGetServerTimeArgs {
	return &TalkServiceGetServerTimeArgs{}
}

func (p *TalkServiceGetServerTimeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetServerTimeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getServerTime_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetServerTimeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetServerTimeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetServerTimeResult struct {
	Success *int64         `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetServerTimeResult() *TalkServiceGetServerTimeResult {
	return &TalkServiceGetServerTimeResult{}
}

var TalkServiceGetServerTimeResult_Success_DEFAULT int64

func (p *TalkServiceGetServerTimeResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return TalkServiceGetServerTimeResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceGetServerTimeResult_E_DEFAULT *TalkException

func (p *TalkServiceGetServerTimeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetServerTimeResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetServerTimeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetServerTimeResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetServerTimeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetServerTimeResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceGetServerTimeResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetServerTimeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getServerTime_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetServerTimeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetServerTimeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetServerTimeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetServerTimeResult(%+v)", *p)
}

type TalkServiceGetSessionsArgs struct {
}

func NewTalkServiceGetSessionsArgs() *TalkServiceGetSessionsArgs {
	return &TalkServiceGetSessionsArgs{}
}

func (p *TalkServiceGetSessionsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetSessionsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSessions_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetSessionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetSessionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetSessionsResult struct {
	Success []*LoginSession `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException  `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetSessionsResult() *TalkServiceGetSessionsResult {
	return &TalkServiceGetSessionsResult{}
}

var TalkServiceGetSessionsResult_Success_DEFAULT []*LoginSession

func (p *TalkServiceGetSessionsResult) GetSuccess() []*LoginSession {
	return p.Success
}

var TalkServiceGetSessionsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetSessionsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetSessionsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetSessionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetSessionsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetSessionsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetSessionsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*LoginSession, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem306 := &LoginSession{}
		if err := _elem306.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem306), err)
		}
		p.Success = append(p.Success, _elem306)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceGetSessionsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetSessionsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSessions_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetSessionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetSessionsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetSessionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetSessionsResult(%+v)", *p)
}

type TalkServiceGetSettingsArgs struct {
}

func NewTalkServiceGetSettingsArgs() *TalkServiceGetSettingsArgs {
	return &TalkServiceGetSettingsArgs{}
}

func (p *TalkServiceGetSettingsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSettings_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetSettingsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetSettingsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetSettingsResult struct {
	Success *Settings      `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetSettingsResult() *TalkServiceGetSettingsResult {
	return &TalkServiceGetSettingsResult{}
}

var TalkServiceGetSettingsResult_Success_DEFAULT *Settings

func (p *TalkServiceGetSettingsResult) GetSuccess() *Settings {
	if !p.IsSetSuccess() {
		return TalkServiceGetSettingsResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetSettingsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetSettingsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetSettingsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetSettingsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetSettingsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetSettingsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Settings{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSettings_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetSettingsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetSettingsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetSettingsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetSettingsResult(%+v)", *p)
}

// Attributes:
//  - AttrBitset
type TalkServiceGetSettingsAttributesArgs struct {
	// unused field # 1
	AttrBitset int32 `thrift:"attrBitset,2" json:"attrBitset"`
}

func NewTalkServiceGetSettingsAttributesArgs() *TalkServiceGetSettingsAttributesArgs {
	return &TalkServiceGetSettingsAttributesArgs{}
}

func (p *TalkServiceGetSettingsAttributesArgs) GetAttrBitset() int32 {
	return p.AttrBitset
}
func (p *TalkServiceGetSettingsAttributesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AttrBitset = v
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSettingsAttributes_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attrBitset", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attrBitset: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AttrBitset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.attrBitset (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attrBitset: ", p), err)
	}
	return err
}

func (p *TalkServiceGetSettingsAttributesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetSettingsAttributesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetSettingsAttributesResult struct {
	Success *Settings      `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetSettingsAttributesResult() *TalkServiceGetSettingsAttributesResult {
	return &TalkServiceGetSettingsAttributesResult{}
}

var TalkServiceGetSettingsAttributesResult_Success_DEFAULT *Settings

func (p *TalkServiceGetSettingsAttributesResult) GetSuccess() *Settings {
	if !p.IsSetSuccess() {
		return TalkServiceGetSettingsAttributesResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetSettingsAttributesResult_E_DEFAULT *TalkException

func (p *TalkServiceGetSettingsAttributesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetSettingsAttributesResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetSettingsAttributesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetSettingsAttributesResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetSettingsAttributesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributesResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Settings{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributesResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSettingsAttributes_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetSettingsAttributesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetSettingsAttributesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetSettingsAttributesResult(%+v)", *p)
}

// Attributes:
//  - AttrBitset
type TalkServiceGetSettingsAttributes2Args struct {
	// unused field # 1
	AttrBitset int32 `thrift:"attrBitset,2" json:"attrBitset"`
}

func NewTalkServiceGetSettingsAttributes2Args() *TalkServiceGetSettingsAttributes2Args {
	return &TalkServiceGetSettingsAttributes2Args{}
}

func (p *TalkServiceGetSettingsAttributes2Args) GetAttrBitset() int32 {
	return p.AttrBitset
}
func (p *TalkServiceGetSettingsAttributes2Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributes2Args) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AttrBitset = v
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributes2Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSettingsAttributes2_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributes2Args) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attrBitset", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attrBitset: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AttrBitset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.attrBitset (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attrBitset: ", p), err)
	}
	return err
}

func (p *TalkServiceGetSettingsAttributes2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetSettingsAttributes2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetSettingsAttributes2Result struct {
	Success *Settings      `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceGetSettingsAttributes2Result() *TalkServiceGetSettingsAttributes2Result {
	return &TalkServiceGetSettingsAttributes2Result{}
}

var TalkServiceGetSettingsAttributes2Result_Success_DEFAULT *Settings

func (p *TalkServiceGetSettingsAttributes2Result) GetSuccess() *Settings {
	if !p.IsSetSuccess() {
		return TalkServiceGetSettingsAttributes2Result_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetSettingsAttributes2Result_E_DEFAULT *TalkException

func (p *TalkServiceGetSettingsAttributes2Result) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetSettingsAttributes2Result_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetSettingsAttributes2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetSettingsAttributes2Result) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetSettingsAttributes2Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributes2Result) readField0(iprot thrift.TProtocol) error {
	p.Success = &Settings{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributes2Result) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributes2Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSettingsAttributes2_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributes2Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetSettingsAttributes2Result) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetSettingsAttributes2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetSettingsAttributes2Result(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
//  - ContactIds
type TalkServiceInviteIntoGroupArgs struct {
	ReqSeq     int32    `thrift:"reqSeq,1" json:"reqSeq"`
	GroupId    string   `thrift:"groupId,2" json:"groupId"`
	ContactIds []string `thrift:"contactIds,3" json:"contactIds"`
}

func NewTalkServiceInviteIntoGroupArgs() *TalkServiceInviteIntoGroupArgs {
	return &TalkServiceInviteIntoGroupArgs{}
}

func (p *TalkServiceInviteIntoGroupArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceInviteIntoGroupArgs) GetGroupId() string {
	return p.GroupId
}

func (p *TalkServiceInviteIntoGroupArgs) GetContactIds() []string {
	return p.ContactIds
}
func (p *TalkServiceInviteIntoGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ContactIds = tSlice
	for i := 0; i < size; i++ {
		var _elem307 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem307 = v
		}
		p.ContactIds = append(p.ContactIds, _elem307)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteIntoGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceInviteIntoGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceInviteIntoGroupArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ContactIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err)
	}
	return err
}

func (p *TalkServiceInviteIntoGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceInviteIntoGroupArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceInviteIntoGroupResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceInviteIntoGroupResult() *TalkServiceInviteIntoGroupResult {
	return &TalkServiceInviteIntoGroupResult{}
}

var TalkServiceInviteIntoGroupResult_E_DEFAULT *TalkException

func (p *TalkServiceInviteIntoGroupResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceInviteIntoGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceInviteIntoGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceInviteIntoGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteIntoGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceInviteIntoGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceInviteIntoGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceInviteIntoGroupResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - RoomId
//  - ContactIds
type TalkServiceInviteIntoRoomArgs struct {
	ReqSeq     int32    `thrift:"reqSeq,1" json:"reqSeq"`
	RoomId     string   `thrift:"roomId,2" json:"roomId"`
	ContactIds []string `thrift:"contactIds,3" json:"contactIds"`
}

func NewTalkServiceInviteIntoRoomArgs() *TalkServiceInviteIntoRoomArgs {
	return &TalkServiceInviteIntoRoomArgs{}
}

func (p *TalkServiceInviteIntoRoomArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceInviteIntoRoomArgs) GetRoomId() string {
	return p.RoomId
}

func (p *TalkServiceInviteIntoRoomArgs) GetContactIds() []string {
	return p.ContactIds
}
func (p *TalkServiceInviteIntoRoomArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoRoomArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceInviteIntoRoomArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RoomId = v
	}
	return nil
}

func (p *TalkServiceInviteIntoRoomArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ContactIds = tSlice
	for i := 0; i < size; i++ {
		var _elem308 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem308 = v
		}
		p.ContactIds = append(p.ContactIds, _elem308)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceInviteIntoRoomArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteIntoRoom_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceInviteIntoRoomArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceInviteIntoRoomArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roomId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomId: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoomId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roomId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomId: ", p), err)
	}
	return err
}

func (p *TalkServiceInviteIntoRoomArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ContactIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err)
	}
	return err
}

func (p *TalkServiceInviteIntoRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceInviteIntoRoomArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceInviteIntoRoomResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceInviteIntoRoomResult() *TalkServiceInviteIntoRoomResult {
	return &TalkServiceInviteIntoRoomResult{}
}

var TalkServiceInviteIntoRoomResult_E_DEFAULT *TalkException

func (p *TalkServiceInviteIntoRoomResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceInviteIntoRoomResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceInviteIntoRoomResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceInviteIntoRoomResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoRoomResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoRoomResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteIntoRoom_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceInviteIntoRoomResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceInviteIntoRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceInviteIntoRoomResult(%+v)", *p)
}

// Attributes:
//  - Userid
type TalkServiceIsUseridAvailableArgs struct {
	// unused field # 1
	Userid string `thrift:"userid,2" json:"userid"`
}

func NewTalkServiceIsUseridAvailableArgs() *TalkServiceIsUseridAvailableArgs {
	return &TalkServiceIsUseridAvailableArgs{}
}

func (p *TalkServiceIsUseridAvailableArgs) GetUserid() string {
	return p.Userid
}
func (p *TalkServiceIsUseridAvailableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceIsUseridAvailableArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Userid = v
	}
	return nil
}

func (p *TalkServiceIsUseridAvailableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isUseridAvailable_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceIsUseridAvailableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Userid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userid: ", p), err)
	}
	return err
}

func (p *TalkServiceIsUseridAvailableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceIsUseridAvailableArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceIsUseridAvailableResult struct {
	Success *bool          `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceIsUseridAvailableResult() *TalkServiceIsUseridAvailableResult {
	return &TalkServiceIsUseridAvailableResult{}
}

var TalkServiceIsUseridAvailableResult_Success_DEFAULT bool

func (p *TalkServiceIsUseridAvailableResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return TalkServiceIsUseridAvailableResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceIsUseridAvailableResult_E_DEFAULT *TalkException

func (p *TalkServiceIsUseridAvailableResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceIsUseridAvailableResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceIsUseridAvailableResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceIsUseridAvailableResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceIsUseridAvailableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceIsUseridAvailableResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceIsUseridAvailableResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceIsUseridAvailableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isUseridAvailable_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceIsUseridAvailableResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceIsUseridAvailableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceIsUseridAvailableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceIsUseridAvailableResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
//  - ContactIds
type TalkServiceKickoutFromGroupArgs struct {
	ReqSeq     int32    `thrift:"reqSeq,1" json:"reqSeq"`
	GroupId    string   `thrift:"groupId,2" json:"groupId"`
	ContactIds []string `thrift:"contactIds,3" json:"contactIds"`
}

func NewTalkServiceKickoutFromGroupArgs() *TalkServiceKickoutFromGroupArgs {
	return &TalkServiceKickoutFromGroupArgs{}
}

func (p *TalkServiceKickoutFromGroupArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceKickoutFromGroupArgs) GetGroupId() string {
	return p.GroupId
}

func (p *TalkServiceKickoutFromGroupArgs) GetContactIds() []string {
	return p.ContactIds
}
func (p *TalkServiceKickoutFromGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceKickoutFromGroupArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceKickoutFromGroupArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *TalkServiceKickoutFromGroupArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ContactIds = tSlice
	for i := 0; i < size; i++ {
		var _elem309 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem309 = v
		}
		p.ContactIds = append(p.ContactIds, _elem309)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TalkServiceKickoutFromGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("kickoutFromGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceKickoutFromGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceKickoutFromGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceKickoutFromGroupArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ContactIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err)
	}
	return err
}

func (p *TalkServiceKickoutFromGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceKickoutFromGroupArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceKickoutFromGroupResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceKickoutFromGroupResult() *TalkServiceKickoutFromGroupResult {
	return &TalkServiceKickoutFromGroupResult{}
}

var TalkServiceKickoutFromGroupResult_E_DEFAULT *TalkException

func (p *TalkServiceKickoutFromGroupResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceKickoutFromGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceKickoutFromGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceKickoutFromGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceKickoutFromGroupResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceKickoutFromGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("kickoutFromGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceKickoutFromGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceKickoutFromGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceKickoutFromGroupResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
type TalkServiceLeaveGroupArgs struct {
	ReqSeq  int32  `thrift:"reqSeq,1" json:"reqSeq"`
	GroupId string `thrift:"groupId,2" json:"groupId"`
}

func NewTalkServiceLeaveGroupArgs() *TalkServiceLeaveGroupArgs {
	return &TalkServiceLeaveGroupArgs{}
}

func (p *TalkServiceLeaveGroupArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceLeaveGroupArgs) GetGroupId() string {
	return p.GroupId
}
func (p *TalkServiceLeaveGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLeaveGroupArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceLeaveGroupArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *TalkServiceLeaveGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("leaveGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLeaveGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceLeaveGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceLeaveGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLeaveGroupArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceLeaveGroupResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceLeaveGroupResult() *TalkServiceLeaveGroupResult {
	return &TalkServiceLeaveGroupResult{}
}

var TalkServiceLeaveGroupResult_E_DEFAULT *TalkException

func (p *TalkServiceLeaveGroupResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceLeaveGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceLeaveGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceLeaveGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLeaveGroupResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceLeaveGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("leaveGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLeaveGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceLeaveGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLeaveGroupResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - RoomId
type TalkServiceLeaveRoomArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" json:"reqSeq"`
	RoomId string `thrift:"roomId,2" json:"roomId"`
}

func NewTalkServiceLeaveRoomArgs() *TalkServiceLeaveRoomArgs {
	return &TalkServiceLeaveRoomArgs{}
}

func (p *TalkServiceLeaveRoomArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceLeaveRoomArgs) GetRoomId() string {
	return p.RoomId
}
func (p *TalkServiceLeaveRoomArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLeaveRoomArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceLeaveRoomArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RoomId = v
	}
	return nil
}

func (p *TalkServiceLeaveRoomArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("leaveRoom_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLeaveRoomArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceLeaveRoomArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roomId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomId: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoomId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roomId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomId: ", p), err)
	}
	return err
}

func (p *TalkServiceLeaveRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLeaveRoomArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceLeaveRoomResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceLeaveRoomResult() *TalkServiceLeaveRoomResult {
	return &TalkServiceLeaveRoomResult{}
}

var TalkServiceLeaveRoomResult_E_DEFAULT *TalkException

func (p *TalkServiceLeaveRoomResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceLeaveRoomResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceLeaveRoomResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceLeaveRoomResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLeaveRoomResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceLeaveRoomResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("leaveRoom_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLeaveRoomResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceLeaveRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLeaveRoomResult(%+v)", *p)
}

// Attributes:
//  - IdentityProvider
//  - Identifier
//  - Password
//  - KeepLoggedIn
//  - AccessLocation
//  - SystemName
//  - Certificate
type TalkServiceLoginWithIdentityCredentialArgs struct {
	// unused fields # 1 to 2
	Identifier       string           `thrift:"identifier,3" json:"identifier"`
	Password         string           `thrift:"password,4" json:"password"`
	KeepLoggedIn     bool             `thrift:"keepLoggedIn,5" json:"keepLoggedIn"`
	AccessLocation   string           `thrift:"accessLocation,6" json:"accessLocation"`
	SystemName       string           `thrift:"systemName,7" json:"systemName"`
	IdentityProvider IdentityProvider `thrift:"identityProvider,8" json:"identityProvider"`
	Certificate      string           `thrift:"certificate,9" json:"certificate"`
}

func NewTalkServiceLoginWithIdentityCredentialArgs() *TalkServiceLoginWithIdentityCredentialArgs {
	return &TalkServiceLoginWithIdentityCredentialArgs{}
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) GetIdentityProvider() IdentityProvider {
	return p.IdentityProvider
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) GetIdentifier() string {
	return p.Identifier
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) GetPassword() string {
	return p.Password
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) GetKeepLoggedIn() bool {
	return p.KeepLoggedIn
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) GetAccessLocation() string {
	return p.AccessLocation
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) GetSystemName() string {
	return p.SystemName
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) GetCertificate() string {
	return p.Certificate
}
func (p *TalkServiceLoginWithIdentityCredentialArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := IdentityProvider(v)
		p.IdentityProvider = temp
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Identifier = v
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.KeepLoggedIn = v
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.AccessLocation = v
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SystemName = v
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Certificate = v
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loginWithIdentityCredential_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:identifier: ", p), err)
	}
	if err := oprot.WriteString(string(p.Identifier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.identifier (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:identifier: ", p), err)
	}
	return err
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:password: ", p), err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:password: ", p), err)
	}
	return err
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keepLoggedIn", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:keepLoggedIn: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.KeepLoggedIn)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.keepLoggedIn (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:keepLoggedIn: ", p), err)
	}
	return err
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accessLocation", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:accessLocation: ", p), err)
	}
	if err := oprot.WriteString(string(p.AccessLocation)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.accessLocation (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:accessLocation: ", p), err)
	}
	return err
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("systemName", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:systemName: ", p), err)
	}
	if err := oprot.WriteString(string(p.SystemName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.systemName (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:systemName: ", p), err)
	}
	return err
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityProvider", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:identityProvider: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IdentityProvider)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.identityProvider (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:identityProvider: ", p), err)
	}
	return err
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("certificate", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:certificate: ", p), err)
	}
	if err := oprot.WriteString(string(p.Certificate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.certificate (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:certificate: ", p), err)
	}
	return err
}

func (p *TalkServiceLoginWithIdentityCredentialArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLoginWithIdentityCredentialArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceLoginWithIdentityCredentialResult struct {
	Success *string        `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceLoginWithIdentityCredentialResult() *TalkServiceLoginWithIdentityCredentialResult {
	return &TalkServiceLoginWithIdentityCredentialResult{}
}

var TalkServiceLoginWithIdentityCredentialResult_Success_DEFAULT string

func (p *TalkServiceLoginWithIdentityCredentialResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return TalkServiceLoginWithIdentityCredentialResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceLoginWithIdentityCredentialResult_E_DEFAULT *TalkException

func (p *TalkServiceLoginWithIdentityCredentialResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceLoginWithIdentityCredentialResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceLoginWithIdentityCredentialResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceLoginWithIdentityCredentialResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceLoginWithIdentityCredentialResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loginWithIdentityCredential_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceLoginWithIdentityCredentialResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceLoginWithIdentityCredentialResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLoginWithIdentityCredentialResult(%+v)", *p)
}

// Attributes:
//  - IdentityProvider
//  - Identifier
//  - Password
//  - KeepLoggedIn
//  - AccessLocation
//  - SystemName
//  - Certificate
type TalkServiceLoginWithIdentityCredentialForCertificateArgs struct {
	// unused fields # 1 to 2
	Identifier       string           `thrift:"identifier,3" json:"identifier"`
	Password         string           `thrift:"password,4" json:"password"`
	KeepLoggedIn     bool             `thrift:"keepLoggedIn,5" json:"keepLoggedIn"`
	AccessLocation   string           `thrift:"accessLocation,6" json:"accessLocation"`
	SystemName       string           `thrift:"systemName,7" json:"systemName"`
	IdentityProvider IdentityProvider `thrift:"identityProvider,8" json:"identityProvider"`
	Certificate      string           `thrift:"certificate,9" json:"certificate"`
}

func NewTalkServiceLoginWithIdentityCredentialForCertificateArgs() *TalkServiceLoginWithIdentityCredentialForCertificateArgs {
	return &TalkServiceLoginWithIdentityCredentialForCertificateArgs{}
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) GetIdentityProvider() IdentityProvider {
	return p.IdentityProvider
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) GetIdentifier() string {
	return p.Identifier
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) GetPassword() string {
	return p.Password
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) GetKeepLoggedIn() bool {
	return p.KeepLoggedIn
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) GetAccessLocation() string {
	return p.AccessLocation
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) GetSystemName() string {
	return p.SystemName
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) GetCertificate() string {
	return p.Certificate
}
func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := IdentityProvider(v)
		p.IdentityProvider = temp
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Identifier = v
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.KeepLoggedIn = v
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.AccessLocation = v
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SystemName = v
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Certificate = v
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loginWithIdentityCredentialForCertificate_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:identifier: ", p), err)
	}
	if err := oprot.WriteString(string(p.Identifier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.identifier (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:identifier: ", p), err)
	}
	return err
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:password: ", p), err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:password: ", p), err)
	}
	return err
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keepLoggedIn", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:keepLoggedIn: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.KeepLoggedIn)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.keepLoggedIn (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:keepLoggedIn: ", p), err)
	}
	return err
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accessLocation", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:accessLocation: ", p), err)
	}
	if err := oprot.WriteString(string(p.AccessLocation)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.accessLocation (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:accessLocation: ", p), err)
	}
	return err
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("systemName", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:systemName: ", p), err)
	}
	if err := oprot.WriteString(string(p.SystemName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.systemName (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:systemName: ", p), err)
	}
	return err
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityProvider", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:identityProvider: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IdentityProvider)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.identityProvider (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:identityProvider: ", p), err)
	}
	return err
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("certificate", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:certificate: ", p), err)
	}
	if err := oprot.WriteString(string(p.Certificate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.certificate (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:certificate: ", p), err)
	}
	return err
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLoginWithIdentityCredentialForCertificateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceLoginWithIdentityCredentialForCertificateResult struct {
	Success *LoginResult_  `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceLoginWithIdentityCredentialForCertificateResult() *TalkServiceLoginWithIdentityCredentialForCertificateResult {
	return &TalkServiceLoginWithIdentityCredentialForCertificateResult{}
}

var TalkServiceLoginWithIdentityCredentialForCertificateResult_Success_DEFAULT *LoginResult_

func (p *TalkServiceLoginWithIdentityCredentialForCertificateResult) GetSuccess() *LoginResult_ {
	if !p.IsSetSuccess() {
		return TalkServiceLoginWithIdentityCredentialForCertificateResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceLoginWithIdentityCredentialForCertificateResult_E_DEFAULT *TalkException

func (p *TalkServiceLoginWithIdentityCredentialForCertificateResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceLoginWithIdentityCredentialForCertificateResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceLoginWithIdentityCredentialForCertificateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &LoginResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loginWithIdentityCredentialForCertificate_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceLoginWithIdentityCredentialForCertificateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLoginWithIdentityCredentialForCertificateResult(%+v)", *p)
}

// Attributes:
//  - Verifier
type TalkServiceLoginWithVerifierArgs struct {
	// unused fields # 1 to 2
	Verifier string `thrift:"verifier,3" json:"verifier"`
}

func NewTalkServiceLoginWithVerifierArgs() *TalkServiceLoginWithVerifierArgs {
	return &TalkServiceLoginWithVerifierArgs{}
}

func (p *TalkServiceLoginWithVerifierArgs) GetVerifier() string {
	return p.Verifier
}
func (p *TalkServiceLoginWithVerifierArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLoginWithVerifierArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *TalkServiceLoginWithVerifierArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loginWithVerifier_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLoginWithVerifierArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:verifier: ", p), err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.verifier (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:verifier: ", p), err)
	}
	return err
}

func (p *TalkServiceLoginWithVerifierArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLoginWithVerifierArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceLoginWithVerifierResult struct {
	Success *string        `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceLoginWithVerifierResult() *TalkServiceLoginWithVerifierResult {
	return &TalkServiceLoginWithVerifierResult{}
}

var TalkServiceLoginWithVerifierResult_Success_DEFAULT string

func (p *TalkServiceLoginWithVerifierResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return TalkServiceLoginWithVerifierResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceLoginWithVerifierResult_E_DEFAULT *TalkException

func (p *TalkServiceLoginWithVerifierResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceLoginWithVerifierResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceLoginWithVerifierResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceLoginWithVerifierResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceLoginWithVerifierResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLoginWithVerifierResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceLoginWithVerifierResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceLoginWithVerifierResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loginWithVerifier_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLoginWithVerifierResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceLoginWithVerifierResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceLoginWithVerifierResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLoginWithVerifierResult(%+v)", *p)
}

// Attributes:
//  - Verifier
type TalkServiceLoginWithVerifierForCerificateArgs struct {
	// unused fields # 1 to 2
	Verifier string `thrift:"verifier,3" json:"verifier"`
}

func NewTalkServiceLoginWithVerifierForCerificateArgs() *TalkServiceLoginWithVerifierForCerificateArgs {
	return &TalkServiceLoginWithVerifierForCerificateArgs{}
}

func (p *TalkServiceLoginWithVerifierForCerificateArgs) GetVerifier() string {
	return p.Verifier
}
func (p *TalkServiceLoginWithVerifierForCerificateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLoginWithVerifierForCerificateArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *TalkServiceLoginWithVerifierForCerificateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loginWithVerifierForCerificate_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLoginWithVerifierForCerificateArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:verifier: ", p), err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.verifier (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:verifier: ", p), err)
	}
	return err
}

func (p *TalkServiceLoginWithVerifierForCerificateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLoginWithVerifierForCerificateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceLoginWithVerifierForCerificateResult struct {
	Success *LoginResult_  `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceLoginWithVerifierForCerificateResult() *TalkServiceLoginWithVerifierForCerificateResult {
	return &TalkServiceLoginWithVerifierForCerificateResult{}
}

var TalkServiceLoginWithVerifierForCerificateResult_Success_DEFAULT *LoginResult_

func (p *TalkServiceLoginWithVerifierForCerificateResult) GetSuccess() *LoginResult_ {
	if !p.IsSetSuccess() {
		return TalkServiceLoginWithVerifierForCerificateResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceLoginWithVerifierForCerificateResult_E_DEFAULT *TalkException

func (p *TalkServiceLoginWithVerifierForCerificateResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceLoginWithVerifierForCerificateResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceLoginWithVerifierForCerificateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceLoginWithVerifierForCerificateResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceLoginWithVerifierForCerificateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLoginWithVerifierForCerificateResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &LoginResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceLoginWithVerifierForCerificateResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceLoginWithVerifierForCerificateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loginWithVerifierForCerificate_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLoginWithVerifierForCerificateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceLoginWithVerifierForCerificateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceLoginWithVerifierForCerificateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLoginWithVerifierForCerificateResult(%+v)", *p)
}

// Attributes:
//  - Verifier
type TalkServiceLoginWithVerifierForCertificateArgs struct {
	// unused fields # 1 to 2
	Verifier string `thrift:"verifier,3" json:"verifier"`
}

func NewTalkServiceLoginWithVerifierForCertificateArgs() *TalkServiceLoginWithVerifierForCertificateArgs {
	return &TalkServiceLoginWithVerifierForCertificateArgs{}
}

func (p *TalkServiceLoginWithVerifierForCertificateArgs) GetVerifier() string {
	return p.Verifier
}
func (p *TalkServiceLoginWithVerifierForCertificateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLoginWithVerifierForCertificateArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *TalkServiceLoginWithVerifierForCertificateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loginWithVerifierForCertificate_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLoginWithVerifierForCertificateArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:verifier: ", p), err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.verifier (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:verifier: ", p), err)
	}
	return err
}

func (p *TalkServiceLoginWithVerifierForCertificateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLoginWithVerifierForCertificateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceLoginWithVerifierForCertificateResult struct {
	Success *LoginResult_  `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceLoginWithVerifierForCertificateResult() *TalkServiceLoginWithVerifierForCertificateResult {
	return &TalkServiceLoginWithVerifierForCertificateResult{}
}

var TalkServiceLoginWithVerifierForCertificateResult_Success_DEFAULT *LoginResult_

func (p *TalkServiceLoginWithVerifierForCertificateResult) GetSuccess() *LoginResult_ {
	if !p.IsSetSuccess() {
		return TalkServiceLoginWithVerifierForCertificateResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceLoginWithVerifierForCertificateResult_E_DEFAULT *TalkException

func (p *TalkServiceLoginWithVerifierForCertificateResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceLoginWithVerifierForCertificateResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceLoginWithVerifierForCertificateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceLoginWithVerifierForCertificateResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceLoginWithVerifierForCertificateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLoginWithVerifierForCertificateResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &LoginResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceLoginWithVerifierForCertificateResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceLoginWithVerifierForCertificateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loginWithVerifierForCertificate_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLoginWithVerifierForCertificateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceLoginWithVerifierForCertificateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceLoginWithVerifierForCertificateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLoginWithVerifierForCertificateResult(%+v)", *p)
}

type TalkServiceLogoutArgs struct {
}

func NewTalkServiceLogoutArgs() *TalkServiceLogoutArgs {
	return &TalkServiceLogoutArgs{}
}

func (p *TalkServiceLogoutArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLogoutArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("logout_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLogoutArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLogoutArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceLogoutResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceLogoutResult() *TalkServiceLogoutResult {
	return &TalkServiceLogoutResult{}
}

var TalkServiceLogoutResult_E_DEFAULT *TalkException

func (p *TalkServiceLogoutResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceLogoutResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceLogoutResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceLogoutResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLogoutResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceLogoutResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("logout_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLogoutResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceLogoutResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLogoutResult(%+v)", *p)
}

// Attributes:
//  - TokenKey
type TalkServiceLogoutSessionArgs struct {
	// unused field # 1
	TokenKey string `thrift:"tokenKey,2" json:"tokenKey"`
}

func NewTalkServiceLogoutSessionArgs() *TalkServiceLogoutSessionArgs {
	return &TalkServiceLogoutSessionArgs{}
}

func (p *TalkServiceLogoutSessionArgs) GetTokenKey() string {
	return p.TokenKey
}
func (p *TalkServiceLogoutSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLogoutSessionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TokenKey = v
	}
	return nil
}

func (p *TalkServiceLogoutSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("logoutSession_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLogoutSessionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tokenKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tokenKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.TokenKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tokenKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tokenKey: ", p), err)
	}
	return err
}

func (p *TalkServiceLogoutSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLogoutSessionArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceLogoutSessionResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceLogoutSessionResult() *TalkServiceLogoutSessionResult {
	return &TalkServiceLogoutSessionResult{}
}

var TalkServiceLogoutSessionResult_E_DEFAULT *TalkException

func (p *TalkServiceLogoutSessionResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceLogoutSessionResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceLogoutSessionResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceLogoutSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceLogoutSessionResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceLogoutSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("logoutSession_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceLogoutSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceLogoutSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceLogoutSessionResult(%+v)", *p)
}

type TalkServiceNoopArgs struct {
}

func NewTalkServiceNoopArgs() *TalkServiceNoopArgs {
	return &TalkServiceNoopArgs{}
}

func (p *TalkServiceNoopArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceNoopArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("noop_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceNoopArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceNoopArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceNoopResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceNoopResult() *TalkServiceNoopResult {
	return &TalkServiceNoopResult{}
}

var TalkServiceNoopResult_E_DEFAULT *TalkException

func (p *TalkServiceNoopResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceNoopResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceNoopResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceNoopResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceNoopResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceNoopResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("noop_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceNoopResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceNoopResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceNoopResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Userid
type TalkServiceRegisterUseridArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" json:"reqSeq"`
	Userid string `thrift:"userid,2" json:"userid"`
}

func NewTalkServiceRegisterUseridArgs() *TalkServiceRegisterUseridArgs {
	return &TalkServiceRegisterUseridArgs{}
}

func (p *TalkServiceRegisterUseridArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceRegisterUseridArgs) GetUserid() string {
	return p.Userid
}
func (p *TalkServiceRegisterUseridArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRegisterUseridArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceRegisterUseridArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Userid = v
	}
	return nil
}

func (p *TalkServiceRegisterUseridArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerUserid_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRegisterUseridArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterUseridArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Userid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userid: ", p), err)
	}
	return err
}

func (p *TalkServiceRegisterUseridArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRegisterUseridArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterUseridResult struct {
	Success *bool          `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceRegisterUseridResult() *TalkServiceRegisterUseridResult {
	return &TalkServiceRegisterUseridResult{}
}

var TalkServiceRegisterUseridResult_Success_DEFAULT bool

func (p *TalkServiceRegisterUseridResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return TalkServiceRegisterUseridResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceRegisterUseridResult_E_DEFAULT *TalkException

func (p *TalkServiceRegisterUseridResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceRegisterUseridResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceRegisterUseridResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceRegisterUseridResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceRegisterUseridResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRegisterUseridResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceRegisterUseridResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceRegisterUseridResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerUserid_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRegisterUseridResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRegisterUseridResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRegisterUseridResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRegisterUseridResult(%+v)", *p)
}

// Attributes:
//  - ExpirationTime
//  - MaxUseCount
type TalkServiceReissueUserTicketArgs struct {
	// unused fields # 1 to 2
	ExpirationTime int64 `thrift:"expirationTime,3" json:"expirationTime"`
	MaxUseCount    int32 `thrift:"maxUseCount,4" json:"maxUseCount"`
}

func NewTalkServiceReissueUserTicketArgs() *TalkServiceReissueUserTicketArgs {
	return &TalkServiceReissueUserTicketArgs{}
}

func (p *TalkServiceReissueUserTicketArgs) GetExpirationTime() int64 {
	return p.ExpirationTime
}

func (p *TalkServiceReissueUserTicketArgs) GetMaxUseCount() int32 {
	return p.MaxUseCount
}
func (p *TalkServiceReissueUserTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceReissueUserTicketArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ExpirationTime = v
	}
	return nil
}

func (p *TalkServiceReissueUserTicketArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MaxUseCount = v
	}
	return nil
}

func (p *TalkServiceReissueUserTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reissueUserTicket_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceReissueUserTicketArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expirationTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expirationTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ExpirationTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.expirationTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expirationTime: ", p), err)
	}
	return err
}

func (p *TalkServiceReissueUserTicketArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxUseCount", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:maxUseCount: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxUseCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxUseCount (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:maxUseCount: ", p), err)
	}
	return err
}

func (p *TalkServiceReissueUserTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceReissueUserTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceReissueUserTicketResult struct {
	Success *string        `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceReissueUserTicketResult() *TalkServiceReissueUserTicketResult {
	return &TalkServiceReissueUserTicketResult{}
}

var TalkServiceReissueUserTicketResult_Success_DEFAULT string

func (p *TalkServiceReissueUserTicketResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return TalkServiceReissueUserTicketResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceReissueUserTicketResult_E_DEFAULT *TalkException

func (p *TalkServiceReissueUserTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceReissueUserTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceReissueUserTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceReissueUserTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceReissueUserTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceReissueUserTicketResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceReissueUserTicketResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceReissueUserTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reissueUserTicket_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceReissueUserTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceReissueUserTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceReissueUserTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceReissueUserTicketResult(%+v)", *p)
}

// Attributes:
//  - GroupId
type TalkServiceReissueGroupTicketArgs struct {
	GroupId string `thrift:"groupId,1" json:"groupId"`
}

func NewTalkServiceReissueGroupTicketArgs() *TalkServiceReissueGroupTicketArgs {
	return &TalkServiceReissueGroupTicketArgs{}
}

func (p *TalkServiceReissueGroupTicketArgs) GetGroupId() string {
	return p.GroupId
}
func (p *TalkServiceReissueGroupTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceReissueGroupTicketArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *TalkServiceReissueGroupTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reissueGroupTicket_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceReissueGroupTicketArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceReissueGroupTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceReissueGroupTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceReissueGroupTicketResult struct {
	Success *string        `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceReissueGroupTicketResult() *TalkServiceReissueGroupTicketResult {
	return &TalkServiceReissueGroupTicketResult{}
}

var TalkServiceReissueGroupTicketResult_Success_DEFAULT string

func (p *TalkServiceReissueGroupTicketResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return TalkServiceReissueGroupTicketResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceReissueGroupTicketResult_E_DEFAULT *TalkException

func (p *TalkServiceReissueGroupTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceReissueGroupTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceReissueGroupTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceReissueGroupTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceReissueGroupTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceReissueGroupTicketResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceReissueGroupTicketResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceReissueGroupTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reissueGroupTicket_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceReissueGroupTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceReissueGroupTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceReissueGroupTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceReissueGroupTicketResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
type TalkServiceRejectGroupInvitationArgs struct {
	ReqSeq  int32  `thrift:"reqSeq,1" json:"reqSeq"`
	GroupId string `thrift:"groupId,2" json:"groupId"`
}

func NewTalkServiceRejectGroupInvitationArgs() *TalkServiceRejectGroupInvitationArgs {
	return &TalkServiceRejectGroupInvitationArgs{}
}

func (p *TalkServiceRejectGroupInvitationArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceRejectGroupInvitationArgs) GetGroupId() string {
	return p.GroupId
}
func (p *TalkServiceRejectGroupInvitationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRejectGroupInvitationArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceRejectGroupInvitationArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *TalkServiceRejectGroupInvitationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rejectGroupInvitation_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRejectGroupInvitationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceRejectGroupInvitationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *TalkServiceRejectGroupInvitationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRejectGroupInvitationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRejectGroupInvitationResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceRejectGroupInvitationResult() *TalkServiceRejectGroupInvitationResult {
	return &TalkServiceRejectGroupInvitationResult{}
}

var TalkServiceRejectGroupInvitationResult_E_DEFAULT *TalkException

func (p *TalkServiceRejectGroupInvitationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceRejectGroupInvitationResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceRejectGroupInvitationResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceRejectGroupInvitationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRejectGroupInvitationResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceRejectGroupInvitationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rejectGroupInvitation_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRejectGroupInvitationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRejectGroupInvitationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRejectGroupInvitationResult(%+v)", *p)
}

type TalkServiceReleaseSessionArgs struct {
}

func NewTalkServiceReleaseSessionArgs() *TalkServiceReleaseSessionArgs {
	return &TalkServiceReleaseSessionArgs{}
}

func (p *TalkServiceReleaseSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceReleaseSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("releaseSession_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceReleaseSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceReleaseSessionArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceReleaseSessionResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceReleaseSessionResult() *TalkServiceReleaseSessionResult {
	return &TalkServiceReleaseSessionResult{}
}

var TalkServiceReleaseSessionResult_E_DEFAULT *TalkException

func (p *TalkServiceReleaseSessionResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceReleaseSessionResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceReleaseSessionResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceReleaseSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceReleaseSessionResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceReleaseSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("releaseSession_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceReleaseSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceReleaseSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceReleaseSessionResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - LastMessageId
type TalkServiceRemoveAllMessagesArgs struct {
	Seq           int32  `thrift:"seq,1" json:"seq"`
	LastMessageId string `thrift:"lastMessageId,2" json:"lastMessageId"`
}

func NewTalkServiceRemoveAllMessagesArgs() *TalkServiceRemoveAllMessagesArgs {
	return &TalkServiceRemoveAllMessagesArgs{}
}

func (p *TalkServiceRemoveAllMessagesArgs) GetSeq() int32 {
	return p.Seq
}

func (p *TalkServiceRemoveAllMessagesArgs) GetLastMessageId() string {
	return p.LastMessageId
}
func (p *TalkServiceRemoveAllMessagesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRemoveAllMessagesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *TalkServiceRemoveAllMessagesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LastMessageId = v
	}
	return nil
}

func (p *TalkServiceRemoveAllMessagesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeAllMessages_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRemoveAllMessagesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err)
	}
	return err
}

func (p *TalkServiceRemoveAllMessagesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastMessageId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastMessageId: ", p), err)
	}
	if err := oprot.WriteString(string(p.LastMessageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastMessageId: ", p), err)
	}
	return err
}

func (p *TalkServiceRemoveAllMessagesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRemoveAllMessagesArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRemoveAllMessagesResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceRemoveAllMessagesResult() *TalkServiceRemoveAllMessagesResult {
	return &TalkServiceRemoveAllMessagesResult{}
}

var TalkServiceRemoveAllMessagesResult_E_DEFAULT *TalkException

func (p *TalkServiceRemoveAllMessagesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceRemoveAllMessagesResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceRemoveAllMessagesResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceRemoveAllMessagesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRemoveAllMessagesResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceRemoveAllMessagesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeAllMessages_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRemoveAllMessagesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRemoveAllMessagesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRemoveAllMessagesResult(%+v)", *p)
}

// Attributes:
//  - Direction
//  - MidOrEMid
type TalkServiceRemoveFriendRequestArgs struct {
	Direction DirectionType `thrift:"direction,1" json:"direction"`
	MidOrEMid string        `thrift:"midOrEMid,2" json:"midOrEMid"`
}

func NewTalkServiceRemoveFriendRequestArgs() *TalkServiceRemoveFriendRequestArgs {
	return &TalkServiceRemoveFriendRequestArgs{}
}

func (p *TalkServiceRemoveFriendRequestArgs) GetDirection() DirectionType {
	return p.Direction
}

func (p *TalkServiceRemoveFriendRequestArgs) GetMidOrEMid() string {
	return p.MidOrEMid
}
func (p *TalkServiceRemoveFriendRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRemoveFriendRequestArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := DirectionType(v)
		p.Direction = temp
	}
	return nil
}

func (p *TalkServiceRemoveFriendRequestArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MidOrEMid = v
	}
	return nil
}

func (p *TalkServiceRemoveFriendRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeFriendRequest_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRemoveFriendRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("direction", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:direction: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Direction)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.direction (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:direction: ", p), err)
	}
	return err
}

func (p *TalkServiceRemoveFriendRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("midOrEMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:midOrEMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.MidOrEMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.midOrEMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:midOrEMid: ", p), err)
	}
	return err
}

func (p *TalkServiceRemoveFriendRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRemoveFriendRequestArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRemoveFriendRequestResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceRemoveFriendRequestResult() *TalkServiceRemoveFriendRequestResult {
	return &TalkServiceRemoveFriendRequestResult{}
}

var TalkServiceRemoveFriendRequestResult_E_DEFAULT *TalkException

func (p *TalkServiceRemoveFriendRequestResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceRemoveFriendRequestResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceRemoveFriendRequestResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceRemoveFriendRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRemoveFriendRequestResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceRemoveFriendRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeFriendRequest_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRemoveFriendRequestResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRemoveFriendRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRemoveFriendRequestResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - Consumer
//  - LastMessageId
//  - SessionId
type TalkServiceSendChatCheckedArgs struct {
	Seq           int32   `thrift:"seq,1" json:"seq"`
	Consumer      string  `thrift:"consumer,2" json:"consumer"`
	LastMessageId string  `thrift:"lastMessageId,3" json:"lastMessageId"`
	SessionId     float64 `thrift:"sessionId,4" json:"sessionId"`
}

func NewTalkServiceSendChatCheckedArgs() *TalkServiceSendChatCheckedArgs {
	return &TalkServiceSendChatCheckedArgs{}
}

func (p *TalkServiceSendChatCheckedArgs) GetSeq() int32 {
	return p.Seq
}

func (p *TalkServiceSendChatCheckedArgs) GetConsumer() string {
	return p.Consumer
}

func (p *TalkServiceSendChatCheckedArgs) GetLastMessageId() string {
	return p.LastMessageId
}

func (p *TalkServiceSendChatCheckedArgs) GetSessionId() float64 {
	return p.SessionId
}
func (p *TalkServiceSendChatCheckedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendChatCheckedArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *TalkServiceSendChatCheckedArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Consumer = v
	}
	return nil
}

func (p *TalkServiceSendChatCheckedArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LastMessageId = v
	}
	return nil
}

func (p *TalkServiceSendChatCheckedArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *TalkServiceSendChatCheckedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendChatChecked_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendChatCheckedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err)
	}
	return err
}

func (p *TalkServiceSendChatCheckedArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumer", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumer: ", p), err)
	}
	if err := oprot.WriteString(string(p.Consumer)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.consumer (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumer: ", p), err)
	}
	return err
}

func (p *TalkServiceSendChatCheckedArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastMessageId", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastMessageId: ", p), err)
	}
	if err := oprot.WriteString(string(p.LastMessageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastMessageId: ", p), err)
	}
	return err
}

func (p *TalkServiceSendChatCheckedArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sessionId: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceSendChatCheckedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendChatCheckedArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendChatCheckedResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceSendChatCheckedResult() *TalkServiceSendChatCheckedResult {
	return &TalkServiceSendChatCheckedResult{}
}

var TalkServiceSendChatCheckedResult_E_DEFAULT *TalkException

func (p *TalkServiceSendChatCheckedResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceSendChatCheckedResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceSendChatCheckedResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceSendChatCheckedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendChatCheckedResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceSendChatCheckedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendChatChecked_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendChatCheckedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceSendChatCheckedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendChatCheckedResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - Consumer
//  - LastMessageId
//  - SessionId
type TalkServiceSendChatRemovedArgs struct {
	Seq           int32   `thrift:"seq,1" json:"seq"`
	Consumer      string  `thrift:"consumer,2" json:"consumer"`
	LastMessageId string  `thrift:"lastMessageId,3" json:"lastMessageId"`
	SessionId     float64 `thrift:"sessionId,4" json:"sessionId"`
}

func NewTalkServiceSendChatRemovedArgs() *TalkServiceSendChatRemovedArgs {
	return &TalkServiceSendChatRemovedArgs{}
}

func (p *TalkServiceSendChatRemovedArgs) GetSeq() int32 {
	return p.Seq
}

func (p *TalkServiceSendChatRemovedArgs) GetConsumer() string {
	return p.Consumer
}

func (p *TalkServiceSendChatRemovedArgs) GetLastMessageId() string {
	return p.LastMessageId
}

func (p *TalkServiceSendChatRemovedArgs) GetSessionId() float64 {
	return p.SessionId
}
func (p *TalkServiceSendChatRemovedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendChatRemovedArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *TalkServiceSendChatRemovedArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Consumer = v
	}
	return nil
}

func (p *TalkServiceSendChatRemovedArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LastMessageId = v
	}
	return nil
}

func (p *TalkServiceSendChatRemovedArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *TalkServiceSendChatRemovedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendChatRemoved_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendChatRemovedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err)
	}
	return err
}

func (p *TalkServiceSendChatRemovedArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumer", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumer: ", p), err)
	}
	if err := oprot.WriteString(string(p.Consumer)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.consumer (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumer: ", p), err)
	}
	return err
}

func (p *TalkServiceSendChatRemovedArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastMessageId", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastMessageId: ", p), err)
	}
	if err := oprot.WriteString(string(p.LastMessageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastMessageId: ", p), err)
	}
	return err
}

func (p *TalkServiceSendChatRemovedArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sessionId: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sessionId: ", p), err)
	}
	return err
}

func (p *TalkServiceSendChatRemovedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendChatRemovedArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendChatRemovedResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceSendChatRemovedResult() *TalkServiceSendChatRemovedResult {
	return &TalkServiceSendChatRemovedResult{}
}

var TalkServiceSendChatRemovedResult_E_DEFAULT *TalkException

func (p *TalkServiceSendChatRemovedResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceSendChatRemovedResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceSendChatRemovedResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceSendChatRemovedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendChatRemovedResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceSendChatRemovedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendChatRemoved_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendChatRemovedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceSendChatRemovedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendChatRemovedResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - Consumer
//  - MessageId
type TalkServiceSendContentReceiptArgs struct {
	Seq       int32  `thrift:"seq,1" json:"seq"`
	Consumer  string `thrift:"consumer,2" json:"consumer"`
	MessageId string `thrift:"messageId,3" json:"messageId"`
}

func NewTalkServiceSendContentReceiptArgs() *TalkServiceSendContentReceiptArgs {
	return &TalkServiceSendContentReceiptArgs{}
}

func (p *TalkServiceSendContentReceiptArgs) GetSeq() int32 {
	return p.Seq
}

func (p *TalkServiceSendContentReceiptArgs) GetConsumer() string {
	return p.Consumer
}

func (p *TalkServiceSendContentReceiptArgs) GetMessageId() string {
	return p.MessageId
}
func (p *TalkServiceSendContentReceiptArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendContentReceiptArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *TalkServiceSendContentReceiptArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Consumer = v
	}
	return nil
}

func (p *TalkServiceSendContentReceiptArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MessageId = v
	}
	return nil
}

func (p *TalkServiceSendContentReceiptArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendContentReceipt_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendContentReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err)
	}
	return err
}

func (p *TalkServiceSendContentReceiptArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumer", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumer: ", p), err)
	}
	if err := oprot.WriteString(string(p.Consumer)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.consumer (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumer: ", p), err)
	}
	return err
}

func (p *TalkServiceSendContentReceiptArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageId", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:messageId: ", p), err)
	}
	if err := oprot.WriteString(string(p.MessageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.messageId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:messageId: ", p), err)
	}
	return err
}

func (p *TalkServiceSendContentReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendContentReceiptArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendContentReceiptResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceSendContentReceiptResult() *TalkServiceSendContentReceiptResult {
	return &TalkServiceSendContentReceiptResult{}
}

var TalkServiceSendContentReceiptResult_E_DEFAULT *TalkException

func (p *TalkServiceSendContentReceiptResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceSendContentReceiptResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceSendContentReceiptResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceSendContentReceiptResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendContentReceiptResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceSendContentReceiptResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendContentReceipt_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendContentReceiptResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceSendContentReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendContentReceiptResult(%+v)", *p)
}

// Attributes:
//  - Text
type TalkServiceSendEchoPushArgs struct {
	// unused field # 1
	Text string `thrift:"text,2" json:"text"`
}

func NewTalkServiceSendEchoPushArgs() *TalkServiceSendEchoPushArgs {
	return &TalkServiceSendEchoPushArgs{}
}

func (p *TalkServiceSendEchoPushArgs) GetText() string {
	return p.Text
}
func (p *TalkServiceSendEchoPushArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendEchoPushArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Text = v
	}
	return nil
}

func (p *TalkServiceSendEchoPushArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendEchoPush_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendEchoPushArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("text", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:text: ", p), err)
	}
	if err := oprot.WriteString(string(p.Text)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.text (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:text: ", p), err)
	}
	return err
}

func (p *TalkServiceSendEchoPushArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendEchoPushArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendEchoPushResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceSendEchoPushResult() *TalkServiceSendEchoPushResult {
	return &TalkServiceSendEchoPushResult{}
}

var TalkServiceSendEchoPushResult_E_DEFAULT *TalkException

func (p *TalkServiceSendEchoPushResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceSendEchoPushResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceSendEchoPushResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceSendEchoPushResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendEchoPushResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceSendEchoPushResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendEchoPush_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendEchoPushResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceSendEchoPushResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendEchoPushResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - Message
type TalkServiceSendMessageArgs struct {
	Seq     int32    `thrift:"seq,1" json:"seq"`
	Message *Message `thrift:"message,2" json:"message"`
}

func NewTalkServiceSendMessageArgs() *TalkServiceSendMessageArgs {
	return &TalkServiceSendMessageArgs{}
}

func (p *TalkServiceSendMessageArgs) GetSeq() int32 {
	return p.Seq
}

var TalkServiceSendMessageArgs_Message_DEFAULT *Message

func (p *TalkServiceSendMessageArgs) GetMessage() *Message {
	if !p.IsSetMessage() {
		return TalkServiceSendMessageArgs_Message_DEFAULT
	}
	return p.Message
}
func (p *TalkServiceSendMessageArgs) IsSetMessage() bool {
	return p.Message != nil
}

func (p *TalkServiceSendMessageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendMessageArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *TalkServiceSendMessageArgs) readField2(iprot thrift.TProtocol) error {
	p.Message = &Message{}
	if err := p.Message.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
	}
	return nil
}

func (p *TalkServiceSendMessageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessage_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err)
	}
	return err
}

func (p *TalkServiceSendMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
	}
	if err := p.Message.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
	}
	return err
}

func (p *TalkServiceSendMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceSendMessageResult struct {
	Success *Message       `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceSendMessageResult() *TalkServiceSendMessageResult {
	return &TalkServiceSendMessageResult{}
}

var TalkServiceSendMessageResult_Success_DEFAULT *Message

func (p *TalkServiceSendMessageResult) GetSuccess() *Message {
	if !p.IsSetSuccess() {
		return TalkServiceSendMessageResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceSendMessageResult_E_DEFAULT *TalkException

func (p *TalkServiceSendMessageResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceSendMessageResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceSendMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceSendMessageResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceSendMessageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendMessageResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Message{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceSendMessageResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceSendMessageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessage_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceSendMessageResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceSendMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendMessageResult(%+v)", *p)
}

type TalkServiceSendMessageToMyHomeArgs struct {
}

func NewTalkServiceSendMessageToMyHomeArgs() *TalkServiceSendMessageToMyHomeArgs {
	return &TalkServiceSendMessageToMyHomeArgs{}
}

func (p *TalkServiceSendMessageToMyHomeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendMessageToMyHomeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessageToMyHome_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendMessageToMyHomeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendMessageToMyHomeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceSendMessageToMyHomeResult struct {
	Success *Message       `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceSendMessageToMyHomeResult() *TalkServiceSendMessageToMyHomeResult {
	return &TalkServiceSendMessageToMyHomeResult{}
}

var TalkServiceSendMessageToMyHomeResult_Success_DEFAULT *Message

func (p *TalkServiceSendMessageToMyHomeResult) GetSuccess() *Message {
	if !p.IsSetSuccess() {
		return TalkServiceSendMessageToMyHomeResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceSendMessageToMyHomeResult_E_DEFAULT *TalkException

func (p *TalkServiceSendMessageToMyHomeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceSendMessageToMyHomeResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceSendMessageToMyHomeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceSendMessageToMyHomeResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceSendMessageToMyHomeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendMessageToMyHomeResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Message{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceSendMessageToMyHomeResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceSendMessageToMyHomeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessageToMyHome_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendMessageToMyHomeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceSendMessageToMyHomeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceSendMessageToMyHomeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendMessageToMyHomeResult(%+v)", *p)
}

// Attributes:
//  - Requests
type TalkServiceSendPostbackArgs struct {
	// unused field # 1
	Requests *SendPostbackRequest `thrift:"requests,2" json:"requests"`
}

func NewTalkServiceSendPostbackArgs() *TalkServiceSendPostbackArgs {
	return &TalkServiceSendPostbackArgs{}
}

var TalkServiceSendPostbackArgs_Requests_DEFAULT *SendPostbackRequest

func (p *TalkServiceSendPostbackArgs) GetRequests() *SendPostbackRequest {
	if !p.IsSetRequests() {
		return TalkServiceSendPostbackArgs_Requests_DEFAULT
	}
	return p.Requests
}
func (p *TalkServiceSendPostbackArgs) IsSetRequests() bool {
	return p.Requests != nil
}

func (p *TalkServiceSendPostbackArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendPostbackArgs) readField2(iprot thrift.TProtocol) error {
	p.Requests = &SendPostbackRequest{}
	if err := p.Requests.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Requests), err)
	}
	return nil
}

func (p *TalkServiceSendPostbackArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendPostback_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendPostbackArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requests", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requests: ", p), err)
	}
	if err := p.Requests.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Requests), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requests: ", p), err)
	}
	return err
}

func (p *TalkServiceSendPostbackArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendPostbackArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendPostbackResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceSendPostbackResult() *TalkServiceSendPostbackResult {
	return &TalkServiceSendPostbackResult{}
}

var TalkServiceSendPostbackResult_E_DEFAULT *TalkException

func (p *TalkServiceSendPostbackResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceSendPostbackResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceSendPostbackResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceSendPostbackResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSendPostbackResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceSendPostbackResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendPostback_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSendPostbackResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceSendPostbackResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSendPostbackResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
type TalkServiceUnblockContactArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" json:"reqSeq"`
	ID     string `thrift:"id,2" json:"id"`
}

func NewTalkServiceUnblockContactArgs() *TalkServiceUnblockContactArgs {
	return &TalkServiceUnblockContactArgs{}
}

func (p *TalkServiceUnblockContactArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceUnblockContactArgs) GetID() string {
	return p.ID
}
func (p *TalkServiceUnblockContactArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUnblockContactArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceUnblockContactArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TalkServiceUnblockContactArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unblockContact_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUnblockContactArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceUnblockContactArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err)
	}
	return err
}

func (p *TalkServiceUnblockContactArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUnblockContactArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUnblockContactResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceUnblockContactResult() *TalkServiceUnblockContactResult {
	return &TalkServiceUnblockContactResult{}
}

var TalkServiceUnblockContactResult_E_DEFAULT *TalkException

func (p *TalkServiceUnblockContactResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUnblockContactResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUnblockContactResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUnblockContactResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUnblockContactResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUnblockContactResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unblockContact_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUnblockContactResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUnblockContactResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUnblockContactResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
type TalkServiceUnblockRecommendationArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" json:"reqSeq"`
	ID     string `thrift:"id,2" json:"id"`
}

func NewTalkServiceUnblockRecommendationArgs() *TalkServiceUnblockRecommendationArgs {
	return &TalkServiceUnblockRecommendationArgs{}
}

func (p *TalkServiceUnblockRecommendationArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceUnblockRecommendationArgs) GetID() string {
	return p.ID
}
func (p *TalkServiceUnblockRecommendationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUnblockRecommendationArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceUnblockRecommendationArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TalkServiceUnblockRecommendationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unblockRecommendation_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUnblockRecommendationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceUnblockRecommendationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err)
	}
	return err
}

func (p *TalkServiceUnblockRecommendationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUnblockRecommendationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUnblockRecommendationResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceUnblockRecommendationResult() *TalkServiceUnblockRecommendationResult {
	return &TalkServiceUnblockRecommendationResult{}
}

var TalkServiceUnblockRecommendationResult_E_DEFAULT *TalkException

func (p *TalkServiceUnblockRecommendationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUnblockRecommendationResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUnblockRecommendationResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUnblockRecommendationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUnblockRecommendationResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUnblockRecommendationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unblockRecommendation_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUnblockRecommendationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUnblockRecommendationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUnblockRecommendationResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Mid
//  - Flag
//  - Value
type TalkServiceUpdateContactSettingArgs struct {
	ReqSeq int32          `thrift:"reqSeq,1" json:"reqSeq"`
	Mid    string         `thrift:"mid,2" json:"mid"`
	Flag   ContactSetting `thrift:"flag,3" json:"flag"`
	Value  string         `thrift:"value,4" json:"value"`
}

func NewTalkServiceUpdateContactSettingArgs() *TalkServiceUpdateContactSettingArgs {
	return &TalkServiceUpdateContactSettingArgs{}
}

func (p *TalkServiceUpdateContactSettingArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceUpdateContactSettingArgs) GetMid() string {
	return p.Mid
}

func (p *TalkServiceUpdateContactSettingArgs) GetFlag() ContactSetting {
	return p.Flag
}

func (p *TalkServiceUpdateContactSettingArgs) GetValue() string {
	return p.Value
}
func (p *TalkServiceUpdateContactSettingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateContactSettingArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceUpdateContactSettingArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *TalkServiceUpdateContactSettingArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := ContactSetting(v)
		p.Flag = temp
	}
	return nil
}

func (p *TalkServiceUpdateContactSettingArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *TalkServiceUpdateContactSettingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateContactSetting_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateContactSettingArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateContactSettingArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateContactSettingArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("flag", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:flag: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Flag)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.flag (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:flag: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateContactSettingArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:value: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateContactSettingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateContactSettingArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateContactSettingResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceUpdateContactSettingResult() *TalkServiceUpdateContactSettingResult {
	return &TalkServiceUpdateContactSettingResult{}
}

var TalkServiceUpdateContactSettingResult_E_DEFAULT *TalkException

func (p *TalkServiceUpdateContactSettingResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateContactSettingResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateContactSettingResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateContactSettingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateContactSettingResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateContactSettingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateContactSetting_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateContactSettingResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateContactSettingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateContactSettingResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Attr
//  - ExtendedProfile
type TalkServiceUpdateExtendedProfileAttributeArgs struct {
	ReqSeq          int32            `thrift:"reqSeq,1" json:"reqSeq"`
	Attr            ExtendAttr       `thrift:"attr,2" json:"attr"`
	ExtendedProfile *ExtendedProfile `thrift:"extendedProfile,3" json:"extendedProfile"`
}

func NewTalkServiceUpdateExtendedProfileAttributeArgs() *TalkServiceUpdateExtendedProfileAttributeArgs {
	return &TalkServiceUpdateExtendedProfileAttributeArgs{}
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) GetAttr() ExtendAttr {
	return p.Attr
}

var TalkServiceUpdateExtendedProfileAttributeArgs_ExtendedProfile_DEFAULT *ExtendedProfile

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) GetExtendedProfile() *ExtendedProfile {
	if !p.IsSetExtendedProfile() {
		return TalkServiceUpdateExtendedProfileAttributeArgs_ExtendedProfile_DEFAULT
	}
	return p.ExtendedProfile
}
func (p *TalkServiceUpdateExtendedProfileAttributeArgs) IsSetExtendedProfile() bool {
	return p.ExtendedProfile != nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := ExtendAttr(v)
		p.Attr = temp
	}
	return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) readField3(iprot thrift.TProtocol) error {
	p.ExtendedProfile = &ExtendedProfile{}
	if err := p.ExtendedProfile.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExtendedProfile), err)
	}
	return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateExtendedProfileAttribute_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attr", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attr: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Attr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.attr (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attr: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extendedProfile", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extendedProfile: ", p), err)
	}
	if err := p.ExtendedProfile.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExtendedProfile), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extendedProfile: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateExtendedProfileAttributeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateExtendedProfileAttributeResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceUpdateExtendedProfileAttributeResult() *TalkServiceUpdateExtendedProfileAttributeResult {
	return &TalkServiceUpdateExtendedProfileAttributeResult{}
}

var TalkServiceUpdateExtendedProfileAttributeResult_E_DEFAULT *TalkException

func (p *TalkServiceUpdateExtendedProfileAttributeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateExtendedProfileAttributeResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateExtendedProfileAttributeResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateExtendedProfileAttribute_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateExtendedProfileAttributeResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Group
type TalkServiceUpdateGroupArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" json:"reqSeq"`
	Group  *Group `thrift:"group,2" json:"group"`
}

func NewTalkServiceUpdateGroupArgs() *TalkServiceUpdateGroupArgs {
	return &TalkServiceUpdateGroupArgs{}
}

func (p *TalkServiceUpdateGroupArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

var TalkServiceUpdateGroupArgs_Group_DEFAULT *Group

func (p *TalkServiceUpdateGroupArgs) GetGroup() *Group {
	if !p.IsSetGroup() {
		return TalkServiceUpdateGroupArgs_Group_DEFAULT
	}
	return p.Group
}
func (p *TalkServiceUpdateGroupArgs) IsSetGroup() bool {
	return p.Group != nil
}

func (p *TalkServiceUpdateGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateGroupArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceUpdateGroupArgs) readField2(iprot thrift.TProtocol) error {
	p.Group = &Group{}
	if err := p.Group.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Group), err)
	}
	return nil
}

func (p *TalkServiceUpdateGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:group: ", p), err)
	}
	if err := p.Group.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Group), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:group: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateGroupArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateGroupResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceUpdateGroupResult() *TalkServiceUpdateGroupResult {
	return &TalkServiceUpdateGroupResult{}
}

var TalkServiceUpdateGroupResult_E_DEFAULT *TalkException

func (p *TalkServiceUpdateGroupResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateGroupResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateGroupResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupMid
//  - UpdatedAttrs
type TalkServiceUpdateGroupPreferenceAttributeArgs struct {
	ReqSeq       int32                 `thrift:"reqSeq,1" json:"reqSeq"`
	GroupMid     string                `thrift:"groupMid,2" json:"groupMid"`
	UpdatedAttrs map[Preference]string `thrift:"updatedAttrs,3" json:"updatedAttrs"`
}

func NewTalkServiceUpdateGroupPreferenceAttributeArgs() *TalkServiceUpdateGroupPreferenceAttributeArgs {
	return &TalkServiceUpdateGroupPreferenceAttributeArgs{}
}

func (p *TalkServiceUpdateGroupPreferenceAttributeArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceUpdateGroupPreferenceAttributeArgs) GetGroupMid() string {
	return p.GroupMid
}

func (p *TalkServiceUpdateGroupPreferenceAttributeArgs) GetUpdatedAttrs() map[Preference]string {
	return p.UpdatedAttrs
}
func (p *TalkServiceUpdateGroupPreferenceAttributeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateGroupPreferenceAttributeArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceUpdateGroupPreferenceAttributeArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupMid = v
	}
	return nil
}

func (p *TalkServiceUpdateGroupPreferenceAttributeArgs) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[Preference]string, size)
	p.UpdatedAttrs = tMap
	for i := 0; i < size; i++ {
		var _key310 Preference
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Preference(v)
			_key310 = temp
		}
		var _val311 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val311 = v
		}
		p.UpdatedAttrs[_key310] = _val311
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateGroupPreferenceAttributeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateGroupPreferenceAttribute_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateGroupPreferenceAttributeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateGroupPreferenceAttributeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupMid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupMid: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateGroupPreferenceAttributeArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updatedAttrs", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:updatedAttrs: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.UpdatedAttrs)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.UpdatedAttrs {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:updatedAttrs: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateGroupPreferenceAttributeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateGroupPreferenceAttributeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateGroupPreferenceAttributeResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceUpdateGroupPreferenceAttributeResult() *TalkServiceUpdateGroupPreferenceAttributeResult {
	return &TalkServiceUpdateGroupPreferenceAttributeResult{}
}

var TalkServiceUpdateGroupPreferenceAttributeResult_E_DEFAULT *TalkException

func (p *TalkServiceUpdateGroupPreferenceAttributeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateGroupPreferenceAttributeResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateGroupPreferenceAttributeResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateGroupPreferenceAttributeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateGroupPreferenceAttributeResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateGroupPreferenceAttributeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateGroupPreferenceAttribute_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateGroupPreferenceAttributeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateGroupPreferenceAttributeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateGroupPreferenceAttributeResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Type
type TalkServiceUpdateNotificationTokenArgs struct {
	// unused field # 1
	Token string           `thrift:"token,2" json:"token"`
	Type  NotificationType `thrift:"type,3" json:"type"`
}

func NewTalkServiceUpdateNotificationTokenArgs() *TalkServiceUpdateNotificationTokenArgs {
	return &TalkServiceUpdateNotificationTokenArgs{}
}

func (p *TalkServiceUpdateNotificationTokenArgs) GetToken() string {
	return p.Token
}

func (p *TalkServiceUpdateNotificationTokenArgs) GetType() NotificationType {
	return p.Type
}
func (p *TalkServiceUpdateNotificationTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := NotificationType(v)
		p.Type = temp
	}
	return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateNotificationToken_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:token: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateNotificationTokenArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateNotificationTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateNotificationTokenArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateNotificationTokenResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceUpdateNotificationTokenResult() *TalkServiceUpdateNotificationTokenResult {
	return &TalkServiceUpdateNotificationTokenResult{}
}

var TalkServiceUpdateNotificationTokenResult_E_DEFAULT *TalkException

func (p *TalkServiceUpdateNotificationTokenResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateNotificationTokenResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateNotificationTokenResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateNotificationTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateNotificationTokenResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateNotificationTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateNotificationToken_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateNotificationTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateNotificationTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateNotificationTokenResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Profile
type TalkServiceUpdateProfileArgs struct {
	ReqSeq  int32    `thrift:"reqSeq,1" json:"reqSeq"`
	Profile *Profile `thrift:"profile,2" json:"profile"`
}

func NewTalkServiceUpdateProfileArgs() *TalkServiceUpdateProfileArgs {
	return &TalkServiceUpdateProfileArgs{}
}

func (p *TalkServiceUpdateProfileArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

var TalkServiceUpdateProfileArgs_Profile_DEFAULT *Profile

func (p *TalkServiceUpdateProfileArgs) GetProfile() *Profile {
	if !p.IsSetProfile() {
		return TalkServiceUpdateProfileArgs_Profile_DEFAULT
	}
	return p.Profile
}
func (p *TalkServiceUpdateProfileArgs) IsSetProfile() bool {
	return p.Profile != nil
}

func (p *TalkServiceUpdateProfileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceUpdateProfileArgs) readField2(iprot thrift.TProtocol) error {
	p.Profile = &Profile{}
	if err := p.Profile.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Profile), err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateProfile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateProfileArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("profile", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:profile: ", p), err)
	}
	if err := p.Profile.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Profile), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:profile: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateProfileArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateProfileResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceUpdateProfileResult() *TalkServiceUpdateProfileResult {
	return &TalkServiceUpdateProfileResult{}
}

var TalkServiceUpdateProfileResult_E_DEFAULT *TalkException

func (p *TalkServiceUpdateProfileResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateProfileResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateProfileResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateProfileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateProfile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateProfileResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Attr
//  - Value
type TalkServiceUpdateProfileAttributeArgs struct {
	ReqSeq int32            `thrift:"reqSeq,1" json:"reqSeq"`
	Attr   ProfileAttribute `thrift:"attr,2" json:"attr"`
	Value  string           `thrift:"value,3" json:"value"`
}

func NewTalkServiceUpdateProfileAttributeArgs() *TalkServiceUpdateProfileAttributeArgs {
	return &TalkServiceUpdateProfileAttributeArgs{}
}

func (p *TalkServiceUpdateProfileAttributeArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceUpdateProfileAttributeArgs) GetAttr() ProfileAttribute {
	return p.Attr
}

func (p *TalkServiceUpdateProfileAttributeArgs) GetValue() string {
	return p.Value
}
func (p *TalkServiceUpdateProfileAttributeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileAttributeArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceUpdateProfileAttributeArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := ProfileAttribute(v)
		p.Attr = temp
	}
	return nil
}

func (p *TalkServiceUpdateProfileAttributeArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *TalkServiceUpdateProfileAttributeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateProfileAttribute_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileAttributeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateProfileAttributeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attr", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attr: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Attr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.attr (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attr: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateProfileAttributeArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateProfileAttributeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateProfileAttributeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateProfileAttributeResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceUpdateProfileAttributeResult() *TalkServiceUpdateProfileAttributeResult {
	return &TalkServiceUpdateProfileAttributeResult{}
}

var TalkServiceUpdateProfileAttributeResult_E_DEFAULT *TalkException

func (p *TalkServiceUpdateProfileAttributeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateProfileAttributeResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateProfileAttributeResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateProfileAttributeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileAttributeResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileAttributeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateProfileAttribute_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateProfileAttributeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateProfileAttributeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateProfileAttributeResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Settings
type TalkServiceUpdateSettingsArgs struct {
	ReqSeq   int32     `thrift:"reqSeq,1" json:"reqSeq"`
	Settings *Settings `thrift:"settings,2" json:"settings"`
}

func NewTalkServiceUpdateSettingsArgs() *TalkServiceUpdateSettingsArgs {
	return &TalkServiceUpdateSettingsArgs{}
}

func (p *TalkServiceUpdateSettingsArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

var TalkServiceUpdateSettingsArgs_Settings_DEFAULT *Settings

func (p *TalkServiceUpdateSettingsArgs) GetSettings() *Settings {
	if !p.IsSetSettings() {
		return TalkServiceUpdateSettingsArgs_Settings_DEFAULT
	}
	return p.Settings
}
func (p *TalkServiceUpdateSettingsArgs) IsSetSettings() bool {
	return p.Settings != nil
}

func (p *TalkServiceUpdateSettingsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceUpdateSettingsArgs) readField2(iprot thrift.TProtocol) error {
	p.Settings = &Settings{}
	if err := p.Settings.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Settings), err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSettings_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateSettingsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("settings", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:settings: ", p), err)
	}
	if err := p.Settings.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Settings), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:settings: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateSettingsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateSettingsArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateSettingsResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceUpdateSettingsResult() *TalkServiceUpdateSettingsResult {
	return &TalkServiceUpdateSettingsResult{}
}

var TalkServiceUpdateSettingsResult_E_DEFAULT *TalkException

func (p *TalkServiceUpdateSettingsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateSettingsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateSettingsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateSettingsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSettings_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateSettingsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateSettingsResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Settings
type TalkServiceUpdateSettings2Args struct {
	ReqSeq   int32     `thrift:"reqSeq,1" json:"reqSeq"`
	Settings *Settings `thrift:"settings,2" json:"settings"`
}

func NewTalkServiceUpdateSettings2Args() *TalkServiceUpdateSettings2Args {
	return &TalkServiceUpdateSettings2Args{}
}

func (p *TalkServiceUpdateSettings2Args) GetReqSeq() int32 {
	return p.ReqSeq
}

var TalkServiceUpdateSettings2Args_Settings_DEFAULT *Settings

func (p *TalkServiceUpdateSettings2Args) GetSettings() *Settings {
	if !p.IsSetSettings() {
		return TalkServiceUpdateSettings2Args_Settings_DEFAULT
	}
	return p.Settings
}
func (p *TalkServiceUpdateSettings2Args) IsSetSettings() bool {
	return p.Settings != nil
}

func (p *TalkServiceUpdateSettings2Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateSettings2Args) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceUpdateSettings2Args) readField2(iprot thrift.TProtocol) error {
	p.Settings = &Settings{}
	if err := p.Settings.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Settings), err)
	}
	return nil
}

func (p *TalkServiceUpdateSettings2Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSettings2_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateSettings2Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateSettings2Args) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("settings", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:settings: ", p), err)
	}
	if err := p.Settings.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Settings), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:settings: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateSettings2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateSettings2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUpdateSettings2Result struct {
	Success *int32         `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceUpdateSettings2Result() *TalkServiceUpdateSettings2Result {
	return &TalkServiceUpdateSettings2Result{}
}

var TalkServiceUpdateSettings2Result_Success_DEFAULT int32

func (p *TalkServiceUpdateSettings2Result) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return TalkServiceUpdateSettings2Result_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceUpdateSettings2Result_E_DEFAULT *TalkException

func (p *TalkServiceUpdateSettings2Result) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateSettings2Result_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateSettings2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceUpdateSettings2Result) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateSettings2Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateSettings2Result) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceUpdateSettings2Result) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateSettings2Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSettings2_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateSettings2Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateSettings2Result) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateSettings2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateSettings2Result(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Attr
//  - Value
type TalkServiceUpdateSettingsAttributeArgs struct {
	ReqSeq int32             `thrift:"reqSeq,1" json:"reqSeq"`
	Attr   SettingsAttribute `thrift:"attr,2" json:"attr"`
	Value  string            `thrift:"value,3" json:"value"`
}

func NewTalkServiceUpdateSettingsAttributeArgs() *TalkServiceUpdateSettingsAttributeArgs {
	return &TalkServiceUpdateSettingsAttributeArgs{}
}

func (p *TalkServiceUpdateSettingsAttributeArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceUpdateSettingsAttributeArgs) GetAttr() SettingsAttribute {
	return p.Attr
}

func (p *TalkServiceUpdateSettingsAttributeArgs) GetValue() string {
	return p.Value
}
func (p *TalkServiceUpdateSettingsAttributeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributeArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributeArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := SettingsAttribute(v)
		p.Attr = temp
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributeArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSettingsAttribute_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateSettingsAttributeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attr", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attr: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Attr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.attr (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attr: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateSettingsAttributeArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateSettingsAttributeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateSettingsAttributeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateSettingsAttributeResult struct {
	E *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceUpdateSettingsAttributeResult() *TalkServiceUpdateSettingsAttributeResult {
	return &TalkServiceUpdateSettingsAttributeResult{}
}

var TalkServiceUpdateSettingsAttributeResult_E_DEFAULT *TalkException

func (p *TalkServiceUpdateSettingsAttributeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateSettingsAttributeResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateSettingsAttributeResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateSettingsAttributeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributeResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSettingsAttribute_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateSettingsAttributeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateSettingsAttributeResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - AttrBitset
//  - Settings
type TalkServiceUpdateSettingsAttributesArgs struct {
	ReqSeq     int32     `thrift:"reqSeq,1" json:"reqSeq"`
	AttrBitset int32     `thrift:"attrBitset,2" json:"attrBitset"`
	Settings   *Settings `thrift:"settings,3" json:"settings"`
}

func NewTalkServiceUpdateSettingsAttributesArgs() *TalkServiceUpdateSettingsAttributesArgs {
	return &TalkServiceUpdateSettingsAttributesArgs{}
}

func (p *TalkServiceUpdateSettingsAttributesArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *TalkServiceUpdateSettingsAttributesArgs) GetAttrBitset() int32 {
	return p.AttrBitset
}

var TalkServiceUpdateSettingsAttributesArgs_Settings_DEFAULT *Settings

func (p *TalkServiceUpdateSettingsAttributesArgs) GetSettings() *Settings {
	if !p.IsSetSettings() {
		return TalkServiceUpdateSettingsAttributesArgs_Settings_DEFAULT
	}
	return p.Settings
}
func (p *TalkServiceUpdateSettingsAttributesArgs) IsSetSettings() bool {
	return p.Settings != nil
}

func (p *TalkServiceUpdateSettingsAttributesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AttrBitset = v
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributesArgs) readField3(iprot thrift.TProtocol) error {
	p.Settings = &Settings{}
	if err := p.Settings.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Settings), err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSettingsAttributes_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateSettingsAttributesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attrBitset", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attrBitset: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AttrBitset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.attrBitset (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attrBitset: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateSettingsAttributesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("settings", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:settings: ", p), err)
	}
	if err := p.Settings.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Settings), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:settings: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateSettingsAttributesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateSettingsAttributesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUpdateSettingsAttributesResult struct {
	Success *int32         `thrift:"success,0" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" json:"e,omitempty"`
}

func NewTalkServiceUpdateSettingsAttributesResult() *TalkServiceUpdateSettingsAttributesResult {
	return &TalkServiceUpdateSettingsAttributesResult{}
}

var TalkServiceUpdateSettingsAttributesResult_Success_DEFAULT int32

func (p *TalkServiceUpdateSettingsAttributesResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return TalkServiceUpdateSettingsAttributesResult_Success_DEFAULT
	}
	return *p.Success
}

var TalkServiceUpdateSettingsAttributesResult_E_DEFAULT *TalkException

func (p *TalkServiceUpdateSettingsAttributesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateSettingsAttributesResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateSettingsAttributesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceUpdateSettingsAttributesResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateSettingsAttributesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributesResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributesResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSettingsAttributes_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateSettingsAttributesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateSettingsAttributesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateSettingsAttributesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateSettingsAttributesResult(%+v)", *p)
}
