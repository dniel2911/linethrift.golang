// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package LineThrift

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type ChannelService interface {
	// Parameters:
	//  - ChannelId
	ApproveChannelAndIssueChannelToken(channelId string) (r *ChannelToken, err error)
	// Parameters:
	//  - LastSynced
	//  - Locale
	GetApprovedChannels(lastSynced int64, locale string) (r *ApprovedChannelInfos, err error)
	// Parameters:
	//  - ChannelId
	//  - Locale
	GetChannelInfo(channelId string, locale string) (r *ChannelInfo, err error)
	// Parameters:
	//  - ChannelId
	//  - Locale
	GetChannelNotificationSetting(channelId string, locale string) (r *ChannelNotificationSetting, err error)
	// Parameters:
	//  - Locale
	GetChannelNotificationSettings(locale string) (r []*ChannelNotificationSetting, err error)
	GetChannelSettings() (r *ChannelSettings, err error)
	// Parameters:
	//  - LastSynced
	GetCommonDomains(lastSynced int64) (r *ChannelDomains, err error)
	// Parameters:
	//  - ChannelIds
	GetFriendChannelMatrices(channelIds []string) (r *FriendChannelMatricesResponse, err error)
	// Parameters:
	//  - ChannelIds
	GetUpdatedChannelIds(channelIds []*ChannelIdWithLastUpdated) (r string, err error)
	// Parameters:
	//  - ChannelId
	IssueChannelToken(channelId string) (r *ChannelToken, err error)
	IssueRequestToken() (r string, err error)
	// Parameters:
	//  - ChannelId
	//  - OtpId
	//  - RedirectUrl
	IssueRequestTokenForAutoLogin(channelId string, otpId string, redirectUrl string) (r string, err error)
	// Parameters:
	//  - ChannelId
	//  - OtpId
	//  - AuthScheme
	//  - ReturnUrl
	IssueRequestTokenWithAuthScheme(channelId string, otpId string, authScheme []string, returnUrl string) (r *RequestTokenResponse, err error)
	// Parameters:
	//  - ChannelId
	RevokeChannel(channelId string) (err error)
	// Parameters:
	//  - ChannelSettings
	UpdateChannelSettings(channelSettings *ChannelSettings) (r bool, err error)
	// Parameters:
	//  - Setting
	UpdateChannelNotificationSetting(setting []*ChannelNotificationSetting) (err error)
}

type ChannelServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewChannelServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ChannelServiceClient {
	return &ChannelServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewChannelServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ChannelServiceClient {
	return &ChannelServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - ChannelId
func (p *ChannelServiceClient) ApproveChannelAndIssueChannelToken(channelId string) (r *ChannelToken, err error) {
	if err = p.sendApproveChannelAndIssueChannelToken(channelId); err != nil {
		return
	}
	return p.recvApproveChannelAndIssueChannelToken()
}

func (p *ChannelServiceClient) sendApproveChannelAndIssueChannelToken(channelId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("approveChannelAndIssueChannelToken", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChannelServiceApproveChannelAndIssueChannelTokenArgs{
		ChannelId: channelId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ChannelServiceClient) recvApproveChannelAndIssueChannelToken() (value *ChannelToken, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "approveChannelAndIssueChannelToken" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "approveChannelAndIssueChannelToken failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "approveChannelAndIssueChannelToken failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error583 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error584 error
		error584, err = error583.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error584
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "approveChannelAndIssueChannelToken failed: invalid message type")
		return
	}
	result := ChannelServiceApproveChannelAndIssueChannelTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - LastSynced
//  - Locale
func (p *ChannelServiceClient) GetApprovedChannels(lastSynced int64, locale string) (r *ApprovedChannelInfos, err error) {
	if err = p.sendGetApprovedChannels(lastSynced, locale); err != nil {
		return
	}
	return p.recvGetApprovedChannels()
}

func (p *ChannelServiceClient) sendGetApprovedChannels(lastSynced int64, locale string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getApprovedChannels", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChannelServiceGetApprovedChannelsArgs{
		LastSynced: lastSynced,
		Locale:     locale,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ChannelServiceClient) recvGetApprovedChannels() (value *ApprovedChannelInfos, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getApprovedChannels" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getApprovedChannels failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getApprovedChannels failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error585 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error586 error
		error586, err = error585.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error586
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getApprovedChannels failed: invalid message type")
		return
	}
	result := ChannelServiceGetApprovedChannelsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ChannelId
//  - Locale
func (p *ChannelServiceClient) GetChannelInfo(channelId string, locale string) (r *ChannelInfo, err error) {
	if err = p.sendGetChannelInfo(channelId, locale); err != nil {
		return
	}
	return p.recvGetChannelInfo()
}

func (p *ChannelServiceClient) sendGetChannelInfo(channelId string, locale string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getChannelInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChannelServiceGetChannelInfoArgs{
		ChannelId: channelId,
		Locale:    locale,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ChannelServiceClient) recvGetChannelInfo() (value *ChannelInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getChannelInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getChannelInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getChannelInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error587 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error588 error
		error588, err = error587.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error588
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getChannelInfo failed: invalid message type")
		return
	}
	result := ChannelServiceGetChannelInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ChannelId
//  - Locale
func (p *ChannelServiceClient) GetChannelNotificationSetting(channelId string, locale string) (r *ChannelNotificationSetting, err error) {
	if err = p.sendGetChannelNotificationSetting(channelId, locale); err != nil {
		return
	}
	return p.recvGetChannelNotificationSetting()
}

func (p *ChannelServiceClient) sendGetChannelNotificationSetting(channelId string, locale string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getChannelNotificationSetting", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChannelServiceGetChannelNotificationSettingArgs{
		ChannelId: channelId,
		Locale:    locale,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ChannelServiceClient) recvGetChannelNotificationSetting() (value *ChannelNotificationSetting, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getChannelNotificationSetting" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getChannelNotificationSetting failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getChannelNotificationSetting failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error589 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error590 error
		error590, err = error589.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error590
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getChannelNotificationSetting failed: invalid message type")
		return
	}
	result := ChannelServiceGetChannelNotificationSettingResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Locale
func (p *ChannelServiceClient) GetChannelNotificationSettings(locale string) (r []*ChannelNotificationSetting, err error) {
	if err = p.sendGetChannelNotificationSettings(locale); err != nil {
		return
	}
	return p.recvGetChannelNotificationSettings()
}

func (p *ChannelServiceClient) sendGetChannelNotificationSettings(locale string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getChannelNotificationSettings", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChannelServiceGetChannelNotificationSettingsArgs{
		Locale: locale,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ChannelServiceClient) recvGetChannelNotificationSettings() (value []*ChannelNotificationSetting, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getChannelNotificationSettings" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getChannelNotificationSettings failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getChannelNotificationSettings failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error591 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error592 error
		error592, err = error591.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error592
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getChannelNotificationSettings failed: invalid message type")
		return
	}
	result := ChannelServiceGetChannelNotificationSettingsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *ChannelServiceClient) GetChannelSettings() (r *ChannelSettings, err error) {
	if err = p.sendGetChannelSettings(); err != nil {
		return
	}
	return p.recvGetChannelSettings()
}

func (p *ChannelServiceClient) sendGetChannelSettings() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getChannelSettings", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChannelServiceGetChannelSettingsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ChannelServiceClient) recvGetChannelSettings() (value *ChannelSettings, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getChannelSettings" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getChannelSettings failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getChannelSettings failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error593 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error594 error
		error594, err = error593.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error594
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getChannelSettings failed: invalid message type")
		return
	}
	result := ChannelServiceGetChannelSettingsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - LastSynced
func (p *ChannelServiceClient) GetCommonDomains(lastSynced int64) (r *ChannelDomains, err error) {
	if err = p.sendGetCommonDomains(lastSynced); err != nil {
		return
	}
	return p.recvGetCommonDomains()
}

func (p *ChannelServiceClient) sendGetCommonDomains(lastSynced int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getCommonDomains", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChannelServiceGetCommonDomainsArgs{
		LastSynced: lastSynced,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ChannelServiceClient) recvGetCommonDomains() (value *ChannelDomains, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getCommonDomains" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCommonDomains failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCommonDomains failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error595 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error596 error
		error596, err = error595.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error596
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCommonDomains failed: invalid message type")
		return
	}
	result := ChannelServiceGetCommonDomainsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ChannelIds
func (p *ChannelServiceClient) GetFriendChannelMatrices(channelIds []string) (r *FriendChannelMatricesResponse, err error) {
	if err = p.sendGetFriendChannelMatrices(channelIds); err != nil {
		return
	}
	return p.recvGetFriendChannelMatrices()
}

func (p *ChannelServiceClient) sendGetFriendChannelMatrices(channelIds []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getFriendChannelMatrices", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChannelServiceGetFriendChannelMatricesArgs{
		ChannelIds: channelIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ChannelServiceClient) recvGetFriendChannelMatrices() (value *FriendChannelMatricesResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getFriendChannelMatrices" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getFriendChannelMatrices failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getFriendChannelMatrices failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error597 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error598 error
		error598, err = error597.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error598
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getFriendChannelMatrices failed: invalid message type")
		return
	}
	result := ChannelServiceGetFriendChannelMatricesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ChannelIds
func (p *ChannelServiceClient) GetUpdatedChannelIds(channelIds []*ChannelIdWithLastUpdated) (r string, err error) {
	if err = p.sendGetUpdatedChannelIds(channelIds); err != nil {
		return
	}
	return p.recvGetUpdatedChannelIds()
}

func (p *ChannelServiceClient) sendGetUpdatedChannelIds(channelIds []*ChannelIdWithLastUpdated) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUpdatedChannelIds", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChannelServiceGetUpdatedChannelIdsArgs{
		ChannelIds: channelIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ChannelServiceClient) recvGetUpdatedChannelIds() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUpdatedChannelIds" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUpdatedChannelIds failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUpdatedChannelIds failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error599 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error600 error
		error600, err = error599.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error600
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUpdatedChannelIds failed: invalid message type")
		return
	}
	result := ChannelServiceGetUpdatedChannelIdsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ChannelId
func (p *ChannelServiceClient) IssueChannelToken(channelId string) (r *ChannelToken, err error) {
	if err = p.sendIssueChannelToken(channelId); err != nil {
		return
	}
	return p.recvIssueChannelToken()
}

func (p *ChannelServiceClient) sendIssueChannelToken(channelId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("issueChannelToken", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChannelServiceIssueChannelTokenArgs{
		ChannelId: channelId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ChannelServiceClient) recvIssueChannelToken() (value *ChannelToken, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "issueChannelToken" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "issueChannelToken failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "issueChannelToken failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error601 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error602 error
		error602, err = error601.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error602
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "issueChannelToken failed: invalid message type")
		return
	}
	result := ChannelServiceIssueChannelTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *ChannelServiceClient) IssueRequestToken() (r string, err error) {
	if err = p.sendIssueRequestToken(); err != nil {
		return
	}
	return p.recvIssueRequestToken()
}

func (p *ChannelServiceClient) sendIssueRequestToken() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("issueRequestToken", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChannelServiceIssueRequestTokenArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ChannelServiceClient) recvIssueRequestToken() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "issueRequestToken" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "issueRequestToken failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "issueRequestToken failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error603 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error604 error
		error604, err = error603.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error604
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "issueRequestToken failed: invalid message type")
		return
	}
	result := ChannelServiceIssueRequestTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ChannelId
//  - OtpId
//  - RedirectUrl
func (p *ChannelServiceClient) IssueRequestTokenForAutoLogin(channelId string, otpId string, redirectUrl string) (r string, err error) {
	if err = p.sendIssueRequestTokenForAutoLogin(channelId, otpId, redirectUrl); err != nil {
		return
	}
	return p.recvIssueRequestTokenForAutoLogin()
}

func (p *ChannelServiceClient) sendIssueRequestTokenForAutoLogin(channelId string, otpId string, redirectUrl string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("issueRequestTokenForAutoLogin", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChannelServiceIssueRequestTokenForAutoLoginArgs{
		ChannelId:   channelId,
		OtpId:       otpId,
		RedirectUrl: redirectUrl,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ChannelServiceClient) recvIssueRequestTokenForAutoLogin() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "issueRequestTokenForAutoLogin" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "issueRequestTokenForAutoLogin failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "issueRequestTokenForAutoLogin failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error605 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error606 error
		error606, err = error605.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error606
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "issueRequestTokenForAutoLogin failed: invalid message type")
		return
	}
	result := ChannelServiceIssueRequestTokenForAutoLoginResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ChannelId
//  - OtpId
//  - AuthScheme
//  - ReturnUrl
func (p *ChannelServiceClient) IssueRequestTokenWithAuthScheme(channelId string, otpId string, authScheme []string, returnUrl string) (r *RequestTokenResponse, err error) {
	if err = p.sendIssueRequestTokenWithAuthScheme(channelId, otpId, authScheme, returnUrl); err != nil {
		return
	}
	return p.recvIssueRequestTokenWithAuthScheme()
}

func (p *ChannelServiceClient) sendIssueRequestTokenWithAuthScheme(channelId string, otpId string, authScheme []string, returnUrl string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("issueRequestTokenWithAuthScheme", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChannelServiceIssueRequestTokenWithAuthSchemeArgs{
		ChannelId:  channelId,
		OtpId:      otpId,
		AuthScheme: authScheme,
		ReturnUrl:  returnUrl,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ChannelServiceClient) recvIssueRequestTokenWithAuthScheme() (value *RequestTokenResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "issueRequestTokenWithAuthScheme" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "issueRequestTokenWithAuthScheme failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "issueRequestTokenWithAuthScheme failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error607 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error608 error
		error608, err = error607.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error608
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "issueRequestTokenWithAuthScheme failed: invalid message type")
		return
	}
	result := ChannelServiceIssueRequestTokenWithAuthSchemeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ChannelId
func (p *ChannelServiceClient) RevokeChannel(channelId string) (err error) {
	if err = p.sendRevokeChannel(channelId); err != nil {
		return
	}
	return p.recvRevokeChannel()
}

func (p *ChannelServiceClient) sendRevokeChannel(channelId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("revokeChannel", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChannelServiceRevokeChannelArgs{
		ChannelId: channelId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ChannelServiceClient) recvRevokeChannel() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "revokeChannel" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "revokeChannel failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "revokeChannel failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error609 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error610 error
		error610, err = error609.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error610
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "revokeChannel failed: invalid message type")
		return
	}
	result := ChannelServiceRevokeChannelResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ChannelSettings
func (p *ChannelServiceClient) UpdateChannelSettings(channelSettings *ChannelSettings) (r bool, err error) {
	if err = p.sendUpdateChannelSettings(channelSettings); err != nil {
		return
	}
	return p.recvUpdateChannelSettings()
}

func (p *ChannelServiceClient) sendUpdateChannelSettings(channelSettings *ChannelSettings) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateChannelSettings", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChannelServiceUpdateChannelSettingsArgs{
		ChannelSettings: channelSettings,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ChannelServiceClient) recvUpdateChannelSettings() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateChannelSettings" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateChannelSettings failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateChannelSettings failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error611 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error612 error
		error612, err = error611.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error612
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateChannelSettings failed: invalid message type")
		return
	}
	result := ChannelServiceUpdateChannelSettingsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Setting
func (p *ChannelServiceClient) UpdateChannelNotificationSetting(setting []*ChannelNotificationSetting) (err error) {
	if err = p.sendUpdateChannelNotificationSetting(setting); err != nil {
		return
	}
	return p.recvUpdateChannelNotificationSetting()
}

func (p *ChannelServiceClient) sendUpdateChannelNotificationSetting(setting []*ChannelNotificationSetting) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateChannelNotificationSetting", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChannelServiceUpdateChannelNotificationSettingArgs{
		Setting: setting,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ChannelServiceClient) recvUpdateChannelNotificationSetting() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateChannelNotificationSetting" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateChannelNotificationSetting failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateChannelNotificationSetting failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error613 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error614 error
		error614, err = error613.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error614
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateChannelNotificationSetting failed: invalid message type")
		return
	}
	result := ChannelServiceUpdateChannelNotificationSettingResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

type ChannelServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ChannelService
}

func (p *ChannelServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ChannelServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ChannelServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewChannelServiceProcessor(handler ChannelService) *ChannelServiceProcessor {

	self615 := &ChannelServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self615.processorMap["approveChannelAndIssueChannelToken"] = &channelServiceProcessorApproveChannelAndIssueChannelToken{handler: handler}
	self615.processorMap["getApprovedChannels"] = &channelServiceProcessorGetApprovedChannels{handler: handler}
	self615.processorMap["getChannelInfo"] = &channelServiceProcessorGetChannelInfo{handler: handler}
	self615.processorMap["getChannelNotificationSetting"] = &channelServiceProcessorGetChannelNotificationSetting{handler: handler}
	self615.processorMap["getChannelNotificationSettings"] = &channelServiceProcessorGetChannelNotificationSettings{handler: handler}
	self615.processorMap["getChannelSettings"] = &channelServiceProcessorGetChannelSettings{handler: handler}
	self615.processorMap["getCommonDomains"] = &channelServiceProcessorGetCommonDomains{handler: handler}
	self615.processorMap["getFriendChannelMatrices"] = &channelServiceProcessorGetFriendChannelMatrices{handler: handler}
	self615.processorMap["getUpdatedChannelIds"] = &channelServiceProcessorGetUpdatedChannelIds{handler: handler}
	self615.processorMap["issueChannelToken"] = &channelServiceProcessorIssueChannelToken{handler: handler}
	self615.processorMap["issueRequestToken"] = &channelServiceProcessorIssueRequestToken{handler: handler}
	self615.processorMap["issueRequestTokenForAutoLogin"] = &channelServiceProcessorIssueRequestTokenForAutoLogin{handler: handler}
	self615.processorMap["issueRequestTokenWithAuthScheme"] = &channelServiceProcessorIssueRequestTokenWithAuthScheme{handler: handler}
	self615.processorMap["revokeChannel"] = &channelServiceProcessorRevokeChannel{handler: handler}
	self615.processorMap["updateChannelSettings"] = &channelServiceProcessorUpdateChannelSettings{handler: handler}
	self615.processorMap["updateChannelNotificationSetting"] = &channelServiceProcessorUpdateChannelNotificationSetting{handler: handler}
	return self615
}

func (p *ChannelServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x616 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x616.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x616

}

type channelServiceProcessorApproveChannelAndIssueChannelToken struct {
	handler ChannelService
}

func (p *channelServiceProcessorApproveChannelAndIssueChannelToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChannelServiceApproveChannelAndIssueChannelTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("approveChannelAndIssueChannelToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChannelServiceApproveChannelAndIssueChannelTokenResult{}
	var retval *ChannelToken
	var err2 error
	if retval, err2 = p.handler.ApproveChannelAndIssueChannelToken(args.ChannelId); err2 != nil {
		switch v := err2.(type) {
		case *ChannelException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing approveChannelAndIssueChannelToken: "+err2.Error())
			oprot.WriteMessageBegin("approveChannelAndIssueChannelToken", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("approveChannelAndIssueChannelToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type channelServiceProcessorGetApprovedChannels struct {
	handler ChannelService
}

func (p *channelServiceProcessorGetApprovedChannels) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChannelServiceGetApprovedChannelsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getApprovedChannels", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChannelServiceGetApprovedChannelsResult{}
	var retval *ApprovedChannelInfos
	var err2 error
	if retval, err2 = p.handler.GetApprovedChannels(args.LastSynced, args.Locale); err2 != nil {
		switch v := err2.(type) {
		case *ChannelException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getApprovedChannels: "+err2.Error())
			oprot.WriteMessageBegin("getApprovedChannels", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getApprovedChannels", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type channelServiceProcessorGetChannelInfo struct {
	handler ChannelService
}

func (p *channelServiceProcessorGetChannelInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChannelServiceGetChannelInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getChannelInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChannelServiceGetChannelInfoResult{}
	var retval *ChannelInfo
	var err2 error
	if retval, err2 = p.handler.GetChannelInfo(args.ChannelId, args.Locale); err2 != nil {
		switch v := err2.(type) {
		case *ChannelException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChannelInfo: "+err2.Error())
			oprot.WriteMessageBegin("getChannelInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getChannelInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type channelServiceProcessorGetChannelNotificationSetting struct {
	handler ChannelService
}

func (p *channelServiceProcessorGetChannelNotificationSetting) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChannelServiceGetChannelNotificationSettingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getChannelNotificationSetting", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChannelServiceGetChannelNotificationSettingResult{}
	var retval *ChannelNotificationSetting
	var err2 error
	if retval, err2 = p.handler.GetChannelNotificationSetting(args.ChannelId, args.Locale); err2 != nil {
		switch v := err2.(type) {
		case *ChannelException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChannelNotificationSetting: "+err2.Error())
			oprot.WriteMessageBegin("getChannelNotificationSetting", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getChannelNotificationSetting", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type channelServiceProcessorGetChannelNotificationSettings struct {
	handler ChannelService
}

func (p *channelServiceProcessorGetChannelNotificationSettings) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChannelServiceGetChannelNotificationSettingsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getChannelNotificationSettings", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChannelServiceGetChannelNotificationSettingsResult{}
	var retval []*ChannelNotificationSetting
	var err2 error
	if retval, err2 = p.handler.GetChannelNotificationSettings(args.Locale); err2 != nil {
		switch v := err2.(type) {
		case *ChannelException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChannelNotificationSettings: "+err2.Error())
			oprot.WriteMessageBegin("getChannelNotificationSettings", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getChannelNotificationSettings", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type channelServiceProcessorGetChannelSettings struct {
	handler ChannelService
}

func (p *channelServiceProcessorGetChannelSettings) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChannelServiceGetChannelSettingsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getChannelSettings", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChannelServiceGetChannelSettingsResult{}
	var retval *ChannelSettings
	var err2 error
	if retval, err2 = p.handler.GetChannelSettings(); err2 != nil {
		switch v := err2.(type) {
		case *ChannelException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChannelSettings: "+err2.Error())
			oprot.WriteMessageBegin("getChannelSettings", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getChannelSettings", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type channelServiceProcessorGetCommonDomains struct {
	handler ChannelService
}

func (p *channelServiceProcessorGetCommonDomains) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChannelServiceGetCommonDomainsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCommonDomains", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChannelServiceGetCommonDomainsResult{}
	var retval *ChannelDomains
	var err2 error
	if retval, err2 = p.handler.GetCommonDomains(args.LastSynced); err2 != nil {
		switch v := err2.(type) {
		case *ChannelException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCommonDomains: "+err2.Error())
			oprot.WriteMessageBegin("getCommonDomains", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getCommonDomains", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type channelServiceProcessorGetFriendChannelMatrices struct {
	handler ChannelService
}

func (p *channelServiceProcessorGetFriendChannelMatrices) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChannelServiceGetFriendChannelMatricesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getFriendChannelMatrices", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChannelServiceGetFriendChannelMatricesResult{}
	var retval *FriendChannelMatricesResponse
	var err2 error
	if retval, err2 = p.handler.GetFriendChannelMatrices(args.ChannelIds); err2 != nil {
		switch v := err2.(type) {
		case *ChannelException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getFriendChannelMatrices: "+err2.Error())
			oprot.WriteMessageBegin("getFriendChannelMatrices", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getFriendChannelMatrices", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type channelServiceProcessorGetUpdatedChannelIds struct {
	handler ChannelService
}

func (p *channelServiceProcessorGetUpdatedChannelIds) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChannelServiceGetUpdatedChannelIdsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUpdatedChannelIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChannelServiceGetUpdatedChannelIdsResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetUpdatedChannelIds(args.ChannelIds); err2 != nil {
		switch v := err2.(type) {
		case *ChannelException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUpdatedChannelIds: "+err2.Error())
			oprot.WriteMessageBegin("getUpdatedChannelIds", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUpdatedChannelIds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type channelServiceProcessorIssueChannelToken struct {
	handler ChannelService
}

func (p *channelServiceProcessorIssueChannelToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChannelServiceIssueChannelTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("issueChannelToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChannelServiceIssueChannelTokenResult{}
	var retval *ChannelToken
	var err2 error
	if retval, err2 = p.handler.IssueChannelToken(args.ChannelId); err2 != nil {
		switch v := err2.(type) {
		case *ChannelException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing issueChannelToken: "+err2.Error())
			oprot.WriteMessageBegin("issueChannelToken", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("issueChannelToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type channelServiceProcessorIssueRequestToken struct {
	handler ChannelService
}

func (p *channelServiceProcessorIssueRequestToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChannelServiceIssueRequestTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("issueRequestToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChannelServiceIssueRequestTokenResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.IssueRequestToken(); err2 != nil {
		switch v := err2.(type) {
		case *ChannelException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing issueRequestToken: "+err2.Error())
			oprot.WriteMessageBegin("issueRequestToken", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("issueRequestToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type channelServiceProcessorIssueRequestTokenForAutoLogin struct {
	handler ChannelService
}

func (p *channelServiceProcessorIssueRequestTokenForAutoLogin) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChannelServiceIssueRequestTokenForAutoLoginArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("issueRequestTokenForAutoLogin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChannelServiceIssueRequestTokenForAutoLoginResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.IssueRequestTokenForAutoLogin(args.ChannelId, args.OtpId, args.RedirectUrl); err2 != nil {
		switch v := err2.(type) {
		case *ChannelException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing issueRequestTokenForAutoLogin: "+err2.Error())
			oprot.WriteMessageBegin("issueRequestTokenForAutoLogin", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("issueRequestTokenForAutoLogin", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type channelServiceProcessorIssueRequestTokenWithAuthScheme struct {
	handler ChannelService
}

func (p *channelServiceProcessorIssueRequestTokenWithAuthScheme) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChannelServiceIssueRequestTokenWithAuthSchemeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("issueRequestTokenWithAuthScheme", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChannelServiceIssueRequestTokenWithAuthSchemeResult{}
	var retval *RequestTokenResponse
	var err2 error
	if retval, err2 = p.handler.IssueRequestTokenWithAuthScheme(args.ChannelId, args.OtpId, args.AuthScheme, args.ReturnUrl); err2 != nil {
		switch v := err2.(type) {
		case *ChannelException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing issueRequestTokenWithAuthScheme: "+err2.Error())
			oprot.WriteMessageBegin("issueRequestTokenWithAuthScheme", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("issueRequestTokenWithAuthScheme", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type channelServiceProcessorRevokeChannel struct {
	handler ChannelService
}

func (p *channelServiceProcessorRevokeChannel) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChannelServiceRevokeChannelArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("revokeChannel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChannelServiceRevokeChannelResult{}
	var err2 error
	if err2 = p.handler.RevokeChannel(args.ChannelId); err2 != nil {
		switch v := err2.(type) {
		case *ChannelException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revokeChannel: "+err2.Error())
			oprot.WriteMessageBegin("revokeChannel", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("revokeChannel", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type channelServiceProcessorUpdateChannelSettings struct {
	handler ChannelService
}

func (p *channelServiceProcessorUpdateChannelSettings) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChannelServiceUpdateChannelSettingsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateChannelSettings", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChannelServiceUpdateChannelSettingsResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.UpdateChannelSettings(args.ChannelSettings); err2 != nil {
		switch v := err2.(type) {
		case *ChannelException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateChannelSettings: "+err2.Error())
			oprot.WriteMessageBegin("updateChannelSettings", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateChannelSettings", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type channelServiceProcessorUpdateChannelNotificationSetting struct {
	handler ChannelService
}

func (p *channelServiceProcessorUpdateChannelNotificationSetting) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChannelServiceUpdateChannelNotificationSettingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateChannelNotificationSetting", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChannelServiceUpdateChannelNotificationSettingResult{}
	var err2 error
	if err2 = p.handler.UpdateChannelNotificationSetting(args.Setting); err2 != nil {
		switch v := err2.(type) {
		case *ChannelException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateChannelNotificationSetting: "+err2.Error())
			oprot.WriteMessageBegin("updateChannelNotificationSetting", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateChannelNotificationSetting", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ChannelId
type ChannelServiceApproveChannelAndIssueChannelTokenArgs struct {
	ChannelId string `thrift:"channelId,1" json:"channelId"`
}

func NewChannelServiceApproveChannelAndIssueChannelTokenArgs() *ChannelServiceApproveChannelAndIssueChannelTokenArgs {
	return &ChannelServiceApproveChannelAndIssueChannelTokenArgs{}
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenArgs) GetChannelId() string {
	return p.ChannelId
}
func (p *ChannelServiceApproveChannelAndIssueChannelTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("approveChannelAndIssueChannelToken_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err)
	}
	return err
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceApproveChannelAndIssueChannelTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceApproveChannelAndIssueChannelTokenResult struct {
	Success *ChannelToken     `thrift:"success,0" json:"success,omitempty"`
	E       *ChannelException `thrift:"e,1" json:"e,omitempty"`
}

func NewChannelServiceApproveChannelAndIssueChannelTokenResult() *ChannelServiceApproveChannelAndIssueChannelTokenResult {
	return &ChannelServiceApproveChannelAndIssueChannelTokenResult{}
}

var ChannelServiceApproveChannelAndIssueChannelTokenResult_Success_DEFAULT *ChannelToken

func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult) GetSuccess() *ChannelToken {
	if !p.IsSetSuccess() {
		return ChannelServiceApproveChannelAndIssueChannelTokenResult_Success_DEFAULT
	}
	return p.Success
}

var ChannelServiceApproveChannelAndIssueChannelTokenResult_E_DEFAULT *ChannelException

func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult) GetE() *ChannelException {
	if !p.IsSetE() {
		return ChannelServiceApproveChannelAndIssueChannelTokenResult_E_DEFAULT
	}
	return p.E
}
func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ChannelToken{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult) readField1(iprot thrift.TProtocol) error {
	p.E = &ChannelException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("approveChannelAndIssueChannelToken_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceApproveChannelAndIssueChannelTokenResult(%+v)", *p)
}

// Attributes:
//  - LastSynced
//  - Locale
type ChannelServiceGetApprovedChannelsArgs struct {
	// unused field # 1
	LastSynced int64  `thrift:"lastSynced,2" json:"lastSynced"`
	Locale     string `thrift:"locale,3" json:"locale"`
}

func NewChannelServiceGetApprovedChannelsArgs() *ChannelServiceGetApprovedChannelsArgs {
	return &ChannelServiceGetApprovedChannelsArgs{}
}

func (p *ChannelServiceGetApprovedChannelsArgs) GetLastSynced() int64 {
	return p.LastSynced
}

func (p *ChannelServiceGetApprovedChannelsArgs) GetLocale() string {
	return p.Locale
}
func (p *ChannelServiceGetApprovedChannelsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceGetApprovedChannelsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LastSynced = v
	}
	return nil
}

func (p *ChannelServiceGetApprovedChannelsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Locale = v
	}
	return nil
}

func (p *ChannelServiceGetApprovedChannelsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getApprovedChannels_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceGetApprovedChannelsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastSynced", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastSynced: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LastSynced)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastSynced (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastSynced: ", p), err)
	}
	return err
}

func (p *ChannelServiceGetApprovedChannelsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("locale", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:locale: ", p), err)
	}
	if err := oprot.WriteString(string(p.Locale)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.locale (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:locale: ", p), err)
	}
	return err
}

func (p *ChannelServiceGetApprovedChannelsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceGetApprovedChannelsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceGetApprovedChannelsResult struct {
	Success *ApprovedChannelInfos `thrift:"success,0" json:"success,omitempty"`
	E       *ChannelException     `thrift:"e,1" json:"e,omitempty"`
}

func NewChannelServiceGetApprovedChannelsResult() *ChannelServiceGetApprovedChannelsResult {
	return &ChannelServiceGetApprovedChannelsResult{}
}

var ChannelServiceGetApprovedChannelsResult_Success_DEFAULT *ApprovedChannelInfos

func (p *ChannelServiceGetApprovedChannelsResult) GetSuccess() *ApprovedChannelInfos {
	if !p.IsSetSuccess() {
		return ChannelServiceGetApprovedChannelsResult_Success_DEFAULT
	}
	return p.Success
}

var ChannelServiceGetApprovedChannelsResult_E_DEFAULT *ChannelException

func (p *ChannelServiceGetApprovedChannelsResult) GetE() *ChannelException {
	if !p.IsSetE() {
		return ChannelServiceGetApprovedChannelsResult_E_DEFAULT
	}
	return p.E
}
func (p *ChannelServiceGetApprovedChannelsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChannelServiceGetApprovedChannelsResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChannelServiceGetApprovedChannelsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceGetApprovedChannelsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ApprovedChannelInfos{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ChannelServiceGetApprovedChannelsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &ChannelException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *ChannelServiceGetApprovedChannelsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getApprovedChannels_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceGetApprovedChannelsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceGetApprovedChannelsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceGetApprovedChannelsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceGetApprovedChannelsResult(%+v)", *p)
}

// Attributes:
//  - ChannelId
//  - Locale
type ChannelServiceGetChannelInfoArgs struct {
	// unused field # 1
	ChannelId string `thrift:"channelId,2" json:"channelId"`
	Locale    string `thrift:"locale,3" json:"locale"`
}

func NewChannelServiceGetChannelInfoArgs() *ChannelServiceGetChannelInfoArgs {
	return &ChannelServiceGetChannelInfoArgs{}
}

func (p *ChannelServiceGetChannelInfoArgs) GetChannelId() string {
	return p.ChannelId
}

func (p *ChannelServiceGetChannelInfoArgs) GetLocale() string {
	return p.Locale
}
func (p *ChannelServiceGetChannelInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceGetChannelInfoArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *ChannelServiceGetChannelInfoArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Locale = v
	}
	return nil
}

func (p *ChannelServiceGetChannelInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getChannelInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceGetChannelInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:channelId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.channelId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:channelId: ", p), err)
	}
	return err
}

func (p *ChannelServiceGetChannelInfoArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("locale", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:locale: ", p), err)
	}
	if err := oprot.WriteString(string(p.Locale)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.locale (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:locale: ", p), err)
	}
	return err
}

func (p *ChannelServiceGetChannelInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceGetChannelInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceGetChannelInfoResult struct {
	Success *ChannelInfo      `thrift:"success,0" json:"success,omitempty"`
	E       *ChannelException `thrift:"e,1" json:"e,omitempty"`
}

func NewChannelServiceGetChannelInfoResult() *ChannelServiceGetChannelInfoResult {
	return &ChannelServiceGetChannelInfoResult{}
}

var ChannelServiceGetChannelInfoResult_Success_DEFAULT *ChannelInfo

func (p *ChannelServiceGetChannelInfoResult) GetSuccess() *ChannelInfo {
	if !p.IsSetSuccess() {
		return ChannelServiceGetChannelInfoResult_Success_DEFAULT
	}
	return p.Success
}

var ChannelServiceGetChannelInfoResult_E_DEFAULT *ChannelException

func (p *ChannelServiceGetChannelInfoResult) GetE() *ChannelException {
	if !p.IsSetE() {
		return ChannelServiceGetChannelInfoResult_E_DEFAULT
	}
	return p.E
}
func (p *ChannelServiceGetChannelInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChannelServiceGetChannelInfoResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChannelServiceGetChannelInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceGetChannelInfoResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ChannelInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ChannelServiceGetChannelInfoResult) readField1(iprot thrift.TProtocol) error {
	p.E = &ChannelException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *ChannelServiceGetChannelInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getChannelInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceGetChannelInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceGetChannelInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceGetChannelInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceGetChannelInfoResult(%+v)", *p)
}

// Attributes:
//  - ChannelId
//  - Locale
type ChannelServiceGetChannelNotificationSettingArgs struct {
	ChannelId string `thrift:"channelId,1" json:"channelId"`
	Locale    string `thrift:"locale,2" json:"locale"`
}

func NewChannelServiceGetChannelNotificationSettingArgs() *ChannelServiceGetChannelNotificationSettingArgs {
	return &ChannelServiceGetChannelNotificationSettingArgs{}
}

func (p *ChannelServiceGetChannelNotificationSettingArgs) GetChannelId() string {
	return p.ChannelId
}

func (p *ChannelServiceGetChannelNotificationSettingArgs) GetLocale() string {
	return p.Locale
}
func (p *ChannelServiceGetChannelNotificationSettingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceGetChannelNotificationSettingArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *ChannelServiceGetChannelNotificationSettingArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Locale = v
	}
	return nil
}

func (p *ChannelServiceGetChannelNotificationSettingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getChannelNotificationSetting_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceGetChannelNotificationSettingArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err)
	}
	return err
}

func (p *ChannelServiceGetChannelNotificationSettingArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("locale", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:locale: ", p), err)
	}
	if err := oprot.WriteString(string(p.Locale)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.locale (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:locale: ", p), err)
	}
	return err
}

func (p *ChannelServiceGetChannelNotificationSettingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceGetChannelNotificationSettingArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceGetChannelNotificationSettingResult struct {
	Success *ChannelNotificationSetting `thrift:"success,0" json:"success,omitempty"`
	E       *ChannelException           `thrift:"e,1" json:"e,omitempty"`
}

func NewChannelServiceGetChannelNotificationSettingResult() *ChannelServiceGetChannelNotificationSettingResult {
	return &ChannelServiceGetChannelNotificationSettingResult{}
}

var ChannelServiceGetChannelNotificationSettingResult_Success_DEFAULT *ChannelNotificationSetting

func (p *ChannelServiceGetChannelNotificationSettingResult) GetSuccess() *ChannelNotificationSetting {
	if !p.IsSetSuccess() {
		return ChannelServiceGetChannelNotificationSettingResult_Success_DEFAULT
	}
	return p.Success
}

var ChannelServiceGetChannelNotificationSettingResult_E_DEFAULT *ChannelException

func (p *ChannelServiceGetChannelNotificationSettingResult) GetE() *ChannelException {
	if !p.IsSetE() {
		return ChannelServiceGetChannelNotificationSettingResult_E_DEFAULT
	}
	return p.E
}
func (p *ChannelServiceGetChannelNotificationSettingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChannelServiceGetChannelNotificationSettingResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChannelServiceGetChannelNotificationSettingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceGetChannelNotificationSettingResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ChannelNotificationSetting{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ChannelServiceGetChannelNotificationSettingResult) readField1(iprot thrift.TProtocol) error {
	p.E = &ChannelException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *ChannelServiceGetChannelNotificationSettingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getChannelNotificationSetting_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceGetChannelNotificationSettingResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceGetChannelNotificationSettingResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceGetChannelNotificationSettingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceGetChannelNotificationSettingResult(%+v)", *p)
}

// Attributes:
//  - Locale
type ChannelServiceGetChannelNotificationSettingsArgs struct {
	Locale string `thrift:"locale,1" json:"locale"`
}

func NewChannelServiceGetChannelNotificationSettingsArgs() *ChannelServiceGetChannelNotificationSettingsArgs {
	return &ChannelServiceGetChannelNotificationSettingsArgs{}
}

func (p *ChannelServiceGetChannelNotificationSettingsArgs) GetLocale() string {
	return p.Locale
}
func (p *ChannelServiceGetChannelNotificationSettingsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceGetChannelNotificationSettingsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Locale = v
	}
	return nil
}

func (p *ChannelServiceGetChannelNotificationSettingsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getChannelNotificationSettings_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceGetChannelNotificationSettingsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("locale", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:locale: ", p), err)
	}
	if err := oprot.WriteString(string(p.Locale)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.locale (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:locale: ", p), err)
	}
	return err
}

func (p *ChannelServiceGetChannelNotificationSettingsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceGetChannelNotificationSettingsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceGetChannelNotificationSettingsResult struct {
	Success []*ChannelNotificationSetting `thrift:"success,0" json:"success,omitempty"`
	E       *ChannelException             `thrift:"e,1" json:"e,omitempty"`
}

func NewChannelServiceGetChannelNotificationSettingsResult() *ChannelServiceGetChannelNotificationSettingsResult {
	return &ChannelServiceGetChannelNotificationSettingsResult{}
}

var ChannelServiceGetChannelNotificationSettingsResult_Success_DEFAULT []*ChannelNotificationSetting

func (p *ChannelServiceGetChannelNotificationSettingsResult) GetSuccess() []*ChannelNotificationSetting {
	return p.Success
}

var ChannelServiceGetChannelNotificationSettingsResult_E_DEFAULT *ChannelException

func (p *ChannelServiceGetChannelNotificationSettingsResult) GetE() *ChannelException {
	if !p.IsSetE() {
		return ChannelServiceGetChannelNotificationSettingsResult_E_DEFAULT
	}
	return p.E
}
func (p *ChannelServiceGetChannelNotificationSettingsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChannelServiceGetChannelNotificationSettingsResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChannelServiceGetChannelNotificationSettingsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceGetChannelNotificationSettingsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ChannelNotificationSetting, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem617 := &ChannelNotificationSetting{}
		if err := _elem617.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem617), err)
		}
		p.Success = append(p.Success, _elem617)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ChannelServiceGetChannelNotificationSettingsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &ChannelException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *ChannelServiceGetChannelNotificationSettingsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getChannelNotificationSettings_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceGetChannelNotificationSettingsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceGetChannelNotificationSettingsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceGetChannelNotificationSettingsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceGetChannelNotificationSettingsResult(%+v)", *p)
}

type ChannelServiceGetChannelSettingsArgs struct {
}

func NewChannelServiceGetChannelSettingsArgs() *ChannelServiceGetChannelSettingsArgs {
	return &ChannelServiceGetChannelSettingsArgs{}
}

func (p *ChannelServiceGetChannelSettingsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceGetChannelSettingsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getChannelSettings_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceGetChannelSettingsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceGetChannelSettingsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceGetChannelSettingsResult struct {
	Success *ChannelSettings  `thrift:"success,0" json:"success,omitempty"`
	E       *ChannelException `thrift:"e,1" json:"e,omitempty"`
}

func NewChannelServiceGetChannelSettingsResult() *ChannelServiceGetChannelSettingsResult {
	return &ChannelServiceGetChannelSettingsResult{}
}

var ChannelServiceGetChannelSettingsResult_Success_DEFAULT *ChannelSettings

func (p *ChannelServiceGetChannelSettingsResult) GetSuccess() *ChannelSettings {
	if !p.IsSetSuccess() {
		return ChannelServiceGetChannelSettingsResult_Success_DEFAULT
	}
	return p.Success
}

var ChannelServiceGetChannelSettingsResult_E_DEFAULT *ChannelException

func (p *ChannelServiceGetChannelSettingsResult) GetE() *ChannelException {
	if !p.IsSetE() {
		return ChannelServiceGetChannelSettingsResult_E_DEFAULT
	}
	return p.E
}
func (p *ChannelServiceGetChannelSettingsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChannelServiceGetChannelSettingsResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChannelServiceGetChannelSettingsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceGetChannelSettingsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ChannelSettings{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ChannelServiceGetChannelSettingsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &ChannelException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *ChannelServiceGetChannelSettingsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getChannelSettings_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceGetChannelSettingsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceGetChannelSettingsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceGetChannelSettingsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceGetChannelSettingsResult(%+v)", *p)
}

// Attributes:
//  - LastSynced
type ChannelServiceGetCommonDomainsArgs struct {
	LastSynced int64 `thrift:"lastSynced,1" json:"lastSynced"`
}

func NewChannelServiceGetCommonDomainsArgs() *ChannelServiceGetCommonDomainsArgs {
	return &ChannelServiceGetCommonDomainsArgs{}
}

func (p *ChannelServiceGetCommonDomainsArgs) GetLastSynced() int64 {
	return p.LastSynced
}
func (p *ChannelServiceGetCommonDomainsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceGetCommonDomainsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.LastSynced = v
	}
	return nil
}

func (p *ChannelServiceGetCommonDomainsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCommonDomains_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceGetCommonDomainsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastSynced", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lastSynced: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LastSynced)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastSynced (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lastSynced: ", p), err)
	}
	return err
}

func (p *ChannelServiceGetCommonDomainsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceGetCommonDomainsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceGetCommonDomainsResult struct {
	Success *ChannelDomains   `thrift:"success,0" json:"success,omitempty"`
	E       *ChannelException `thrift:"e,1" json:"e,omitempty"`
}

func NewChannelServiceGetCommonDomainsResult() *ChannelServiceGetCommonDomainsResult {
	return &ChannelServiceGetCommonDomainsResult{}
}

var ChannelServiceGetCommonDomainsResult_Success_DEFAULT *ChannelDomains

func (p *ChannelServiceGetCommonDomainsResult) GetSuccess() *ChannelDomains {
	if !p.IsSetSuccess() {
		return ChannelServiceGetCommonDomainsResult_Success_DEFAULT
	}
	return p.Success
}

var ChannelServiceGetCommonDomainsResult_E_DEFAULT *ChannelException

func (p *ChannelServiceGetCommonDomainsResult) GetE() *ChannelException {
	if !p.IsSetE() {
		return ChannelServiceGetCommonDomainsResult_E_DEFAULT
	}
	return p.E
}
func (p *ChannelServiceGetCommonDomainsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChannelServiceGetCommonDomainsResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChannelServiceGetCommonDomainsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceGetCommonDomainsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ChannelDomains{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ChannelServiceGetCommonDomainsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &ChannelException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *ChannelServiceGetCommonDomainsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCommonDomains_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceGetCommonDomainsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceGetCommonDomainsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceGetCommonDomainsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceGetCommonDomainsResult(%+v)", *p)
}

// Attributes:
//  - ChannelIds
type ChannelServiceGetFriendChannelMatricesArgs struct {
	ChannelIds []string `thrift:"channelIds,1" json:"channelIds"`
}

func NewChannelServiceGetFriendChannelMatricesArgs() *ChannelServiceGetFriendChannelMatricesArgs {
	return &ChannelServiceGetFriendChannelMatricesArgs{}
}

func (p *ChannelServiceGetFriendChannelMatricesArgs) GetChannelIds() []string {
	return p.ChannelIds
}
func (p *ChannelServiceGetFriendChannelMatricesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceGetFriendChannelMatricesArgs) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ChannelIds = tSlice
	for i := 0; i < size; i++ {
		var _elem618 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem618 = v
		}
		p.ChannelIds = append(p.ChannelIds, _elem618)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ChannelServiceGetFriendChannelMatricesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFriendChannelMatrices_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceGetFriendChannelMatricesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelIds", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ChannelIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ChannelIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelIds: ", p), err)
	}
	return err
}

func (p *ChannelServiceGetFriendChannelMatricesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceGetFriendChannelMatricesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceGetFriendChannelMatricesResult struct {
	Success *FriendChannelMatricesResponse `thrift:"success,0" json:"success,omitempty"`
	E       *ChannelException              `thrift:"e,1" json:"e,omitempty"`
}

func NewChannelServiceGetFriendChannelMatricesResult() *ChannelServiceGetFriendChannelMatricesResult {
	return &ChannelServiceGetFriendChannelMatricesResult{}
}

var ChannelServiceGetFriendChannelMatricesResult_Success_DEFAULT *FriendChannelMatricesResponse

func (p *ChannelServiceGetFriendChannelMatricesResult) GetSuccess() *FriendChannelMatricesResponse {
	if !p.IsSetSuccess() {
		return ChannelServiceGetFriendChannelMatricesResult_Success_DEFAULT
	}
	return p.Success
}

var ChannelServiceGetFriendChannelMatricesResult_E_DEFAULT *ChannelException

func (p *ChannelServiceGetFriendChannelMatricesResult) GetE() *ChannelException {
	if !p.IsSetE() {
		return ChannelServiceGetFriendChannelMatricesResult_E_DEFAULT
	}
	return p.E
}
func (p *ChannelServiceGetFriendChannelMatricesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChannelServiceGetFriendChannelMatricesResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChannelServiceGetFriendChannelMatricesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceGetFriendChannelMatricesResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &FriendChannelMatricesResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ChannelServiceGetFriendChannelMatricesResult) readField1(iprot thrift.TProtocol) error {
	p.E = &ChannelException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *ChannelServiceGetFriendChannelMatricesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFriendChannelMatrices_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceGetFriendChannelMatricesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceGetFriendChannelMatricesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceGetFriendChannelMatricesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceGetFriendChannelMatricesResult(%+v)", *p)
}

// Attributes:
//  - ChannelIds
type ChannelServiceGetUpdatedChannelIdsArgs struct {
	ChannelIds []*ChannelIdWithLastUpdated `thrift:"channelIds,1" json:"channelIds"`
}

func NewChannelServiceGetUpdatedChannelIdsArgs() *ChannelServiceGetUpdatedChannelIdsArgs {
	return &ChannelServiceGetUpdatedChannelIdsArgs{}
}

func (p *ChannelServiceGetUpdatedChannelIdsArgs) GetChannelIds() []*ChannelIdWithLastUpdated {
	return p.ChannelIds
}
func (p *ChannelServiceGetUpdatedChannelIdsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceGetUpdatedChannelIdsArgs) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ChannelIdWithLastUpdated, 0, size)
	p.ChannelIds = tSlice
	for i := 0; i < size; i++ {
		_elem619 := &ChannelIdWithLastUpdated{}
		if err := _elem619.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem619), err)
		}
		p.ChannelIds = append(p.ChannelIds, _elem619)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ChannelServiceGetUpdatedChannelIdsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUpdatedChannelIds_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceGetUpdatedChannelIdsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelIds", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ChannelIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ChannelIds {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelIds: ", p), err)
	}
	return err
}

func (p *ChannelServiceGetUpdatedChannelIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceGetUpdatedChannelIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceGetUpdatedChannelIdsResult struct {
	Success *string           `thrift:"success,0" json:"success,omitempty"`
	E       *ChannelException `thrift:"e,1" json:"e,omitempty"`
}

func NewChannelServiceGetUpdatedChannelIdsResult() *ChannelServiceGetUpdatedChannelIdsResult {
	return &ChannelServiceGetUpdatedChannelIdsResult{}
}

var ChannelServiceGetUpdatedChannelIdsResult_Success_DEFAULT string

func (p *ChannelServiceGetUpdatedChannelIdsResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return ChannelServiceGetUpdatedChannelIdsResult_Success_DEFAULT
	}
	return *p.Success
}

var ChannelServiceGetUpdatedChannelIdsResult_E_DEFAULT *ChannelException

func (p *ChannelServiceGetUpdatedChannelIdsResult) GetE() *ChannelException {
	if !p.IsSetE() {
		return ChannelServiceGetUpdatedChannelIdsResult_E_DEFAULT
	}
	return p.E
}
func (p *ChannelServiceGetUpdatedChannelIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChannelServiceGetUpdatedChannelIdsResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChannelServiceGetUpdatedChannelIdsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceGetUpdatedChannelIdsResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ChannelServiceGetUpdatedChannelIdsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &ChannelException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *ChannelServiceGetUpdatedChannelIdsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUpdatedChannelIds_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceGetUpdatedChannelIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceGetUpdatedChannelIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceGetUpdatedChannelIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceGetUpdatedChannelIdsResult(%+v)", *p)
}

// Attributes:
//  - ChannelId
type ChannelServiceIssueChannelTokenArgs struct {
	ChannelId string `thrift:"channelId,1" json:"channelId"`
}

func NewChannelServiceIssueChannelTokenArgs() *ChannelServiceIssueChannelTokenArgs {
	return &ChannelServiceIssueChannelTokenArgs{}
}

func (p *ChannelServiceIssueChannelTokenArgs) GetChannelId() string {
	return p.ChannelId
}
func (p *ChannelServiceIssueChannelTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceIssueChannelTokenArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *ChannelServiceIssueChannelTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("issueChannelToken_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceIssueChannelTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err)
	}
	return err
}

func (p *ChannelServiceIssueChannelTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceIssueChannelTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceIssueChannelTokenResult struct {
	Success *ChannelToken     `thrift:"success,0" json:"success,omitempty"`
	E       *ChannelException `thrift:"e,1" json:"e,omitempty"`
}

func NewChannelServiceIssueChannelTokenResult() *ChannelServiceIssueChannelTokenResult {
	return &ChannelServiceIssueChannelTokenResult{}
}

var ChannelServiceIssueChannelTokenResult_Success_DEFAULT *ChannelToken

func (p *ChannelServiceIssueChannelTokenResult) GetSuccess() *ChannelToken {
	if !p.IsSetSuccess() {
		return ChannelServiceIssueChannelTokenResult_Success_DEFAULT
	}
	return p.Success
}

var ChannelServiceIssueChannelTokenResult_E_DEFAULT *ChannelException

func (p *ChannelServiceIssueChannelTokenResult) GetE() *ChannelException {
	if !p.IsSetE() {
		return ChannelServiceIssueChannelTokenResult_E_DEFAULT
	}
	return p.E
}
func (p *ChannelServiceIssueChannelTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChannelServiceIssueChannelTokenResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChannelServiceIssueChannelTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceIssueChannelTokenResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ChannelToken{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ChannelServiceIssueChannelTokenResult) readField1(iprot thrift.TProtocol) error {
	p.E = &ChannelException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *ChannelServiceIssueChannelTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("issueChannelToken_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceIssueChannelTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceIssueChannelTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceIssueChannelTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceIssueChannelTokenResult(%+v)", *p)
}

type ChannelServiceIssueRequestTokenArgs struct {
}

func NewChannelServiceIssueRequestTokenArgs() *ChannelServiceIssueRequestTokenArgs {
	return &ChannelServiceIssueRequestTokenArgs{}
}

func (p *ChannelServiceIssueRequestTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("issueRequestToken_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceIssueRequestTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceIssueRequestTokenResult struct {
	Success *string           `thrift:"success,0" json:"success,omitempty"`
	E       *ChannelException `thrift:"e,1" json:"e,omitempty"`
}

func NewChannelServiceIssueRequestTokenResult() *ChannelServiceIssueRequestTokenResult {
	return &ChannelServiceIssueRequestTokenResult{}
}

var ChannelServiceIssueRequestTokenResult_Success_DEFAULT string

func (p *ChannelServiceIssueRequestTokenResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return ChannelServiceIssueRequestTokenResult_Success_DEFAULT
	}
	return *p.Success
}

var ChannelServiceIssueRequestTokenResult_E_DEFAULT *ChannelException

func (p *ChannelServiceIssueRequestTokenResult) GetE() *ChannelException {
	if !p.IsSetE() {
		return ChannelServiceIssueRequestTokenResult_E_DEFAULT
	}
	return p.E
}
func (p *ChannelServiceIssueRequestTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChannelServiceIssueRequestTokenResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChannelServiceIssueRequestTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenResult) readField1(iprot thrift.TProtocol) error {
	p.E = &ChannelException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("issueRequestToken_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceIssueRequestTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceIssueRequestTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceIssueRequestTokenResult(%+v)", *p)
}

// Attributes:
//  - ChannelId
//  - OtpId
//  - RedirectUrl
type ChannelServiceIssueRequestTokenForAutoLoginArgs struct {
	// unused field # 1
	ChannelId   string `thrift:"channelId,2" json:"channelId"`
	OtpId       string `thrift:"otpId,3" json:"otpId"`
	RedirectUrl string `thrift:"redirectUrl,4" json:"redirectUrl"`
}

func NewChannelServiceIssueRequestTokenForAutoLoginArgs() *ChannelServiceIssueRequestTokenForAutoLoginArgs {
	return &ChannelServiceIssueRequestTokenForAutoLoginArgs{}
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs) GetChannelId() string {
	return p.ChannelId
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs) GetOtpId() string {
	return p.OtpId
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs) GetRedirectUrl() string {
	return p.RedirectUrl
}
func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OtpId = v
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.RedirectUrl = v
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("issueRequestTokenForAutoLogin_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:channelId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.channelId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:channelId: ", p), err)
	}
	return err
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("otpId", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:otpId: ", p), err)
	}
	if err := oprot.WriteString(string(p.OtpId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.otpId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:otpId: ", p), err)
	}
	return err
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("redirectUrl", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:redirectUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.RedirectUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.redirectUrl (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:redirectUrl: ", p), err)
	}
	return err
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceIssueRequestTokenForAutoLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceIssueRequestTokenForAutoLoginResult struct {
	Success *string           `thrift:"success,0" json:"success,omitempty"`
	E       *ChannelException `thrift:"e,1" json:"e,omitempty"`
}

func NewChannelServiceIssueRequestTokenForAutoLoginResult() *ChannelServiceIssueRequestTokenForAutoLoginResult {
	return &ChannelServiceIssueRequestTokenForAutoLoginResult{}
}

var ChannelServiceIssueRequestTokenForAutoLoginResult_Success_DEFAULT string

func (p *ChannelServiceIssueRequestTokenForAutoLoginResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return ChannelServiceIssueRequestTokenForAutoLoginResult_Success_DEFAULT
	}
	return *p.Success
}

var ChannelServiceIssueRequestTokenForAutoLoginResult_E_DEFAULT *ChannelException

func (p *ChannelServiceIssueRequestTokenForAutoLoginResult) GetE() *ChannelException {
	if !p.IsSetE() {
		return ChannelServiceIssueRequestTokenForAutoLoginResult_E_DEFAULT
	}
	return p.E
}
func (p *ChannelServiceIssueRequestTokenForAutoLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginResult) readField1(iprot thrift.TProtocol) error {
	p.E = &ChannelException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("issueRequestTokenForAutoLogin_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceIssueRequestTokenForAutoLoginResult(%+v)", *p)
}

// Attributes:
//  - ChannelId
//  - OtpId
//  - AuthScheme
//  - ReturnUrl
type ChannelServiceIssueRequestTokenWithAuthSchemeArgs struct {
	ChannelId  string   `thrift:"channelId,1" json:"channelId"`
	OtpId      string   `thrift:"otpId,2" json:"otpId"`
	AuthScheme []string `thrift:"authScheme,3" json:"authScheme"`
	ReturnUrl  string   `thrift:"returnUrl,4" json:"returnUrl"`
}

func NewChannelServiceIssueRequestTokenWithAuthSchemeArgs() *ChannelServiceIssueRequestTokenWithAuthSchemeArgs {
	return &ChannelServiceIssueRequestTokenWithAuthSchemeArgs{}
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) GetChannelId() string {
	return p.ChannelId
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) GetOtpId() string {
	return p.OtpId
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) GetAuthScheme() []string {
	return p.AuthScheme
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) GetReturnUrl() string {
	return p.ReturnUrl
}
func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OtpId = v
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.AuthScheme = tSlice
	for i := 0; i < size; i++ {
		var _elem620 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem620 = v
		}
		p.AuthScheme = append(p.AuthScheme, _elem620)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ReturnUrl = v
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("issueRequestTokenWithAuthScheme_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err)
	}
	return err
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("otpId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:otpId: ", p), err)
	}
	if err := oprot.WriteString(string(p.OtpId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.otpId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:otpId: ", p), err)
	}
	return err
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authScheme", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:authScheme: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.AuthScheme)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.AuthScheme {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:authScheme: ", p), err)
	}
	return err
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("returnUrl", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:returnUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.ReturnUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.returnUrl (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:returnUrl: ", p), err)
	}
	return err
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceIssueRequestTokenWithAuthSchemeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceIssueRequestTokenWithAuthSchemeResult struct {
	Success *RequestTokenResponse `thrift:"success,0" json:"success,omitempty"`
	E       *ChannelException     `thrift:"e,1" json:"e,omitempty"`
}

func NewChannelServiceIssueRequestTokenWithAuthSchemeResult() *ChannelServiceIssueRequestTokenWithAuthSchemeResult {
	return &ChannelServiceIssueRequestTokenWithAuthSchemeResult{}
}

var ChannelServiceIssueRequestTokenWithAuthSchemeResult_Success_DEFAULT *RequestTokenResponse

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult) GetSuccess() *RequestTokenResponse {
	if !p.IsSetSuccess() {
		return ChannelServiceIssueRequestTokenWithAuthSchemeResult_Success_DEFAULT
	}
	return p.Success
}

var ChannelServiceIssueRequestTokenWithAuthSchemeResult_E_DEFAULT *ChannelException

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult) GetE() *ChannelException {
	if !p.IsSetE() {
		return ChannelServiceIssueRequestTokenWithAuthSchemeResult_E_DEFAULT
	}
	return p.E
}
func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &RequestTokenResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult) readField1(iprot thrift.TProtocol) error {
	p.E = &ChannelException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("issueRequestTokenWithAuthScheme_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceIssueRequestTokenWithAuthSchemeResult(%+v)", *p)
}

// Attributes:
//  - ChannelId
type ChannelServiceRevokeChannelArgs struct {
	ChannelId string `thrift:"channelId,1" json:"channelId"`
}

func NewChannelServiceRevokeChannelArgs() *ChannelServiceRevokeChannelArgs {
	return &ChannelServiceRevokeChannelArgs{}
}

func (p *ChannelServiceRevokeChannelArgs) GetChannelId() string {
	return p.ChannelId
}
func (p *ChannelServiceRevokeChannelArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceRevokeChannelArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *ChannelServiceRevokeChannelArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revokeChannel_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceRevokeChannelArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err)
	}
	return err
}

func (p *ChannelServiceRevokeChannelArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceRevokeChannelArgs(%+v)", *p)
}

// Attributes:
//  - E
type ChannelServiceRevokeChannelResult struct {
	E *ChannelException `thrift:"e,1" json:"e,omitempty"`
}

func NewChannelServiceRevokeChannelResult() *ChannelServiceRevokeChannelResult {
	return &ChannelServiceRevokeChannelResult{}
}

var ChannelServiceRevokeChannelResult_E_DEFAULT *ChannelException

func (p *ChannelServiceRevokeChannelResult) GetE() *ChannelException {
	if !p.IsSetE() {
		return ChannelServiceRevokeChannelResult_E_DEFAULT
	}
	return p.E
}
func (p *ChannelServiceRevokeChannelResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChannelServiceRevokeChannelResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceRevokeChannelResult) readField1(iprot thrift.TProtocol) error {
	p.E = &ChannelException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *ChannelServiceRevokeChannelResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revokeChannel_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceRevokeChannelResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceRevokeChannelResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceRevokeChannelResult(%+v)", *p)
}

// Attributes:
//  - ChannelSettings
type ChannelServiceUpdateChannelSettingsArgs struct {
	// unused field # 1
	ChannelSettings *ChannelSettings `thrift:"channelSettings,2" json:"channelSettings"`
}

func NewChannelServiceUpdateChannelSettingsArgs() *ChannelServiceUpdateChannelSettingsArgs {
	return &ChannelServiceUpdateChannelSettingsArgs{}
}

var ChannelServiceUpdateChannelSettingsArgs_ChannelSettings_DEFAULT *ChannelSettings

func (p *ChannelServiceUpdateChannelSettingsArgs) GetChannelSettings() *ChannelSettings {
	if !p.IsSetChannelSettings() {
		return ChannelServiceUpdateChannelSettingsArgs_ChannelSettings_DEFAULT
	}
	return p.ChannelSettings
}
func (p *ChannelServiceUpdateChannelSettingsArgs) IsSetChannelSettings() bool {
	return p.ChannelSettings != nil
}

func (p *ChannelServiceUpdateChannelSettingsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceUpdateChannelSettingsArgs) readField2(iprot thrift.TProtocol) error {
	p.ChannelSettings = &ChannelSettings{}
	if err := p.ChannelSettings.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ChannelSettings), err)
	}
	return nil
}

func (p *ChannelServiceUpdateChannelSettingsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateChannelSettings_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceUpdateChannelSettingsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelSettings", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:channelSettings: ", p), err)
	}
	if err := p.ChannelSettings.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ChannelSettings), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:channelSettings: ", p), err)
	}
	return err
}

func (p *ChannelServiceUpdateChannelSettingsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceUpdateChannelSettingsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceUpdateChannelSettingsResult struct {
	Success *bool             `thrift:"success,0" json:"success,omitempty"`
	E       *ChannelException `thrift:"e,1" json:"e,omitempty"`
}

func NewChannelServiceUpdateChannelSettingsResult() *ChannelServiceUpdateChannelSettingsResult {
	return &ChannelServiceUpdateChannelSettingsResult{}
}

var ChannelServiceUpdateChannelSettingsResult_Success_DEFAULT bool

func (p *ChannelServiceUpdateChannelSettingsResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return ChannelServiceUpdateChannelSettingsResult_Success_DEFAULT
	}
	return *p.Success
}

var ChannelServiceUpdateChannelSettingsResult_E_DEFAULT *ChannelException

func (p *ChannelServiceUpdateChannelSettingsResult) GetE() *ChannelException {
	if !p.IsSetE() {
		return ChannelServiceUpdateChannelSettingsResult_E_DEFAULT
	}
	return p.E
}
func (p *ChannelServiceUpdateChannelSettingsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChannelServiceUpdateChannelSettingsResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChannelServiceUpdateChannelSettingsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceUpdateChannelSettingsResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ChannelServiceUpdateChannelSettingsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &ChannelException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *ChannelServiceUpdateChannelSettingsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateChannelSettings_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceUpdateChannelSettingsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceUpdateChannelSettingsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceUpdateChannelSettingsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceUpdateChannelSettingsResult(%+v)", *p)
}

// Attributes:
//  - Setting
type ChannelServiceUpdateChannelNotificationSettingArgs struct {
	Setting []*ChannelNotificationSetting `thrift:"setting,1" json:"setting"`
}

func NewChannelServiceUpdateChannelNotificationSettingArgs() *ChannelServiceUpdateChannelNotificationSettingArgs {
	return &ChannelServiceUpdateChannelNotificationSettingArgs{}
}

func (p *ChannelServiceUpdateChannelNotificationSettingArgs) GetSetting() []*ChannelNotificationSetting {
	return p.Setting
}
func (p *ChannelServiceUpdateChannelNotificationSettingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceUpdateChannelNotificationSettingArgs) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ChannelNotificationSetting, 0, size)
	p.Setting = tSlice
	for i := 0; i < size; i++ {
		_elem621 := &ChannelNotificationSetting{}
		if err := _elem621.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem621), err)
		}
		p.Setting = append(p.Setting, _elem621)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ChannelServiceUpdateChannelNotificationSettingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateChannelNotificationSetting_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceUpdateChannelNotificationSettingArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("setting", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:setting: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Setting)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Setting {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:setting: ", p), err)
	}
	return err
}

func (p *ChannelServiceUpdateChannelNotificationSettingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceUpdateChannelNotificationSettingArgs(%+v)", *p)
}

// Attributes:
//  - E
type ChannelServiceUpdateChannelNotificationSettingResult struct {
	E *ChannelException `thrift:"e,1" json:"e,omitempty"`
}

func NewChannelServiceUpdateChannelNotificationSettingResult() *ChannelServiceUpdateChannelNotificationSettingResult {
	return &ChannelServiceUpdateChannelNotificationSettingResult{}
}

var ChannelServiceUpdateChannelNotificationSettingResult_E_DEFAULT *ChannelException

func (p *ChannelServiceUpdateChannelNotificationSettingResult) GetE() *ChannelException {
	if !p.IsSetE() {
		return ChannelServiceUpdateChannelNotificationSettingResult_E_DEFAULT
	}
	return p.E
}
func (p *ChannelServiceUpdateChannelNotificationSettingResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChannelServiceUpdateChannelNotificationSettingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ChannelServiceUpdateChannelNotificationSettingResult) readField1(iprot thrift.TProtocol) error {
	p.E = &ChannelException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *ChannelServiceUpdateChannelNotificationSettingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateChannelNotificationSetting_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelServiceUpdateChannelNotificationSettingResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *ChannelServiceUpdateChannelNotificationSettingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelServiceUpdateChannelNotificationSettingResult(%+v)", *p)
}
